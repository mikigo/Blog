import{_ as i,c as a,R as n,o as p}from"./chunks/framework.DzXLMhZy.js";const t="/Blog/%E4%B8%80%E7%A7%8D%E9%92%88Linux%E7%B3%BB%E7%BB%9F%E5%BC%82%E5%B8%B8%E5%91%BD%E4%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E6%8A%80%E6%9C%AF%E4%BA%A4%E5%BA%95%E4%B9%A6_assets/wpseSjIhI.jpg",l="/Blog/%E4%B8%80%E7%A7%8D%E9%92%88Linux%E7%B3%BB%E7%BB%9F%E5%BC%82%E5%B8%B8%E5%91%BD%E4%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E6%8A%80%E6%9C%AF%E4%BA%A4%E5%BA%95%E4%B9%A6_assets/wpsWe2fyF.jpg",h="/Blog/%E4%B8%80%E7%A7%8D%E9%92%88Linux%E7%B3%BB%E7%BB%9F%E5%BC%82%E5%B8%B8%E5%91%BD%E4%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E6%8A%80%E6%9C%AF%E4%BA%A4%E5%BA%95%E4%B9%A6_assets/wpsGsUQOC.jpg",k="/Blog/%E4%B8%80%E7%A7%8D%E9%92%88Linux%E7%B3%BB%E7%BB%9F%E5%BC%82%E5%B8%B8%E5%91%BD%E4%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E6%8A%80%E6%9C%AF%E4%BA%A4%E5%BA%95%E4%B9%A6_assets/wpsOE8r5z.jpg",e="/Blog/%E4%B8%80%E7%A7%8D%E9%92%88Linux%E7%B3%BB%E7%BB%9F%E5%BC%82%E5%B8%B8%E5%91%BD%E4%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E6%8A%80%E6%9C%AF%E4%BA%A4%E5%BA%95%E4%B9%A6_assets/wpsQBi6lx.jpg",F="/Blog/%E4%B8%80%E7%A7%8D%E9%92%88Linux%E7%B3%BB%E7%BB%9F%E5%BC%82%E5%B8%B8%E5%91%BD%E4%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E6%8A%80%E6%9C%AF%E4%BA%A4%E5%BA%95%E4%B9%A6_assets/wpsLQg4Cu.jpg",o=JSON.parse('{"title":"一种针对Linux系统异常命令的测试方法技术交底书","description":"","frontmatter":{"Author":"海针"},"headers":[],"relativePath":"技术文档/专利交底书/一种针对Linux系统异常命令的测试方法技术交底书.md","filePath":"技术文档/专利交底书/一种针对Linux系统异常命令的测试方法技术交底书.md","lastUpdated":1736789675000}'),r={name:"技术文档/专利交底书/一种针对Linux系统异常命令的测试方法技术交底书.md"};function E(d,s,g,y,B,C){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="一种针对linux系统异常命令的测试方法技术交底书" tabindex="-1">一种针对Linux系统异常命令的测试方法技术交底书 <a class="header-anchor" href="#一种针对linux系统异常命令的测试方法技术交底书" aria-label="Permalink to &quot;一种针对Linux系统异常命令的测试方法技术交底书&quot;">​</a></h1><h2 id="_0、缩略语和关键术语定义" tabindex="-1"><strong>0、缩略语和关键术语定义</strong> <a class="header-anchor" href="#_0、缩略语和关键术语定义" aria-label="Permalink to &quot;**0、缩略语和关键术语定义**&quot;">​</a></h2><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>术语</strong></td><td style="text-align:center;"><strong>全称</strong></td><td style="text-align:center;"><strong>解释</strong></td></tr><tr><td style="text-align:center;">Linux</td><td style="text-align:center;">GNU/Linux</td><td style="text-align:center;">一种免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUNIX/9032872" target="_blank" rel="noreferrer">类UNIX</a>操作系统。</td></tr><tr><td style="text-align:center;">Shell</td><td style="text-align:center;">Shell</td><td style="text-align:center;">传统意义上的Shell指的是命令行式的Shell，是操作系统最外面的一层，提供了你与操作系统之间通讯的方式，同时它又是一种<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">程序设计语言</a>。</td></tr><tr><td style="text-align:center;">自动化测试框架</td><td style="text-align:center;">/</td><td style="text-align:center;">一个或多个自动化测试基础模块、自动化测试管理模块、自动化测试统计模块等组成的工具集合。</td></tr><tr><td style="text-align:center;">Shell状态码</td><td style="text-align:center;">/</td><td style="text-align:center;">执行命令的退出状态码，可体现Shell命令执行情况。</td></tr></tbody></table><h2 id="_1、相关技术背景-背景技术-与本发明最相近似的现有实现方案-现有技术" tabindex="-1"><strong>1、相关技术背景（背景技术），与本发明最相近似的现有实现方案（现有技术）</strong> <a class="header-anchor" href="#_1、相关技术背景-背景技术-与本发明最相近似的现有实现方案-现有技术" aria-label="Permalink to &quot;**1、相关技术背景（背景技术），与本发明最相近似的现有实现方案（现有技术）**&quot;">​</a></h2><p>在基于Linux操作系统的自动化测试中，需要使用各种Shell命令对系统进行操作并测试系统响应是否符合预期。这些命令往往都可以通过自动化测试完成，通过自动化测试框架执行转换好的测试用例，以此完成测试。</p><p>例如目前较为流行的测试框架： shUnit2 、bats 均可胜任该工作。针对 Linux 系统执行 Shell 命令后，都会有对应的返回状态码，执行成功为0，执行失败为非0。所以针对 Shell 命令的测试中，状态码在自动化测试框架中运用比较频繁，主要用于自动化测试用例的断言，例如判断执行的 Shell 命令，是否符合预期。</p><p>状态码详情可参考：</p><p>表1 Shell 状态码对应详情</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>状态码</td><td>对应情况</td></tr><tr><td>0</td><td>命令成功结束</td></tr><tr><td>1</td><td>通用未知错误</td></tr><tr><td>2</td><td>误用Shell命令</td></tr><tr><td>126</td><td>命令不可执行</td></tr><tr><td>127</td><td>没找到命令</td></tr><tr><td>128</td><td>无效退出参数</td></tr><tr><td>128+x</td><td>Linux信号x的严重错误</td></tr><tr><td>130</td><td>Linux信号2的严重错误，即命令通过SIGINT（Ctrl＋Ｃ）终止</td></tr><tr><td>255</td><td>退出状态码越界</td></tr></tbody></table><h3 id="_1-1、与本发明相关的现有技术" tabindex="-1"><strong>1.1、与本发明相关的现有技术</strong> <a class="header-anchor" href="#_1-1、与本发明相关的现有技术" aria-label="Permalink to &quot;**1.1、与本发明相关的现有技术**&quot;">​</a></h3><h4 id="_1-1-1、现有技术的技术方案" tabindex="-1"><strong>1.1.1、现有技术的技术方案</strong> <a class="header-anchor" href="#_1-1-1、现有技术的技术方案" aria-label="Permalink to &quot;**1.1.1、现有技术的技术方案**&quot;">​</a></h4><p>为了更好的说明，此时使用 Shell脚本模拟一个简单的测试场景：</p><p>l 步骤：向文件testfile1插入内容“True”</p><p>l 预期1：文件testfile1中包含关键字“True”</p><p>l 预期2：文件testfile1中不包含关键字“False”</p><p>l 测试脚本内容如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#! /bin/bash </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tru</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;【场景1】grep筛选到关键字True，输出结果：&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\n命令执行状态：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;___________________&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;【场景2】grep未筛选到关键字False，输出结果：&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\n命令执行状态：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;___________________&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;【场景3】grep筛选关键字Fasle时文件名称输入错误，输出结果：&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\n命令执行状态：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;___________________&quot;</span></span></code></pre></div><p>执行以上脚本结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">【场景1】grep筛选到关键字，输出结果：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令执行状态码：0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">___________________</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">【场景2】grep未筛选到关键字，输出结果：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令执行状态码：1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">___________________</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">【场景3】模拟场景2日志名称错误报错，输出结果：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile2:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 没有那个文件或目录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令执行状态码：1</span></span></code></pre></div><p>通过以上脚本【场景1】和【场景2】命令执行结果，可以看出当工具“grep”筛选到关键字返回0，未筛选到关键字会返回1，哪怕命令是成功结束的，说明“grep”会改变系统状态码。通过【场景3】可看到命令执行失败（日志文件缺失），但最终返回状态码1，与【场景2】结果一致。</p><p>如果后续针对该场景做测试，预期结果断言为非0通过，那么【场景3】执行了错误的命令，从返回结果来看也是符合预期的，测试结果为通过。其实【场景3】最终状态码返回值与命令中包含管道“|”也存在关系，管道会对最终状态码产生影响，与“grep”都存在时，会产生双重干扰，下面用纯管道命令举例。</p><p>例如在一条测试用例中，包含以下操作步骤：</p><p>l 步骤：打印文件testfile1内容，同时把内容“True”替换为“False”展示</p><p>l 测试脚本内容如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#! /bin/bash </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tru</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;【场景4】打印文件内容，并进行了数据处理，输出结果：&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ‘s/True/False/g’</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\n命令执行状态：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;___________________&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;【场景5】打印文件内容，并进行了数据处理，但文件名输入错误，输出结果：&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ‘s/True/False/g’</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\n命令执行状态：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;___________________&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span></code></pre></div><p>执行以上脚本结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">【场景4】打印文件内容，并进行了数据处理，输出结果：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">False</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令执行状态码：0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">___________________</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">【场景5】模拟场景4文件名称错误，输出结果：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile2:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 没有那个文件或目录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令执行状态码：0</span></span></code></pre></div><p>通过【场景4】和【场景5】可以看出，当命令中包含管道“|”，状态码的返回值是以最后一个命令的返回值为准，即使管道前的命令状态码非0。所以从状态码来看，是无法识别出命令异常的，之前提到的【场景3】同理。</p><p>上述举例的情况，在实际工作中出现概率是很大的，除了人为原因代码编写错误或经验不足以外，例如依赖的工具更新/需求变更，导致命令/参数发生变化，同样会导致正常命令变为异常命令。问题看似不大，却存在巨大的质量风险，因为你不知道执行通过的用例中，有一条已经无效了，用例体量大的话，日积月累下甚至会出现很多此类情况。针对此类问题，在人工测试时很容易发现，但是在自动化测试时，市面上现有的测试框架并不能很好的发现此类问题。</p><h3 id="_1-1-2、现有技术的缺点" tabindex="-1"><strong>1.1.2、现有技术的缺点</strong> <a class="header-anchor" href="#_1-1-2、现有技术的缺点" aria-label="Permalink to &quot;**1.1.2、现有技术的缺点**&quot;">​</a></h3><p><strong>1.1.2.1、<strong>shUnit2测试框架</strong></strong></p><p>使用目前较为流行的Shell开源测试框架 shUnit2 对1.1.1章节脚本中包含的命令进行测试，测试用例如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#! /bin/sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># file: examples/equality_test.sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oneTimeSetUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> True</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertTrue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat testfile1 | grep True&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertFalse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat testfile1 | grep False&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertFalse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat testfile2 | grep False&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertTrue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat testfile1 | sed ‘s/True/False/g’&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertTrue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat testfile2 | sed ‘s/True/False/g’&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oneTimeTearDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Load and run shUnit2.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../shunit2</span></span></code></pre></div><p>执行以上测试结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Ran</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span></code></pre></div><p>通过以上执行结果可以看到5条用例全部执行通过。但是【用例3】和【用例5】的执行结果是错误的，因为testfile2这个目录并不存在，这是一条异常命令，但用例的测试结果却是通过，这显然是一个无效测试。</p><p>**1.1.2.2、**bats 测试框架</p><p>使用另外一个热门 Shell 测试框架 bats 进行测试：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env bats</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> True</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test1&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ $status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test2&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ $status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test3&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ $status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test4&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ‘s/True/False/g’</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ $status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test5&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ‘s/True/False/g’</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ $status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">teardown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>执行测试结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ✗</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                                                                                                   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   (in test file test1.bats, line 11)                                                                                                          </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat testfile1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> True&#39; failed                                                                                                    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ✗ test2                                                                                                                                 </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   (in test file test1.bats, line 18)                                                                                                          </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     \`run cat testfile1 | grep False&#39; failed                                                                                                   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ✗</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test3                                                                                                                                 </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   (in test file test1.bats, line 25)                                                                                                          </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> False&#39; failed                                                                                                   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ✗ test4                                                                                                                                </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   (in test file test1.bats, line 32)                                                                                                          </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     \`[ $status -eq 0  ]&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                                                                                                                                 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ✗</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                                                                                                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   (in test file test1.bats, line 38)                                                                                                          </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     \`[ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ]&#39; failed with status 2                                                                                                  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                                                                                                                   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5tests, 5 failures</span></span></code></pre></div><p>可以看到所有测试命令的结果均为失败，很明显测试命令中包含管道时，会影响框架对测试结果的判断，这里就限制了很多测试场景了，部分用例将命令状换后去掉管道再进行测试（用例4、用例5主要描述管道问题，由于无法使用，这里直接去掉）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env bats</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> True</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test1&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> True</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ $status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test2&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> False</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ $status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用例3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test3&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> False</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ $status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">teardown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failures</span></span></code></pre></div><p>现在可以测试成功了，但是和 shUnit2 测试框架一样，用例3的测试结果同样是错误的，未识别出异常命令。而且该框架测试场景也存在一定限制，在实际测试中使用管道的场景还是很多，比如数据的多重处理、需要人机交互的命令等，所以无法满足目前测试场景中复杂的变化。</p><h2 id="_2、本发明技术方案的详细阐述" tabindex="-1"><strong>2、本发明技术方案的详细阐述</strong> <a class="header-anchor" href="#_2、本发明技术方案的详细阐述" aria-label="Permalink to &quot;**2、本发明技术方案的详细阐述**&quot;">​</a></h2><h3 id="_2-1、本发明所要解决的技术问题" tabindex="-1"><strong>2.1、本发明所要解决的技术问题</strong> <a class="header-anchor" href="#_2-1、本发明所要解决的技术问题" aria-label="Permalink to &quot;**2.1、本发明所要解决的技术问题**&quot;">​</a></h3><p>针对Linux系统Shell命令的测试中，为了解决上述技术问题，本发明提供了一种在自动化测试框架中执行测试命令的算法。经过该设计方法来执行测试命令，命令会在方法内部进行大量逻辑处理，重新制定状态码，快速识别异常命令并对异常命令的测试提供支撑，保留最大测试场景支持的同时，最终还能提供准确、可靠的测试结果。</p><h3 id="_2-2、本发明提供的完整技术方案" tabindex="-1"><strong>2.2、本发明提供的完整技术方案</strong> <a class="header-anchor" href="#_2-2、本发明提供的完整技术方案" aria-label="Permalink to &quot;**2.2、本发明提供的完整技术方案**&quot;">​</a></h3><p><strong>方案流程：</strong></p><p><img src="`+t+'" alt=""></p><p>图1 运行逻辑主流程</p><p><img src="'+l+'" alt=""></p><p>图2 运行逻辑子流程1</p><p><img src="'+h+'" alt=""></p><p>图3 运行逻辑子流程2</p><p><img src="'+k+'" alt=""></p><p>图4 运行逻辑子流程3</p><p><img src="'+e+'" alt=""></p><p>图5 运行逻辑子流程4</p><p><strong>准备工作：</strong></p><p>针对需要测试的Linux命令的测试，需要给其命令类型定位，并给予标记，例如定义变量`case_type=True/False`。实现方式可以在调用执行命令的方法时传入参数，也可以在测试用例编写时直接定义等。类型设计定义为两大类型：</p><p>(1) 正确命令：系统执行成功，状态码返回0的命令。</p><p>(2) 异常命令：系统执行失败，状态码返回非0的命令。</p><p><em>注：定义这个两个类型的原因，是为了满足我们日常测试中更丰富的测试场景，例如我们会针对异常命令进行测试，虽然命令报错了，但是这正是我们想要达到的预期，同时会需要对错误输出的文案内容做进一步测试。所以当该命令被定义为`异常命令`后，执行命令最终报错，在测试眼里反而是“执行成功”，反之如果执行成功，那么其实是“执行失败”。以上只是在测试场景较为简单时适用，除此之外还有一些更复杂的场景，有不同的处理逻辑，后续会有说明。</em></p><hr><hr><p><strong>方案详情：</strong></p><p>往往一条测试用例中会存在多个执行命令，这里仅用执行一条命令的流程举例，后续说明当出现多条命令时如何处理，单命令处理流程如下：</p><ol><li>在执行一条Linux命令前，先对命令进行解析，判断命令的组成内容，这里定义为4大场景：</li></ol><p>(1) 【场景1】命令中不包含`管道`与`grep`命令。</p><p>(2) 【场景2】命令中不包含`管道`，但包含`grep`命令。</p><p>(3) 【场景3】命令中包含`管道`，但不包含`grep`命令。</p><p>(4) 【场景4】命令中包含`管道`与`grep`命令。</p><ol><li>根据解析后的命令分类进行不同处理：</li></ol><p>(1) 【场景1】如“图2 运行逻辑子流程1”中所示，处理流程为：</p><p>① 执行测试命令。</p><p>② 判断其状态码是否为0。</p><p>1) 状态码为0，继续判断命令类型：</p><p>a. 正确命令：返回状态码0，表示这是一条正常执行完成的命令。</p><p>b. 异常命令：返回状态码1，表示这是一条报错的异常命令。</p><p>2) 状态码非0，继续判断命令类型：</p><p>a. 正确命令：返回状态码1，表示这是一条报错的异常命令。</p><p>b. 异常命令：返回状态码0，表示这是一条正常执行完成的命令。</p><p>③ 返回该条命令执行后重新定制的状态码与标准/错误输出内容。</p><p>④ 流程结束。</p><p><em>注：这个场景是最常见与普通的场景，针对市面上现有的处理方法来说，新增的是搭配`命令类型`使用的部分，对异常命令测试的执行结果状态码做了新的定义，使测试场景更为丰富和灵活。</em></p><p>(2) 【场景2】如“图3 运行逻辑子流程2”中所示，处理流程为：</p><p>① 执行测试命令。</p><p>② 判断其状态码是否为0。</p><p>1) 状态码为0，继续判断命令类型：</p><p>a. 正确命令：返回状态码0，表示这是一条正常执行完成的命令。</p><p>b. 异常命令：返回状态码1，表示这是一条报错的异常命令。</p><p>2) 状态码非0，继续判断命令类型：</p><p>a. 类型为正确命令，继续判断输出内容是否为空：</p><p>a) 空：返回状态码0，表示这是一条正常执行完成的命令。</p><p>b) 非空：返回状态码1，表示这是一条报错的异常命令。</p><p>b. 类型为异常命令，继续判断输出内容是否为空：</p><p>a) 空：返回状态码1，表示这是一条报错的异常命令。</p><p>b) 非空：返回状态码0，表示这是一条正常执行完成的命令。</p><p>③ 返回该条命令执行后重新定制的状态码与标准/错误输出内容。</p><p>④ 流程结束。</p><p><em>注：这里利用了`grep`命令的特性，当未筛选到关键字返回状态码非0，且标准输出不会存在内容，如果有输出内容则说明是错误输出，是命令执行的报错信息。</em></p><p>(3) 【场景3】如“图4 运行逻辑子流程3”中所示，处理流程为：</p><p>① 在执行测试命令前，引入命令`set`，并配置参数`-o pipefail`。</p><p>② 执行测试命令。</p><p>③ 判断其状态码是否为0。</p><p>1) 状态码为0，继续判断命令类型：</p><p>a. 正确命令：返回状态码0，表示这是一条正常执行完成的命令。</p><p>b. 异常命令：返回状态码1，表示这是一条报错的异常命令。</p><p>2) 状态码非0，继续判断命令类型：</p><p>a. 正确命令：返回状态码1，表示这是一条报错的异常命令。</p><p>b. 异常命令：返回状态码0，表示这是一条正常执行完成的命令。</p><p>④ 返回该条命令执行后重新定制的状态码与标准/错误输出内容。</p><p>⑤ 再次调用命令`set`，并配置参数`+o pipefail`，恢复默认状态，避免对后续用例造成影响。</p><p>⑥ 流程结束。</p><p><em>注：这里运用`set`命令达到的效果是重组状态码，无论命令中有多少管道，只要有一条命令返回状态码非0，则最终状态码也返回非0；反之均为0时，最终状态码为0。这里避免了管道中存在命令报错，但最终状态码为0的情况，解决了管道中命令出现异常后带来的风险。</em></p><p>(4) 【场景3】如“图5 运行逻辑子流程4”中所示，处理流程为：</p><p>① 在执行测试命令前，引入命令`set`，并配置参数`-o pipefail`。</p><p>② 执行测试命令。</p><p>③ 判断存在的`grep`命令是否在管道最后：</p><p>1) `grep`命令不在管道最后：</p><p>a. 判断其状态码是否为0：</p><p>a) 状态码为0，继续判断命令类型：</p><p>i. 正确命令：返回状态码0，表示这是一条正常执行完成的命令。</p><p>ii. 异常命令：返回状态码1，表示这是一条报错的异常命令。</p><p>b) 状态码非0，继续判断命令类型：</p><p>i. 正确命令：返回状态码1，表示这是一条报错的异常命令。</p><p>ii. 异常命令：返回状态码1，表示这是一条报错的异常命令。</p><p><em>注：命令中包含管道和`grep`命令，情况变的复杂，之前的处理都不再适用，这个场景下对管道的定义是各命令的处理具备连续性，若`grep`命令未筛选到结果，后续的命令处理均无意义，所以这类情况无论命令类型为正确/异常，最终状态定义为错误，状态码直接判断为1。</em></p><p>2) `grep` 命令在管道最后，继续判断管道除最后一个命令以外的状态码是否都为0：</p><p>a. 状态码存在非0，继续判断命令类型：</p><p>a) 正确命令：返回状态码1，表示这是一条报错的异常命令。</p><p>b) 异常命令：返回状态码1，表示这是一条报错的异常命令。</p><p><em>注：原理同上个注释，命令中包含管道，代表各命令的处理具备连续性，若中间部分命令报错，那后续的命令处理均无意义，所以这类情况无论命令类型为正确/异常，最终状态定义为错误，状态码直接判断为1。</em></p><p>b. 状态码均为0，继续判断命令最终状态码：</p><p>a) 状态码为0，继续判断命令类型：</p><p>i. 正确命令：返回状态码0，表示这是一条正常执行完成的命令。</p><p>ii. 异常命令：返回状态码1，表示这是一条报错的异常命令。</p><p>b) 状态码非0，继续判断命令类型：</p><p>i. 正确命令：返回状态码0，表示这是一条正常执行完成的命令。</p><p>ii. 异常命令：返回状态码1，表示这是一条报错的异常命令。</p><p><em>注：流程走到这一步说明，`grep`命令之前的所有命令均执行成功，所以此时执行`grep`命令不管是否筛选出关键字，命令都算是执行成功，这里必然是正确命令，不会出现异常命令的情况，如果命令类型为异常命令则为类型设置错误，需要修改。</em></p><p>④ 返回该条命令执行后重新定制的状态码与标准/错误输出内容。</p><p>⑤ 再次调用命令`set`，并配置参数`+o pipefail`，恢复默认状态，避免对后续用例造成影响。</p><p>⑥ 流程结束。</p><p><em>注：相对于之前的场景，该场景最为复杂，融合了所有变量，并对其做了新的定义。其中判断存在的`grep`命令是否在管道最后的意义在于，若使用了管道说明每一个命令都是有意义的，如果还没进行到最后一个命令就出现了报错，或者是`grep`命令未筛选到关键字的情况，那后续的所有命令都毫无意义，这里将这种情况定义为异常，在上面的注释中也有说明。</em></p><ol start="2"><li><p>根据以上子流程中返回的全新状态码与输出内容，配合断言做进一步测试。</p></li><li><p>根据断言结果返回测试结果，若存在一条测试用例包含多条测试命令的情况，结合重新定义的状态码进行判断：</p></li></ol><p>(1) 所有命令返回的状态码均为0，根据断言得出测试结果：</p><p>① 每一条用例中，所有断言均通过则用例通过，状态标记为`pass`。</p><p>② 每一条用例中，存在一个断言不通过，则用例不通过，状态标记为`fail`。</p><p>(2) 若有其中一条命令返回的状态码非0，则该条用例状态为`error`。</p><ol start="4"><li>单条用例测试流程完毕。__</li></ol><p>_ _</p><p><strong>实验验证：</strong></p><p>最后依然采用1.1.2章节的测试点进行实际验证，代码如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#! /bin/bash</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> True</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ......</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 省略部分为定义的用例标题、编号等</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  quiet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat testfile1 | grep True&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;true&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 测试命令后传入参数&quot;true/false&quot;代表命令类型</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Com1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quiet_s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 重新定义的状态码</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Com2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quiet_r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 输出内容</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Exp1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Exp2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;True&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertEqual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Com1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exp1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertIn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exp2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Com2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ......</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  quiet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat testfile1 | grep False&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;false&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Com1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quiet_s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Com2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quiet_r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Exp1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Exp2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertEqual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Com1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exp1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertEqual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exp2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Com2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ......</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  quiet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat testfile2 | grep False&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;true&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quiet_s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Exp1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Exp2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertEqual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Com1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exp1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertEqual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exp2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Com2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ......</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  quiet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat testfile1 | sed &#39;s/True/False/g&#39;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;true&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quiet_r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Exp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;False&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertEqual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Com</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ......</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  quiet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat testfile2 | sed &#39;s/True/False/g&#39;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;true&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quiet_r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Exp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;False&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertEqual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Com</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile1</span></span></code></pre></div><p>测试结果如下：</p><p><img src="'+F+'" alt=""></p><p>图6 实际验证结果</p><p>可以看到在1.1.2章节中测试无效的测试点，根据这套处理逻辑执行之后，能明显的识别出异常，规避了异常用例的测试结果为`pass`的问题。这里新增用例状态为`error`，快速的识别出了用例代码质量风险，代表用例中存在测试命令异常，该条用例需要重点检查，是测试环境变化导致，还是需求变更导致命令变化等。</p><h3 id="_2-3、本发明技术方案带来的有益效果" tabindex="-1"><strong>2.3、本发明技术方案带来的有益效果</strong> <a class="header-anchor" href="#_2-3、本发明技术方案带来的有益效果" aria-label="Permalink to &quot;**2.3、本发明技术方案带来的有益效果**&quot;">​</a></h3><p>上述设计的执行Shell算法，运用在自动化测试框架中后：</p><p>(1) 测试结果更准确，降低质量风险。</p><p>(2) 能更好的识别测试命令的有效性，快速发现异常的命令，提升分析效率。</p><p>(3) 支持并扩展异常命令测试场景，满足更多的测试场景变化。</p><h3 id="_2-4、针对上述技术方案-是否还有替代方案同样能完成发明目的" tabindex="-1"><strong>2.4、针对上述技术方案，是否还有替代方案同样能完成发明目的</strong> <a class="header-anchor" href="#_2-4、针对上述技术方案-是否还有替代方案同样能完成发明目的" aria-label="Permalink to &quot;**2.4、针对上述技术方案，是否还有替代方案同样能完成发明目的**&quot;">​</a></h3><p>无</p><h2 id="_3、本发明的技术关键点和欲保护点是什么" tabindex="-1"><strong>3、本发明的技术关键点和欲保护点是什么</strong> <a class="header-anchor" href="#_3、本发明的技术关键点和欲保护点是什么" aria-label="Permalink to &quot;**3、本发明的技术关键点和欲保护点是什么**&quot;">​</a></h2><p>本发明的技术关键点和欲保护点是2.2章节中所阐述，设计的执行Shell测试命令的一整算法，可复用在任何Shell自动化测试框架中，达到2.3章节提到的效果：</p><p>(1) 主流程：结合事先定义的命令类型，配合解析命令后得出的四大场景，给予不同子流程算法。</p><p>(2) 子流程1：针对场景1设计的算法。</p><p>(3) 子流程2：针对场景2设计的算法。</p><p>(4) 子流程3：针对场景3设计的算法。</p><p>(5) 子流程4：针对场景4设计的算法。</p><p>(6) 结合主流程和子流程算法，得出全新的状态码用于对测试结果的支撑，达到2.3章节提到的目的。</p><h2 id="_4、附件" tabindex="-1"><strong>4、附件：</strong> <a class="header-anchor" href="#_4、附件" aria-label="Permalink to &quot;**4、附件：**&quot;">​</a></h2><p>参考文献（如专利/论文/标准等）</p><p>l <a href="https://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noreferrer"><em>Linux操作系统</em></a></p><p>l <a href="https://zh.wikipedia.org/wiki/%E6%AE%BC%E5%B1%A4" target="_blank" rel="noreferrer"><em>Shell壳层</em></a></p><p>l <a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E5%8B%95%E5%8C%96%E6%B8%AC%E8%A9%A6%E6%A1%86%E6%9E%B6" target="_blank" rel="noreferrer"><em>自动化测试框架</em></a></p>',182)]))}const u=i(r,[["render",E]]);export{o as __pageData,u as default};
