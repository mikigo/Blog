import{_ as i,c as a,R as t,o as l}from"./chunks/framework.CuFLN7ac.js";const g=JSON.parse('{"title":"AT 开发规范","description":"","frontmatter":{"Author":"mikigo"},"headers":[],"relativePath":"分享有趣/经验总结/AT开发规范.md","filePath":"分享有趣/经验总结/AT开发规范.md","lastUpdated":1736847556000}'),n={name:"分享有趣/经验总结/AT开发规范.md"};function e(p,s,h,k,d,r){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="at-开发规范" tabindex="-1">AT 开发规范 <a class="header-anchor" href="#at-开发规范" aria-label="Permalink to &quot;AT 开发规范&quot;">​</a></h1><p>AT 开发规范是根据自动化测试运行多年以来，遇到问题解决问题而形成的一些解决方案，或者说经验总结；</p><p>这些经验符合我们现阶段 AT 所应用的场景需要，也是我们经过长期思考，不断试错不断修正，并在自动化测试项目实践中检验过可行的。</p><p>以此，希望能帮助参与到自动化的相关人员减少试错成本，更好、更快的编写用例及维护用例。</p><h2 id="_1-版本及依赖" tabindex="-1">1. 版本及依赖 <a class="header-anchor" href="#_1-版本及依赖" aria-label="Permalink to &quot;1. 版本及依赖&quot;">​</a></h2><p>基础框架会根据自身的功能开发进行版本迭代发布，基础框架不与某个应用版本绑定；</p><p>但是，应用库会依赖于基础框架的版本。因此，我们建议在 应用库 目录下保存一个文本文件用于记录所依赖的基础框架版本，类似于开发应用的 <code>debian/control</code> 文件的功能，为了保持统一，这个文件就命名为 <code>control</code>，放在应用库根目录下。</p><h2 id="_2-命名规范" tabindex="-1">2. 命名规范 <a class="header-anchor" href="#_2-命名规范" aria-label="Permalink to &quot;2. 命名规范&quot;">​</a></h2><ul><li><p>用例 ID</p><p>每个应用自己维护一套 ID，可以是你自定义的 ID 值，也可以是用某些特有的 ID（比如 PMS 用例ID）；</p><p>一个用例类里面有多个用例时，在用例名称后面加序号。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestFileManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;文管用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_xxx_015_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_xxx_015_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span></code></pre></div></li><li><p>方法函数命名</p></li></ul><div class="tip custom-block"><p class="custom-block-title">方法函数命名关键词列表</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">单词</th></tr></thead><tbody><tr><td style="text-align:left;">左键点击</td><td style="text-align:left;">click</td></tr><tr><td style="text-align:left;">右键点击</td><td style="text-align:left;">right_click</td></tr><tr><td style="text-align:left;">双击</td><td style="text-align:left;">double_click</td></tr><tr><td style="text-align:left;">移动</td><td style="text-align:left;">move_to</td></tr><tr><td style="text-align:left;">拖动</td><td style="text-align:left;">drag</td></tr><tr><td style="text-align:left;">新建</td><td style="text-align:left;">new</td></tr><tr><td style="text-align:left;">拖动到</td><td style="text-align:left;">drag_to</td></tr><tr><td style="text-align:left;">从哪里拖动到哪里</td><td style="text-align:left;">drag_something_from_xxx_to_xxx</td></tr><tr><td style="text-align:left;">获取</td><td style="text-align:left;">get</td></tr><tr><td style="text-align:left;">获取某个元素的坐标</td><td style="text-align:left;">get_location</td></tr><tr><td style="text-align:left;">非特殊文件</td><td style="text-align:left;">file</td></tr><tr><td style="text-align:left;">word文件</td><td style="text-align:left;">doc</td></tr><tr><td style="text-align:left;">text文件</td><td style="text-align:left;">text</td></tr><tr><td style="text-align:left;">文件夹</td><td style="text-align:left;">dir</td></tr></tbody></table></div><ul><li>常量命名</li></ul><div class="tip custom-block"><p class="custom-block-title">常量关键词列表</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">单词</th></tr></thead><tbody><tr><td style="text-align:left;">应用名称</td><td style="text-align:left;"><code>APP_NAME</code></td></tr><tr><td style="text-align:left;">应用描述</td><td style="text-align:left;"><code>DESC</code></td></tr><tr><td style="text-align:left;">本应用以外的其他应用，比如帮助</td><td style="text-align:left;"><code>HELP</code></td></tr></tbody></table></div><ul><li>方法层文件名</li></ul><div class="tip custom-block"><p class="custom-block-title">方法层文件名称列表</p><table><thead><tr><th>名称</th><th style="text-align:left;">单词</th></tr></thead><tbody><tr><td>方法包名</td><td style="text-align:left;">widget</td></tr><tr><td>方法文件名<br>（文管举例）</td><td style="text-align:left;"><code>dfm_widget.py</code><br><code>title_widget.py</code><br><code>right_view_widget.py</code><br><code>left_view_widget.py</code><br><code>pop_widget.py</code><br><code>base_widget.py</code><br><code>dfm_assert.py</code></td></tr></tbody></table></div><ul><li>断言语句名称</li></ul><div class="tip custom-block"><p class="custom-block-title">断言语句命名规范</p><p>断言语句都是以 assert 开头</p><table><thead><tr><th style="text-align:left;">断言</th><th style="text-align:left;">语句</th></tr></thead><tbody><tr><td style="text-align:left;">判断文件是否存在</td><td style="text-align:left;">assert_file_exists<br>assert_file_not_exists</td></tr><tr><td style="text-align:left;">判断桌面目录下文件是否存在</td><td style="text-align:left;">assert_file_exists_in_desktop<br>assert_file_not_exists_in_desktop</td></tr><tr><td style="text-align:left;">判断图片存在</td><td style="text-align:left;">assert_image_exists<br>assert_image_not_exists</td></tr><tr><td style="text-align:left;">判断影院中是否存在图片</td><td style="text-align:left;">assert_image_exists_in_movie<br>assert_image_not_exists_in_movie</td></tr><tr><td style="text-align:left;">判断元素是否存在</td><td style="text-align:left;">assert_element_exist<br>assert_element_not_exist</td></tr><tr><td style="text-align:left;">判断是否相等</td><td style="text-align:left;">assert_equal<br>assert_not_equal</td></tr><tr><td style="text-align:left;">判断是否为真</td><td style="text-align:left;">assert_true<br>assert_false</td></tr></tbody></table></div><h2 id="_3-fixture-规范" tabindex="-1">3. Fixture 规范 <a class="header-anchor" href="#_3-fixture-规范" aria-label="Permalink to &quot;3. Fixture 规范&quot;">​</a></h2><p>为统一编码风格方便后续用例代码维护，现做以下规范说明：</p><ul><li>不建议使用 <code>Xunit</code> 的写法，统一采用 <code>Pytest</code> <code>fixture</code> 的写法。</li><li>应用内 <code>fixture</code> 谨慎使用 <code>autouse=True</code> ，非必要的情况下非常不建议使用这个参数。</li><li>调用 <code>fixture</code> 不能使用 <code>@pytest.mark.usefixture()</code>，使用直接在用例里面传入函数对象。</li><li>建议在一个 <code>conftest.py</code> 里面去写 <code>fixture</code>，一个应用也尽量维护一个 <code>conftest.py </code>文件。</li><li><code>fixture</code> 也需要写功能说明，函数名称要有具体含义。</li></ul><h2 id="_4-方法编写-调用规范" tabindex="-1">4. 方法编写&amp;调用规范 <a class="header-anchor" href="#_4-方法编写-调用规范" aria-label="Permalink to &quot;4. 方法编写&amp;调用规范&quot;">​</a></h2><h3 id="_4-1-方法编写" tabindex="-1">4.1. 方法编写 <a class="header-anchor" href="#_4-1-方法编写" aria-label="Permalink to &quot;4.1. 方法编写&quot;">​</a></h3><ul><li><p>写方法的时候注意方法归属；</p><p>比如文件管理器的界面区域划分为：<code>TitleWidget</code> 、<code>RightViewWidget</code>、<code>LeftViewWidget</code> 、<code>PopWidget</code>，方法是在哪个区域操作的，就写在哪个类里面。</p><p>举例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apps.autotest_dde_file_manager.widget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseWidget</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TitleWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;标题栏方法类&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> click_xxx_in_title_by_ui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;点击标题栏xxx&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # self.dog.find_element_by_attr(&quot;xxxx&quot;).click()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.click(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ui.btn_center(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div></li><li><p>动作开头，注意是动词；</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>click</span></span>
<span class="line"><span>double_click</span></span>
<span class="line"><span>right_click</span></span>
<span class="line"><span>get</span></span>
<span class="line"><span>make</span></span></code></pre></div></li><li><p>元素对象名称；</p><p>界面元素直接与元素名称相同，没有名称的就取一个好听易懂的名字。</p></li><li><p>加上类的关键词；</p><p>避免方法重名，同时可以标记区域。</p></li><li><p>标定操作方法类型；</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>by_ui</span></span>
<span class="line"><span>by_attr</span></span>
<span class="line"><span>by_mk</span></span>
<span class="line"><span>by_img</span></span></code></pre></div></li><li><p>正确使用方法类型；</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 没有用到实例对象：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 没有用到类对象：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    写静态方法，函数前加 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">staticmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    写类方法，函数前加 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  直接写实例方法</span></span></code></pre></div><p>举例:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TitleWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> click_xxx_by_ui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">staticmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> click_xxx_by_ui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> click_xxx_by_ui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cls):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      pass</span></span></code></pre></div></li><li><p>函数名称尽量不出现数字，需要表示数量的用单词表示。</p></li><li><p>函数功能注释；</p><ul><li>没有参数，没有返回，直接写函数功能说明；</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;点击某个元素&quot;&quot;&quot;</span></span></code></pre></div><ul><li>有参数，没有返回，需要写各参数说明；</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;点击某个元素</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">arg1:xxx</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">arg2:xxx</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div><ul><li><p>有参数，有返回，需要写返回值说明；</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;点击某个元素</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">arg1:xxx</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">arg1:xxx </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">return: xxx</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div><p>用 <code>Pycharm</code> 的注释模板也可以，只要体现了参数的类型和返回就行了。</p></li><li><p>暂不要求写类型注解。</p></li></ul></li></ul><h3 id="_4-2-方法调用" tabindex="-1">4.2. 方法调用 <a class="header-anchor" href="#_4-2-方法调用" aria-label="Permalink to &quot;4.2. 方法调用&quot;">​</a></h3><p>在用例中调用方法，通过该应用唯一的出口进行调用，比如文件管理器的统一出口类：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DfmWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TitleWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RightViewWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LeftViewWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PopWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span></code></pre></div><p>在用例里面只需要导入这一个类即可；</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apps.autotest_dde_file_manager.widget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DfmWidget</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apps.autotest_dde_file_manager.case.base_case </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseCase</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestDdeFileManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;文件管理器用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_xxx_001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;xxx&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        dfm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DfmWidget()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        dfm.click_xxx_by_attr()</span></span></code></pre></div><p>尽量不要在用例中单独去调用 TitleWidget 、RightViewWidget、LeftViewWidget 、PopWidget 这些类，否则后期用例会变得不好维护；</p><h2 id="_5-用例编写规范" tabindex="-1">5. 用例编写规范 <a class="header-anchor" href="#_5-用例编写规范" aria-label="Permalink to &quot;5. 用例编写规范&quot;">​</a></h2><h3 id="_5-1-基于类写用例" tabindex="-1">5.1. 基于类写用例 <a class="header-anchor" href="#_5-1-基于类写用例" aria-label="Permalink to &quot;5.1. 基于类写用例&quot;">​</a></h3><p>所有用例都应该基于类去写：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMusic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;音乐用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_music_679537</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;音乐启动&quot;&quot;&quot;</span></span></code></pre></div><p>注意以下几点：</p><ul><li><p>类名不要随便取，同一个应用应该使用同一个类名，用例类名称必须以 Test 开头，遵循大驼峰命名规范；</p></li><li><p>用例类继承 BaseCase，一个应用只有一个 <code>BaseCase</code> ；</p></li><li><p>一个 py 文件里面只有一个类，我们称为一个测试类；</p></li><li><p>一个类里面可以有多个用例函数，这取决这条用例有多少个测试点：</p></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMusic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;音乐用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_music_679537_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;任务栏启动音乐&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_music_679537_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;启动器启动音乐&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_music_679537_3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;桌面启动音乐&quot;&quot;&quot;</span></span></code></pre></div><h3 id="_5-2-用例函数规范" tabindex="-1">5.2. 用例函数规范 <a class="header-anchor" href="#_5-2-用例函数规范" aria-label="Permalink to &quot;5.2. 用例函数规范&quot;">​</a></h3><ul><li><p>用例函数以 test 开头，遵循蛇形命名规范，中间为用例的模块名称，后面加用例 ID，最后加测试点序号，即：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{module}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{case_id}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{index}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">]</span></span></code></pre></div><p>比如：<code>test_music_679537_1</code>，<code>index</code> 从 1 开始。</p></li><li><p>函数功能说明里面写用例标题，直接复制 PMS 上用例标题即可，注意用三对双引号；</p></li><li><p>复制 PMS 用例步骤</p><p>直接将 <code>PMS</code> 上用例步骤和预期复制进来，然后进行批量注释（ ++ctrl+&quot;/&quot;++ ），在注释的基础上去写用例脚本会更加方便全面，也比你自己写注释更节约时间：</p><p>举例： ???+ note &quot;PMS用例&quot; <img src="https://pic.imgdb.cn/item/64f054c8661c6c8e54ff4c71.png" alt=""></p><p>直接选中用例内容，复制下来，然后粘贴到自动化用例脚本中：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMusic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;音乐用例&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_music_679537</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;演唱者-平铺视图下进入演唱者详情页&quot;&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 从PMS上复制的用例标题</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 点击右上角的【平铺视图】按钮</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 切换为平铺视图</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 双击任意演唱者封面</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 进入演唱者详情页面</span></span></code></pre></div><p>上例中井号（#）注释部分就是直接从 <code>PMS</code> 上复制过来的，在此基础上写用例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMusic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;音乐用例&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_music_679537</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;演唱者-平铺视图下进入演唱者详情页&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    music </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DeepinMusicWidget()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    music.click_singer_btn_in_music_by_ui()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 点击右上角的【平铺视图】按钮</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    music.click_icon_mode_in_music_by_ui()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 切换为平铺视图</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 双击任意演唱者封面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    music.double_click_first_singer_in_singer_icon_view_by_ui()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 进入演唱者详情页面</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.assert_xxx</span></span></code></pre></div><p>你看，非常清楚每一步在做什么，重点是省去了写注释的时间，真的炒鸡方便。</p></li></ul><h3 id="_5-3-数据驱动" tabindex="-1">5.3. 数据驱动 <a class="header-anchor" href="#_5-3-数据驱动" aria-label="Permalink to &quot;5.3. 数据驱动&quot;">​</a></h3><ul><li><p>如果用例操作步骤是相同的，只是一些参数变化，尽量使用数据驱动来实现用例；</p></li><li><p>如果你需要使用外部文件 存放数据驱动的数据，尽量不要因此引入依赖，可以使用一些标准库能读取的文件格式，比如 <code>json、ini、CSV、xml、txt</code> 等文件格式；不建议使用 <code>Yaml、Excel、MySQL</code> 等数据格式；</p></li><li><p>读取数据时也尽量使用标准库去做，如使用 <code>pandas</code> 处理 <code>CSV</code> 就属于大材小用了，正常的数据驱动还没到需要大数据分析来处理的地步；</p></li><li><p>数据驱动的 外部文件存放在widget/ddt/ 目录下；</p></li><li><p>数据驱动的写法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@pytest.mark.parametrize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_smb_049</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span></code></pre></div><p>以上这种参数化的写法本身没什么问题；</p><p>但是，这里必须要补充一个没有用的小知识：</p><ul><li><p>使用 ids 参数；</p><p>加 ids 参数之前：</p><p>如果参数化数据里面的字符会原封不动的输出到 <code>item.name</code> 里面，显示非常不优雅，而且可能会引入一些意想不到的问题，可以感受一下：</p><p>参数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;qwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span></code></pre></div><p>终端日志打印出来，现象是这样色儿的：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test_smb_049.py::TestFileManager::test_smb_049[一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test_smb_049.py::TestFileManager::test_smb_049[qwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyui]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test_smb_049.py::TestFileManager::test_smb_049[12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678]</span></span></code></pre></div><p>说实话，看着心里堵得慌，如果这里面包含一些<strong>特殊字符</strong>或者是<strong>超长</strong>，可能还会有一些很奇妙的事情发生。</p><p>加 ids 参数之后：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@pytest.mark.parametrize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ids</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_smb_049</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span></code></pre></div><p>再来感受一下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test_smb_049.py::TestFileManager::test_smb_049[1]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test_smb_049.py::TestFileManager::test_smb_049[2]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test_smb_049.py::TestFileManager::test_smb_049[3]</span></span></code></pre></div><p>明显好多了，所以尽量使用 ids 这个参数。</p></li></ul></li><li><p>不建议使用 <code>fixture</code> 的数据驱动方式，框架虽然支持，但可读性比较差；</p><p>如果你不知道这句话在说啥，那你可以忽略，我也不打算详细说这种实现方式，操作比较骚。</p></li></ul><h3 id="_5-4-断言资源" tabindex="-1">5.4. 断言资源 <a class="header-anchor" href="#_5-4-断言资源" aria-label="Permalink to &quot;5.4. 断言资源&quot;">​</a></h3><ul><li>用例断言的图片资源，直接放在 用例模块的同级目录下的 assert_res 目录 下，图片名称以 用例的模块名称 + 用例 ID 命名；</li><li>图像识别断言，不要截取一张很大的图，图片资源包含的元素太多了，非常容易受到需求影响，建议是进行局部的断言；</li></ul><h3 id="_5-5-元素定位" tabindex="-1">5.5. 元素定位 <a class="header-anchor" href="#_5-5-元素定位" aria-label="Permalink to &quot;5.5. 元素定位&quot;">​</a></h3><ul><li>用于 用例操作步骤中进行元素定位的图片资源，放到 widget/pic_res 目录 下，图片名称命名为该元素的名称；</li><li>用于元素定位的图片截取时尽量精确到这个具体的按钮，图片也不要太大；</li><li>基于 UI 定位的操作较快，合理加入等待时间能提高用例的稳定性。</li></ul><h3 id="_5-6-用例资源" tabindex="-1">5.6. 用例资源 <a class="header-anchor" href="#_5-6-用例资源" aria-label="Permalink to &quot;5.6. 用例资源&quot;">​</a></h3><ul><li><p>用例执行过程中需要使用到的一些资源，存放在 widget/case_res 目录 下，前提是这些资源不超过 10M；</p></li><li><p>如果是一些比较大的资源，建议放到统一的 ftp 服务器，需要执行用例的时候再下载下来；</p></li><li><p>确保一个资源在一次用例执行中只需要下载一次，如果每次使用的时候都去下载，这样可能会耗费大量的网络资源，而因为先判断本地是否存在此资源，如果不存在再去下载；</p></li><li><p>测试用例执行过程中，你可能需要将资源拷贝到对应的测试目录下；</p><p>比如将 mp3 文件拷贝到 <code>~/Music</code> 目录下，但是我们更建议你使用发送快捷链接的方式替代拷贝的操作，因为在拷贝大文件时是很消耗系统资源的，而创建链接则不会；</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeepinMusicWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:	</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> recovery_many_movies_in_movie_by_cmd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cls):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;&quot;&quot;恢复多个视频文件至视频目录中&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      work_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Config.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">USERNAME}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/Videos/auto&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      code_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Config.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CASE_RES_PATH}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/auto&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.run_cmd(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rm -rf </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">work_path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">;mkdir </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">work_path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sleep(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exists(code_path):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.run_cmd(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mkdir -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code_path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ln -s </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code_path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/* </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">work_path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.run_cmd(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cd </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code_path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.wget_file(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;auto.zip&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ln -s </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code_path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/* </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">work_path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/ &gt; /dev/null 2&gt;&amp;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span></code></pre></div><pre><code>资源下载过程中注意 超时 的问题；
</code></pre><p>如果你的测试资源很大，要特别注意这问题，如果你使用强制等待下载结束( <code>os.system</code> )，可能会造成用例执行时长变得不可接受；</p><p>在持续集成环境执行时网络下载速度很慢，所以超时机制是很有必要的；<code>run_cmd</code> 方法有一个默认超时的时间，你可以根据资源大小对超时时间进行调整；</p></li></ul><h2 id="_6-标签化管理规范" tabindex="-1">6. 标签化管理规范 <a class="header-anchor" href="#_6-标签化管理规范" aria-label="Permalink to &quot;6. 标签化管理规范&quot;">​</a></h2><h3 id="_6-1-对应关系" tabindex="-1">6.1. 对应关系 <a class="header-anchor" href="#_6-1-对应关系" aria-label="Permalink to &quot;6.1. 对应关系&quot;">​</a></h3><p>写完自动化用例之后，请在 <code>CSV</code> 文件中标记用例的 ID、等级等标签。</p><p>为了提醒标记，执行用例时在首行会输出 <code>ERROR</code> 日志： <code>CSV 文件里面没有对应的 ID</code>；</p><p>如果 CSV 文件里面没有对应 ID，后续在批量执行的时候，这些用例是不会执行的。</p><h3 id="_6-2-名称一致" tabindex="-1">6.2. 名称一致 <a class="header-anchor" href="#_6-2-名称一致" aria-label="Permalink to &quot;6.2. 名称一致&quot;">​</a></h3><p>CSV 文件的文件名、用例 py 文件中间的名称、用例函数中间的名称，这三个名称一致。</p><p>举例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMusic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_music_679537</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;用例标题&quot;&quot;&quot;</span></span></code></pre></div><p>那么 <code>CSV</code> 文件的名称为 music.csv。</p><p>框架底层代码实现是将 CSV 文件的名称 与 用例脚本名称 进行对应（建立映射）；</p><h2 id="_7-子应用tag管理规范" tabindex="-1">7. 子应用Tag管理规范 <a class="header-anchor" href="#_7-子应用tag管理规范" aria-label="Permalink to &quot;7. 子应用Tag管理规范&quot;">​</a></h2><ul><li><p>应用库 tag 根据应用交付节点生成，每次打 tag 之前，相关测试人员需要进行用例调试；</p></li><li><p>调试用例是指的在全架构上调试通过；</p></li><li><p>tag 号怎么打？</p><p>根据持续集成的要求生成，其中应用版本号需要与项目经理确认本次即将集成的应用版本号是多少；</p><p>tag 的 commit 信息格式：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version:5.6.5</span></span></code></pre></div><p>其中 <code>5.6.5</code> 写应用的集成版本号。</p></li></ul><h2 id="_8-其他规范" tabindex="-1">8. 其他规范 <a class="header-anchor" href="#_8-其他规范" aria-label="Permalink to &quot;8. 其他规范&quot;">​</a></h2><ul><li><p>不写 <code>if __name__ &#39;__main__&#39;:</code>，不写多余的代码；</p></li><li><p>统一文件注释头。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env python3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># _*_ coding:utf-8 _*_</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:Author:email@uniontech.com</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:Date  :\${DATE} \${TIME}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div></li><li><p>日志打印要在方法最前面，否则代码报错没有日志输出，不好定位问题；</p></li><li><p>hook 函数只能写到根目录下的 <code>conftest.py</code> 里面；</p></li><li><p><code>apps</code> 目录下的 <code>conftest.py</code> 原则上不会写 <code>fixture</code>；</p></li><li><p>固定目录或元素控件的操作，将操作方法写死，类似文件的操作可以将文件名留参数；</p></li><li><p>路径拼接规范：</p><ul><li>系统中固定目录，路径拼接时使用波浪符号，比如：<code>~/Desktop/</code>，下层使用 <code>os.path.expanduser()</code>，它可以自动识别波浪符号；</li><li>项目下路径使用配置文件中的路径，比如：<code>Config.BASE_PATH</code>，因为项目是可以在任意路径运行的，需要动态拼接路径。</li></ul></li></ul>`,60)]))}const c=i(n,[["render",e]]);export{g as __pageData,c as default};
