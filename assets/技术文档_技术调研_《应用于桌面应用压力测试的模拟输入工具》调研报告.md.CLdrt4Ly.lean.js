import{_ as e,c as E,R as h,G as n,w as l,m as i,a,B as k,o as d}from"./chunks/framework.DzXLMhZy.js";const r="/Blog/test/1021-%E6%96%87%E7%AE%A1.png",g="/Blog/test/x%E6%93%8D%E4%BD%9C.png",y="/Blog/test/%E9%80%9F%E5%BA%A6.png",o="/Blog/test/%E5%90%91%E6%A1%8C%E9%9D%A2%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6.png",F="/Blog/test/input.png",A="/Blog/test/xlib%E7%AA%97%E5%8F%A3%E8%AF%B4%E6%98%8E.png",D="/Blog/test/app-wininfo-m.png",c="/Blog/test/%E5%8F%AF%E8%A1%8C%E6%80%A7%E8%BF%90%E8%A1%8C.gif",u="/Blog/test/newdemo.png",x=JSON.parse('{"title":"应用于桌面应用压力测试的模拟输入工具调研报告","description":"","frontmatter":{"Author":"海林"},"headers":[],"relativePath":"技术文档/技术调研/《应用于桌面应用压力测试的模拟输入工具》调研报告.md","filePath":"技术文档/技术调研/《应用于桌面应用压力测试的模拟输入工具》调研报告.md","lastUpdated":1736789675000}'),C={name:"技术文档/技术调研/《应用于桌面应用压力测试的模拟输入工具》调研报告.md"};function B(m,s,b,f,v,w){const t=k("center"),p=k("Mermaid");return d(),E("div",null,[s[16]||(s[16]=h('<h1 id="应用于桌面应用压力测试的模拟输入工具调研报告" tabindex="-1">应用于桌面应用压力测试的模拟输入工具调研报告 <a class="header-anchor" href="#应用于桌面应用压力测试的模拟输入工具调研报告" aria-label="Permalink to &quot;应用于桌面应用压力测试的模拟输入工具调研报告&quot;">​</a></h1><h2 id="相关术语" tabindex="-1">相关术语 <a class="header-anchor" href="#相关术语" aria-label="Permalink to &quot;相关术语&quot;">​</a></h2><table><thead><tr><th>术语</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td><strong>InputDevice</strong></td><td style="text-align:center;">支持 linux 管理不同类型、不同原理、不同的输入信息的输入设备软件体系</td></tr><tr><td><strong>MEM</strong></td><td style="text-align:center;">MEM 是一个内存显示程序，显示所有内存驻留程序的占用情况</td></tr><tr><td><strong>输入子系统</strong></td><td style="text-align:center;">输入子系统核心层（Input Core）、驱动层和事件处理层（Event Handler）</td></tr></tbody></table>',3)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[0]||(s[0]=[a("表一 术语")])),_:1}),s[17]||(s[17]=h(`<h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><p>随着文件管理器（以下简称&quot;文管&quot;）的使用者越来越多，厂商和社区反馈了越来越多反复操作后出现概率概率性 BUG，为了对 BUG 进行复现，就需要进行压力测试。</p><p>在我们日常压力测试过程中，文管测试组需要使用现有的设备进行问题复验和场景压测，设备和人力资源有限，因此，在复现和验证这些问题的过程中，存在着如下问题：</p><ol><li><p>耗时巨大，追其原因，是因为在测试过程中，测试复现时反复操作的顺序不同、频率不够、操作慢都可能导致Bug无法复现，整个复现周期相对较长，人力和时间耗费较多。</p></li><li><p>无可靠性，在遇到概率性 BUG 进行回归的时候，我们无法确定需要测试多少次才能确保问题已修复，而且有可能人力压力测试无法达到复现条件，没有数据支撑测试结论。</p></li></ol><p>因此，探索一种良好的压力测试方案，是迫在眉睫的，可以更准确的验证及回归问题，并且减少人力资源和提升测试效率。</p><h2 id="现状" tabindex="-1">现状 <a class="header-anchor" href="#现状" aria-label="Permalink to &quot;现状&quot;">​</a></h2><p>基于上述问题，当前市面上对于应用压测存在如下几个方案：</p><p><strong>方案一：使用 Python 脚本进行场景压测</strong></p><p>使用 Python 编写压测脚本，需要使用第三方库 PyAutoGUI 和 Dogtail，PyAutoGUI 是一个纯Python 的 GUI 自动化工具，可以用程序自动控制鼠标和键盘操作模拟用户操作行为，多平台支持（Windows，OS X，Linux）</p><p>在编写脚本之前，我们首先需要准备环境，即安装 PyAutoGUI 和 Dogtail 库。</p><p>开始编写一个简单压测场景脚本：循环一直新建文件夹。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pyautogui</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 鼠标移动到x=100,y=100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pyautogui.rightClick(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pyautogui.click(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">155</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">117</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>一个场景压测，往往不会这么简单，列举部分文管场景压力测试项如下：</p><table><thead><tr><th style="text-align:center;">压测场景</th><th style="text-align:left;">压测步骤</th><th style="text-align:center;">压测次数/时长</th></tr></thead><tbody><tr><td style="text-align:center;">循环执行创建，删除文件</td><td style="text-align:left;">1.在桌面/文管空白处，右键菜单<br>2.点击“新建文件夹“<br>3.选择新建文件夹右键”删除“</td><td style="text-align:center;">8H</td></tr><tr><td style="text-align:center;">重复打开 1000 张图片的文件夹</td><td style="text-align:left;">1.在桌面选择包含 1000 张图片的文件夹<br>2.关闭文管</td><td style="text-align:center;">8H</td></tr><tr><td style="text-align:center;">重复搜索目录中的文件</td><td style="text-align:left;">1.打开文件管理器，进入test目录中<br>2.点击搜索按钮<br>3.在输入框输入 &quot;test&quot;，进行搜索<br>4.关闭文管</td><td style="text-align:center;">8H</td></tr><tr><td style="text-align:center;">重复同时执行 10 个复制文件任务</td><td style="text-align:left;">1.在 dock 栏目右键打开 2 个文管窗口<br>2.在 A 窗口中，选择文件右键-复制<br>3.在 B 窗口中，右键粘贴<br>4.快速粘贴 10 次<br>5.删除B窗口的文件</td><td style="text-align:center;">8H</td></tr><tr><td style="text-align:center;">重复向桌面复制文件</td><td style="text-align:left;">1.在dock栏目打开文管<br>2.选择一个“音乐”目录 CTRL+C 复制文件<br>3.在桌面粘贴文件<br>4.关闭提示弹窗<br>5.关闭文管</td><td style="text-align:center;">8H</td></tr></tbody></table>`,14)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[1]||(s[1]=[a("表二 压力测试场景")])),_:1}),s[18]||(s[18]=i("p",null,"可以很直观的看出，这些测试项的操作都较复杂。",-1)),s[19]||(s[19]=i("p",null,"Dogtail 是 Python 的三方库，它使用 Accessbility 技术与桌面应用程序通信。代码通过提前设置好的 Accessbility 标签进行操作，但 Accessbility 标签需要开发人员提前在应用程序中添加，在下图一中看到，1021 的文管中就不存在标签，部分版本基线中该方法并不适用。",-1)),s[20]||(s[20]=i("p",null,[i("img",{src:r,alt:"1021-文管"})],-1)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[2]||(s[2]=[a("图一 1021文管Accessbility标签")])),_:1}),s[21]||(s[21]=i("p",null,"通过 Dogtail 和 PyAutogui 来控制键盘、鼠标来进行应用的操作，在 Python 代码遍历寻找应用程序上可用的 Accessbility 节点时候，过程需要 1-2S 左右，之后再执行其他操作，这个过程耗时较长，失去了压力测试本身的意义。",-1)),s[22]||(s[22]=i("p",null,"纵观整个方案一，缺点是显而易见的，例如无法测试所有的应用版本、无法满足压力测试暴力操作的要求。",-1)),s[23]||(s[23]=i("p",null,[i("strong",null,"方案二：使用 shell 脚本进行场景压测")],-1)),s[24]||(s[24]=i("p",null,"这个方案使用 Xdotool 工具模拟键盘、鼠标操作，Xwininfo 工具来获取窗体属性，此方法通过窗体固有属性，找到对应坐标，之后来进行键盘鼠标操作，整个流程如下图所示：",-1)),s[25]||(s[25]=i("p",null,[i("img",{src:g,alt:"x操作"})],-1)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[3]||(s[3]=[a("图二 Xdotool和Xwininfo流程")])),_:1}),s[26]||(s[26]=h(`<p>UOS 系统自带了Xdotool和Xwininfo工具，这个方法其实和方案二比较相似，方案二使用 Dogtail 定位元素位置、PyAutoGUI 来操作键盘、鼠标，使用wininfo 获取窗体属性计算坐标，通过 Xdotool 控制键鼠操作。</p><p>编写shell脚本，使用 Xodtool 工具进行简单操作，运行代码，查看图三，能看到与上述 Python 脚本同样的操作，shell脚本运行时间接近快了1s。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> in  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0..10}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xdotool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mousemove</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  click</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xdotool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mousemove</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 155</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 117</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  click</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p><img src="`+y+'" alt="速度"></p>',4)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[4]||(s[4]=[a("图三 Python 脚本与 shell 脚本运行速度对比")])),_:1}),s[27]||(s[27]=i("p",null,[a("使用 shell 脚本编写："),i("strong",null,"重复向桌面复制文件，并且每次输出桌面和文管的窗口 ID(寻找窗口 ID 来获取坐标)"),a(" 测试场景，多次运行后，在下图四能看到，同一个场景同一套代码同一个机器，运行结果，极其不稳定，容易报错找不到窗口。")],-1)),s[28]||(s[28]=i("p",null,[i("img",{src:o,alt:"向桌面复制文件.png"})],-1)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[5]||(s[5]=[a("图四 xdotool 不稳定")])),_:1}),s[29]||(s[29]=h('<p>纵观整个方案二：运行环境简单、但是运行结果不稳定。</p><p>总结： 现目前这两种方案，各有优劣，都是现阶段较主流的方案，优缺点如表三所示：</p><table><thead><tr><th style="text-align:center;">方案</th><th style="text-align:center;">优点</th><th style="text-align:center;">缺点</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">可自动化、场景覆盖多</td><td style="text-align:center;">无法适用所有版本，环境复杂、键鼠操作比较慢达不到压测效果</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">可自动化、运行环境简单，能适用所有版本</td><td style="text-align:center;">不稳定</td></tr></tbody></table>',3)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[6]||(s[6]=[a("表三 二种方案优缺点总结")])),_:1}),s[30]||(s[30]=h('<p>在目前的测试环境下，方案一由于 Python 在使用第三方库的时候，程序响应往往都需要 1-2s 时间，运行速度较慢，而且无法满足所有版本的压测需求。方案二使用 shell 脚本编写压测脚本，在运行 Xdotool 工具时候容易出错，Xdotool 工具对键鼠的操作已经算是比较快的工具了，但是在特殊 BUG 上，鼠标操作速度还是有所欠缺，如：异步线程出错，在测试过程中，经常性会遇到这样的小概率问题、同样的操作，有时候能复现问题有时候又不能复现，BUG 复现条件极其苛刻，需要更快的操作增加 复现概率，如下表列举部分的 BUG，在回归 BUG 就需要快速的键鼠操作。</p><table><thead><tr><th style="text-align:center;">BUG编号</th><th style="text-align:center;">描述</th><th style="text-align:center;">严重程度</th><th>优先级</th></tr></thead><tbody><tr><td style="text-align:center;">29689</td><td style="text-align:center;">【文件管理器】【5.1.1.63-1】【sp2】桌面空白处右键，选择“壁纸与屏保”，再快速在右键，桌面黑屏</td><td style="text-align:center;">2</td><td>2</td></tr><tr><td style="text-align:center;">26972</td><td style="text-align:center;">【文件管理器】【5.1.1.39-1】在列表试图下，快速来回切换排列顺序，再点击上级栏目，文件管理器崩溃</td><td style="text-align:center;">2</td><td>2</td></tr><tr><td style="text-align:center;">26100</td><td style="text-align:center;">【文件管理器】【5.1.1.33-1】4K屏幕，2.75缩放，在桌面空白处快速多次点击右键，桌面崩溃</td><td style="text-align:center;">2</td><td>2</td></tr><tr><td style="text-align:center;">25591</td><td style="text-align:center;">【文件管理器】【5.1.1.31-1】鼠标左右键，快速连续一起按，桌面黑屏</td><td style="text-align:center;">3</td><td>3</td></tr><tr><td style="text-align:center;">24478</td><td style="text-align:center;">【sp1】【文件管理器】【5.1.0.8-1】拖动文件到其他目录下，快速敲击键盘“ctrl+z”出现不正确提示</td><td style="text-align:center;">4</td><td>4</td></tr><tr><td style="text-align:center;">21172</td><td style="text-align:center;">【文件管理器】【5.1.0.8-1】左侧栏目快速切换，右键闪退。</td><td style="text-align:center;">2</td><td>2</td></tr></tbody></table>',2)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[7]||(s[7]=[a("表四 BUG 列表")])),_:1}),s[31]||(s[31]=h('<p>因此，我们需要对方案二进行优化，找到能解决<strong>键鼠操作速度不够快</strong>和<strong>容易出错不稳定</strong>的方案。</p><h2 id="技术方案" tabindex="-1">技术方案 <a class="header-anchor" href="#技术方案" aria-label="Permalink to &quot;技术方案&quot;">​</a></h2><p>在用户使用桌面应用时候，都是通过键盘与鼠标输入设备与软件交互。</p><p>我们对现状中的方案二进行优化，也参考了 Xdotool 和 Xwininfo 工具的逻辑，设计一款新的应用程序，程序名称为 <strong>app-wininfo-m</strong>，计划解决上述<strong>键鼠操作速度不够快</strong>和<strong>容易出错不稳定</strong>的问题。</p><p>对于<strong>键鼠操作速度不够快</strong>的问题，了解到 Linux <strong>输入子系统</strong>，可以通过<strong>设备驱动程序</strong>写入键鼠事件驱动设备文件来对 USB 键盘输入和鼠标移动进行操作。</p><p>一个输入事件，如鼠标移动或者键盘按键事件，到达用户空间传给应用程序，如下图四流程</p><p><img src="'+F+'" alt="input"></p>',7)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[8]||(s[8]=[a("图五 输入事件响应流程")])),_:1}),s[32]||(s[32]=i("p",null,"事件处理层为不同类型硬件提供了用户访问及处理接口。在 /dev/input 目录下显示的是已经注册在内核中的设备编程接口，用户通过 open 这些设备文件来打开不同的输入设备进行硬件操作，当打开设备 /dev/input/mice 时，会调用到事件处理层的 Mouse Handler 来处理输入事件，这也使得设备驱动层无需关心设备文件的操作，因为 Mouse Handler 已经有了对应事件处理的方法。",-1)),s[33]||(s[33]=i("p",null,[a("对于"),i("strong",null,"容易出错不稳定"),a("的问题，是 Xdotool 这个工具在经过长时间运行后获取窗口 ID 值出错，目前我们能接触到的 UOS 系统图形化界面都是基于 X11 协议，"),i("strong",null,"Xlib"),a(" 是 X11 协议的 API 实现，另外用于代替 Xlib 的新型 API 为 XCB。下图五 Xlib 告诉我们每个窗口和像素图都有自己的坐标系，通过坐标系的位置，可以鼠标定位操作应用。")],-1)),s[34]||(s[34]=i("p",null,[i("img",{src:A,alt:"xlib窗口说明"})],-1)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[9]||(s[9]=[a("图六 xlib 窗口说明")])),_:1}),s[35]||(s[35]=i("h3",{id:"整体设计",tabindex:"-1"},[a("整体设计 "),i("a",{class:"header-anchor",href:"#整体设计","aria-label":'Permalink to "整体设计"'},"​")],-1)),s[36]||(s[36]=i("p",null,[i("strong",null,"app-wininfo-m"),a(" 自上而下的模块结构呈现如下图七：")],-1)),s[37]||(s[37]=i("p",null,[i("img",{src:D,alt:"app-wininfo-m.png"})],-1)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[10]||(s[10]=[a("图七 app-wininfo-m 模块结构")])),_:1}),s[38]||(s[38]=h("<p>当按照这种模式设计，每个业务都比较统一有序和模块化，再扩展其他功能更加方便，不会影响到原有的功能。</p><ul><li><strong>keyboard-event</strong>：处理用户传入类型为 EV_KEY 的事件，将事件写入到 “/dev/input” 目录下的键盘设备文件中，上报事件和同步给 input 子系统中。</li><li><strong>mouse-event</strong>：处理用户传入类型为 EV_REL 的事件，将事件写入到 “/dev/input” 目录下的鼠标设备文件中，上报事件和同步给 input 子系统中。</li><li><strong>mouse-position</strong>：基于 xlib 实现获取鼠标的位置，给 app-action 层提供数据支持，监视鼠标的位置变化。</li><li><strong>app-attribute</strong>：提供一个基于 xlib 获桌面应用窗口属性的集合，具体需要其他的接口，可根据实际需要自由扩展。</li></ul><p><strong>app-action</strong> 的设计理念是一个 wrapper，从功能需求上来看，app-action 提供以下功能：</p><ul><li><strong>坐标</strong>：主要业务是窗口坐标和鼠标指针位置的获取，根据用户传入的 PID 查到应用的窗口ID，获取窗口属性。</li><li><strong>键鼠</strong>：主要业务是对设备驱动文件写入键鼠事件，来进行鼠标移动、点击和键盘输入。</li></ul><p><strong>app-wininfo-m</strong>程序运行流程如下：</p>",5)),n(p,{id:"mermaid_64a5595e",graph:"sequenceDiagram%0A%09%E5%BA%94%E7%94%A8%20-%3E%3E%20%E5%9D%90%E6%A0%87%20%3A%E4%BC%A0%E5%85%A5%E5%BA%94%E7%94%A8%E7%9A%84%E8%BF%9B%E7%A8%8B%E3%80%81%E7%AA%97%E5%8F%A3%20id%0A%09%E5%9D%90%E6%A0%87%20-%3E%3E%20%E9%94%AE%E9%BC%A0%20%3A%20%E9%80%9A%E8%BF%87%E8%BF%9B%E7%A8%8B%E3%80%81%E7%AA%97%E5%8F%A3%20id%20%E8%8E%B7%E5%8F%96%E7%AA%97%E5%8F%A3%E5%B1%9E%E6%80%A7%0A%09%E9%94%AE%E9%BC%A0%20--%3E%3E%20%E5%BA%94%E7%94%A8%20%3A%E9%80%9A%E8%BF%87%E5%9D%90%E6%A0%87%E4%BF%A1%E6%81%AF%EF%BC%8C%E6%8E%A7%E5%88%B6%E9%94%AE%E7%9B%98%E9%BC%A0%E6%A0%87%E6%93%8D%E4%BD%9C%E5%BA%94%E7%94%A8"}),s[39]||(s[39]=i("p",null,"对应用使用者提供了友好的说明文档，程序已经帮助实现了需要的操作，使用者只需要根据说明文档传入对应的参数，执行需要的操作。以及添加简单崩溃的断言服务，通过对 coredump 日志监控，判断经过压力测试的应用是否出现崩溃现象，并输出结果提供给测试人员。",-1)),s[40]||(s[40]=i("h3",{id:"关键技术",tabindex:"-1"},[a("关键技术 "),i("a",{class:"header-anchor",href:"#关键技术","aria-label":'Permalink to "关键技术"'},"​")],-1)),s[41]||(s[41]=i("h4",{id:"坐标服务",tabindex:"-1"},[a("坐标服务 "),i("a",{class:"header-anchor",href:"#坐标服务","aria-label":'Permalink to "坐标服务"'},"​")],-1)),s[42]||(s[42]=i("p",null,"在坐标获取业务中，获取不同应用的坐标位置，在之前我们获取坐标的方式是通过 Xdotool 获取到Window_ID，再通过 Window_ID 使用工具 Xwininfo 获取坐标。需要进行多个步骤操作后才能获取到坐标，在代码编写上步骤复杂，而且获取的结果不够稳定，因此找到了一个获取坐标的新方法，基本操作流程如下：",-1)),s[43]||(s[43]=i("p",null,"根据应用的进程寻找应用的坐标位置：",-1)),s[44]||(s[44]=i("p",null,[a("​ 传入的 PID，再调用 "),i("strong",null,"app-wininfo-m"),a(" 程序，如果 PID 不存在，则不会返回窗口的坐标等属性，如果 PID 存在，就返回窗口的坐标等属性。")],-1)),n(p,{id:"mermaid_64a558e4",graph:"graph%20TD%0A%20A(%E5%BC%80%E5%A7%8B)--%3EB(%E8%AF%BB%E5%8F%96%E4%BC%A0%E5%85%A5%E7%9A%84%E8%BF%9B%E7%A8%8B)%0A%20B--%3EC(%E5%88%A4%E6%96%ADPID%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%3F)%0A%20C--%3E%7C%E6%98%AF%7CD%5B%E6%A0%B9%E6%8D%AE%E8%BF%9B%E7%A8%8BPID%E6%9F%A5%E6%89%BE%E7%AA%97%E5%8F%A3%E5%B1%9E%E6%80%A7%5D%0A%20D--%3EE(%E5%8F%8D%E5%9B%9E%E7%AA%97%E5%8F%A3%E7%9A%84%E5%9D%90%E6%A0%87%E7%AD%89%E5%B1%9E%E6%80%A7)%0A%20C--%3E%7C%E5%90%A6%7CG%5B%E4%B8%8D%E4%BC%9A%E8%BF%94%E5%9B%9E%E7%AA%97%E5%8F%A3%E7%9A%84%E5%9D%90%E6%A0%87%E7%AD%89%E5%B1%9E%E6%80%A7%5D%0A%20E--%3EF(%E7%BB%93%E6%9D%9F)%0A%20G--%3EF(%E7%BB%93%E6%9D%9F)"}),s[45]||(s[45]=h(`<p>在编码过程中，获取窗口的坐标引入 Xlib 的头文件 #include &lt;linux/xlib.h&gt; 获取结构体：<strong>XGetWindowAttributes()</strong> 函数返回指定窗口到当前属性 <strong>XWindowAttributes</strong> 结构。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取窗口的属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XGetWindowAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Display</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* display */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Window</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* w */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XWindowAttributes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* window_attributes_return */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 窗口的属性详细信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, y;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			/* location of window */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width, height;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* width and height of window */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> border_width;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* border width of window */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> depth;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          	/* depth of window */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Visual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">visual;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* the associated visual structure */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Window root;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        	/* root of screen containing window */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__cplusplus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c_plusplus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c_class;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* C++ InputOutput, InputOnly*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> class;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			/* InputOutput, InputOnly*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bit_gravity;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* one of bit gravity values */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> win_gravity;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* one of the window gravity values */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backing_store;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* NotUseful, WhenMapped, Always */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backing_planes;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* planes to be preserved if possible */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backing_pixel;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* value to be used when restoring planes */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bool save_under;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* boolean, should bits under be saved? */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Colormap colormap;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* color map to be associated with window */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bool map_installed;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* boolean, is color map currently installed*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map_state;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* IsUnmapped, IsUnviewable, IsViewable */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> all_event_masks;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* set of events all people have interest in*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> your_event_mask;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* my event mask */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> do_not_propagate_mask;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* set of events that should not propagate */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bool override_redirect;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* boolean value for override-redirect */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Screen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">screen;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* back pointer to correct screen */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} XWindowAttributes;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span></code></pre></div><p>了解到 Xlib 函数，就可以围绕 XGetWindowAttributes() 函数来获取窗口属性，经过以下流程，就完成窗口的属性获取了。</p><ul><li><p>传入进程判断，获取窗口，伪代码如下</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get the PID property atom 获取PID属性atom</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_atomPID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XInternAtom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(display, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_NET_WM_PID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, True);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_atomPID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> None)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;No such atom&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get the PID for the current Window.获取当前所有窗口的PID。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> searchmywindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Atom           type;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            format;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  nItems;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bytesAfter;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">propPID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XGetWindowProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_display, w, _atomPID, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, False, XA_CARDINAL,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                         &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">format, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nItems, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bytesAfter, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">propPID))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(propPID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // If the PID matches, add this window to the result set.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //如果PID匹配，则将此窗口添加到result中。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_pid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)propPID))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    _result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push_back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                XFree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(propPID);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p>对鼠标进行移动点击，程序要知道鼠标的位置，获取鼠标位置的代码如下：</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取鼠标坐标 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XOpenDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Window root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XDefaultRootWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(display);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Window root_return;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Window child_return;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root_x_return;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root_y_return;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mask_return;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XQueryPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(display, root, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root_return, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child_return, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root_x_return, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root_y_return, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">win_x_return, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">win_y_return, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mask_return) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> True)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //输出鼠标的属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         qWarning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Window_ID:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child_return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">win_x_return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;y:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;win_y_return&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XCloseDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(display);</span></span></code></pre></div></li><li><p>窗口属性的获取，伪代码如下:</p></li></ul><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Window</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_toplevel_parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Display</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Window</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取父窗口ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Window parent;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Window root;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num_children;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XQueryTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(display, window, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parent, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">children, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num_children)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stderr, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XQueryTree error</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (children) { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             XFree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(children);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getwindowattribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Window</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//获取窗口的属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">display;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Window  focus,toplevel_parent_of_focus;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    XWindowAttributes attr;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> revert;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XOpenDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    XGetInputFocus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(display, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">revert);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toplevel_parent_of_focus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_toplevel_parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(display, w);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    XGetWindowAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(display, toplevel_parent_of_focus, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attr);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    qWarning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attr.width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attr.height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attr.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;y:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attr.y;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	XCloseDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(display);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="操作服务" tabindex="-1">操作服务 <a class="header-anchor" href="#操作服务" aria-label="Permalink to &quot;操作服务&quot;">​</a></h4><p>在 Linux 系统中，万物皆文件，我们的键盘和鼠标都是设备文件，经过调研，通过对设备文件写入，就可以对键盘和鼠标进行操作，这个操作是硬件操作的最快的方法，其基本流程如下：</p>`,7)),n(p,{id:"mermaid_64a552e2",graph:"graph%20TD%0AA(%E5%BC%80%E5%A7%8B)--%3EB(%E6%9F%A5%E6%89%BE%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6)%0AB--%3EC(%E6%89%93%E5%BC%80%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6)%0AC--%3ED(%E5%86%99%E5%85%A5%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6)%0AD--%3EE(%E5%90%8C%E6%AD%A5%E5%86%99%E5%85%A5%E4%BA%8B%E4%BB%B6)%0AE--%3EF(%E4%BA%8B%E4%BB%B6%E6%89%A7%E8%A1%8C)%0AF--%3EG(%E7%BB%93%E6%9D%9F)"}),s[46]||(s[46]=h(`<p>在编码过程中，对设备文件写入生效，需要引入子系统头文件 #include &lt;linux/input.h&gt; 获取到结构体：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input_event {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__BITS_PER_LONG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__USE_TIME_BITS64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__KERNEL__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeval time;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> input_event_sec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.tv_sec</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> input_event_usec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.tv_usec</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	__kernel_ulong_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __sec;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__sparc__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__arch64__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __usec;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __pad;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	__kernel_ulong_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __usec;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> input_event_sec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  __sec</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> input_event_usec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __usec</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	__u16 type;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	__u16 code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	__s32 value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>通过 write() 函数对 /dev/input 目录下设备文件写入，伪代码如下：</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//fd:打开的文件设备文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Move_mouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> rel_x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> rel_y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> input_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //x轴坐标的相对位移</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EV_REL;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rel_x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> REL_X;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //y轴坐标的相对位移</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EV_REL;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rel_y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> REL_Y;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //同步</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EV_SYN;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SYN_REPORT;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>最终，通过公式移动到鼠标想要的位置，如移动到应用左上角的位置（ X1，Y1 ），鼠标位置（ X2，Y2 ），鼠标相对位置 rel_x，rel_y 相对移动位置。</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   rel_x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> X2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> X1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   rel_y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Y2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Y1;</span></span></code></pre></div><p>对于键盘的操作，与上面操作类似，就需要修改参数，代码如下：</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//fd:打开的文件设备文件 kval：键盘按键</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simulate_key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> kval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> input_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         gettimeofday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.time, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EV_KEY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         event.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         event.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kval;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       //同步，报告给系统</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EV_SYN;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         event.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         event.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SYN_REPORT;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         memset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         gettimeofday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.time, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EV_KEY;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//松开kval键</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         event.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         event.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kval;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       //同步，报告给系统</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       	event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EV_SYN;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      	event.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       	event.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SYN_REPORT;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       	write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="实验验证" tabindex="-1">实验验证 <a class="header-anchor" href="#实验验证" aria-label="Permalink to &quot;实验验证&quot;">​</a></h2><p>根据技术方案调研的结果，需要对整体设计的方案和一些技术细节进行验证，为此设计以下实验：</p><h3 id="app-wininfo-m-可行性和兼容性验证" tabindex="-1">app-wininfo-m 可行性和兼容性验证 <a class="header-anchor" href="#app-wininfo-m-可行性和兼容性验证" aria-label="Permalink to &quot;app-wininfo-m 可行性和兼容性验证&quot;">​</a></h3><p>app-wininfo-m 的目的是对桌面应用坐标定位，通过输入设备的设备文件操作鼠标键盘，本次实验将按照<strong>整体设计</strong>中的方式，生成一个可以运行的程序执行文件，以<strong>通过进程获取到应用坐标，并且鼠标点击关闭窗口</strong>为例进行演示。</p><p>app-wininfo-m 应用程序参数文件说明：</p><table><thead><tr><th>参数</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td>-m</td><td style="text-align:center;">鼠标移动位置，参数一：坐标Ｘ轴，参数二：坐标Ｙ轴，参数三：１点击鼠标左键，２鼠标中键，３鼠标右键</td></tr><tr><td>-p</td><td style="text-align:center;">通过传入的进程号查找应用窗口的属性，查看所有进程下的窗口，并输出窗口属性</td></tr><tr><td>-k</td><td style="text-align:center;">键盘输入，如：<code>-k KEY_A</code>，键盘输入A</td></tr></tbody></table>`,14)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[11]||(s[11]=[a("表五 app-wininfo-m参数文件说明")])),_:1}),s[47]||(s[47]=h('<p>【实验环境】</p><ul><li>系统：UOS 20 1030</li><li>架构：X86 、ARM64、MIPS64EL</li></ul><p>【实验步骤】</p><ul><li>安装环境</li></ul><ol><li>app-wininfo-m 代码编写完毕，在 Qt Creator 中构建制执行文件为 demo。</li></ol><ul><li><p>编写测试脚本</p><p>使用 shell 方式来运行 demo 程序，编写的代码如下</p></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_pid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pidof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &quot;dde-file-manager&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	#获取文管进程pid</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window_PP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./demo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $file_pid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	#获取输出应用窗口属性</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window_W</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window_PP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:&quot;}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;X&#39; &#39;{print $1}&#39;`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	#截取窗口属性宽</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window_H</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window_PP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height:&quot;}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;)&#39; &#39;{print $1}&#39;`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	#截取窗口属性高</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window_X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window_PP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x:&quot;}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;y&#39; &#39;{print $1}&#39;`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	#截取窗口属性x轴坐标</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window_Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window_PP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;y:&quot;}`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	#截取窗口属性Y轴坐标</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./demo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> window_X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> window_W</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> window_Y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	#鼠标移动到关闭按钮位置，并点击关闭按钮</span></span></code></pre></div><ul><li>运行结果</li></ul><p>查看下图运行结果，看到 <strong>通过进程获取到应用坐标，并且鼠标点击关闭窗口</strong> 演示操作的例子完美运行成功，<strong>app-wininfo-m</strong> 程序的整体方案是正确的。</p><p><img src="'+c+'" alt="newdemo"></p>',10)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[12]||(s[12]=[a("图八 demo运行结果")])),_:1}),s[48]||(s[48]=h('<p>以上述例子运行，进行不同系统架构测试，测试结果如下：</p><table><thead><tr><th style="text-align:left;">系统架构</th><th>测试结果</th></tr></thead><tbody><tr><td style="text-align:left;">MIPS64EL</td><td>正常运行</td></tr><tr><td style="text-align:left;">X86</td><td>正常运行</td></tr><tr><td style="text-align:left;">ARM64</td><td>正常运行</td></tr></tbody></table>',2)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[13]||(s[13]=[a("表六 兼容性运行结果")])),_:1}),s[49]||(s[49]=h('<h3 id="app-wininfo-m-稳定性验证" tabindex="-1">app-wininfo-m 稳定性验证 <a class="header-anchor" href="#app-wininfo-m-稳定性验证" aria-label="Permalink to &quot;app-wininfo-m 稳定性验证&quot;">​</a></h3><p>压力测试对稳定性要求很高，设计以下测试项，对 app-wininfo-m 程序的关键点进行稳定性验证。</p><table><thead><tr><th>测试项</th><th>测试说明</th><th>时长</th><th>结果</th></tr></thead><tbody><tr><td>获取10个应用窗口属性</td><td>打开多个10个应用，对10个窗口属性获取，demo程序稳定</td><td>24H</td><td>通过</td></tr><tr><td>同一个应用打开10个窗口，获取所有窗口属性</td><td>选择文管，打开10个窗口，获取10个窗口属性，demo程序稳定</td><td>24H</td><td>通过</td></tr><tr><td>鼠标移动</td><td>使用demo控制在桌面随意移动，demo程序稳定</td><td>24H</td><td>通过</td></tr><tr><td>长时间获取鼠标位置</td><td>桌面随机一定，一直获取鼠标位置，demo程序稳定</td><td>24H</td><td>通过</td></tr><tr><td>点击鼠标左键</td><td>使用demo程序，鼠标随机一直标右键，demo程序稳定</td><td>24H</td><td>通过</td></tr><tr><td>点击鼠标右键</td><td>使用demo程序，鼠标随机一直标左键，demo程序稳定</td><td>24H</td><td>通过</td></tr><tr><td>键盘输入</td><td>使用demo程序，控制键盘一直输入，demo程序稳定</td><td>24H</td><td>通过</td></tr></tbody></table>',3)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[14]||(s[14]=[a("表七 稳定测试项")])),_:1}),s[50]||(s[50]=h(`<p>经过上面的测试项，demo 程序满足了稳定性</p><h3 id="app-wininfo-m-操作性能验证" tabindex="-1">app-wininfo-m 操作性能验证 <a class="header-anchor" href="#app-wininfo-m-操作性能验证" aria-label="Permalink to &quot;app-wininfo-m 操作性能验证&quot;">​</a></h3><p>demo 程序在设计当初考虑了极限的压力操作场景，准备了一下实验，进行验证结果，代码如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1..10}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ./demo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ./demo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 155</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 117</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p>使用 time 命令运行 shell 脚本，下图就是 demo 程序运行速度。</p><p><img src="`+u+'" alt="newdemo"></p>',6)),n(t,{style:{color:"#C0C0C0","text-decoration":"underline"}},{default:l(()=>s[15]||(s[15]=[a("图九 demo运行速度")])),_:1}),s[51]||(s[51]=h('<p>由上图九可知 demo 程序运行速达到 1.844s，对比方案二的 2.315s 速度，明显超过 Xdotool 工具的运行速度。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>本文针对压力测试工具提出技术方案，<strong>整体设计</strong>中通过对设备文件写入操作和使用 xlib 库开发了定位和操作服务，解决了方案二获取坐标不稳定和操作速度不够快的问题，基本上能满足现有压测场景的使用要求，同时提供简单崩溃断言的服务。</p><p><strong>app-wininfo-m</strong> 工具作为我们自己开发的工具，未来可以根据需求进行功能扩展，如在“进行搜索的压力测试”，目前只能验证搜索出现崩溃这样的问题，无法验证搜索结果是否正确，现有市面上仍然没有这样功能的工具，我们可以在 app-wininfo-m 工具中定制开发。</p><p>一个新开发工具，往往要经过无数次的版本迭代和优化，接下来的方向，就是对工具进行以下功能扩展和优化。</p><table><thead><tr><th>扩展功能</th><th>优化</th></tr></thead><tbody><tr><td>模拟拖拽操作</td><td>优化鼠标移动计算方式</td></tr><tr><td>元素定位</td><td>优化 app-wininfo-m 代码</td></tr><tr><td>图像定位</td><td>优化数据输出方式</td></tr><tr><td>增加断言方式（如：搜索）</td><td>优化键盘输入传值方式</td></tr><tr><td>模拟触摸操作</td><td></td></tr></tbody></table><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://www.Linux.org/threads/xdotool-keyboard.10528/" target="_blank" rel="noreferrer">xdotool 介绍</a></li><li><a href="https://www.x.org/releases/X11R7.7/doc/man/man1/xwininfo.1.xhtml" target="_blank" rel="noreferrer">xｗininfo 介绍</a></li><li><a href="https://www.x.org/releases/X11R7.6/doc/libX11/specs/libX11/libX11.html" target="_blank" rel="noreferrer">xlib 介绍</a></li><li><a href="https://www.kernel.org/doc/html/v4.17/input/event-codes.html" target="_blank" rel="noreferrer">input 子系统</a></li></ul>',8))])}const P=e(C,[["render",B]]);export{x as __pageData,P as default};
