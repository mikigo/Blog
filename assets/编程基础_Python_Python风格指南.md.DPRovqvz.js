import{_ as i,c as a,R as n,o as t}from"./chunks/framework.CdQpDa_J.js";const h="/assets/todo.Cvwu9xcM.png",E=JSON.parse('{"title":"Python风格指南","description":"","frontmatter":{"Author":"海针 - 搬运 Google开源项目风格指南之《Python风格指南》"},"headers":[],"relativePath":"编程基础/Python/Python风格指南.md","filePath":"编程基础/Python/Python风格指南.md","lastUpdated":1737308350000}'),p={name:"编程基础/Python/Python风格指南.md"};function l(e,s,k,r,o,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="python风格指南" tabindex="-1">Python风格指南 <a class="header-anchor" href="#python风格指南" aria-label="Permalink to &quot;Python风格指南&quot;">​</a></h1><h2 id="_1-引言" tabindex="-1"><strong>1.</strong> <strong>引言</strong> <a class="header-anchor" href="#_1-引言" aria-label="Permalink to &quot;**1.** **引言**&quot;">​</a></h2><h3 id="_1-1-目的" tabindex="-1"><strong>1.1.</strong> <strong>目的</strong> <a class="header-anchor" href="#_1-1-目的" aria-label="Permalink to &quot;**1.1.** **目的**&quot;">​</a></h3><p>本规范用于指导Python脚本编写人员，统一编码风格，提交代码的易读性和健壮性。</p><p>本规范不能替代Pylint/ruff等静态检查工具，请在提升代码前使用Pylint/ruff进行静态检查。</p><h3 id="_1-2-说明" tabindex="-1"><strong>1.2.</strong> <strong>说明</strong> <a class="header-anchor" href="#_1-2-说明" aria-label="Permalink to &quot;**1.2.** **说明**&quot;">​</a></h3><p>本规范中条目分为如下三个级别：</p><p>【强制】必须遵守的编码规范，新增代码必须严格按照规范编写，历史代码根据项目实际情况决定是否修改。</p><p>【建议】建议遵守的编码规范，根据代码所处上下文决定编码风格，但需要保持在同一项目中统一风格。</p><p>【注意】编码过程中的注意事项，通常为容易出现缺陷的代码，应当用合理的编码方式进行替代。</p><h2 id="_2-环境" tabindex="-1">2. <strong>环境</strong> <a class="header-anchor" href="#_2-环境" aria-label="Permalink to &quot;2. **环境**&quot;">​</a></h2><h3 id="_2-1-版本" tabindex="-1">2.1. <strong>版本</strong> <a class="header-anchor" href="#_2-1-版本" aria-label="Permalink to &quot;2.1. **版本**&quot;">​</a></h3><p>【强制】请使用Python 3.7 及以上版本编写代码。</p><p>【强制】请使用pylint 2.6 及以上版本进行静态代码检查。</p><h3 id="_2-2-ide" tabindex="-1">2.2. <strong>IDE</strong> <a class="header-anchor" href="#_2-2-ide" aria-label="Permalink to &quot;2.2. **IDE**&quot;">​</a></h3><p>【强制】使用PyCharm Community Edition 和 Visual Studio Code 作为代码编码及调试工具，保持同一项目中团队成员统一IDE。</p><h2 id="_3-python风格规范" tabindex="-1">3. <strong>Python风格规范</strong> <a class="header-anchor" href="#_3-python风格规范" aria-label="Permalink to &quot;3. **Python风格规范**&quot;">​</a></h2><h3 id="_3-1-符号" tabindex="-1">3.1. <strong>符号</strong> <a class="header-anchor" href="#_3-1-符号" aria-label="Permalink to &quot;3.1. **符号**&quot;">​</a></h3><h4 id="_3-1-1-分号" tabindex="-1">3.1.1. <strong>分号</strong> <a class="header-anchor" href="#_3-1-1-分号" aria-label="Permalink to &quot;3.1.1. **分号**&quot;">​</a></h4><p>【强制】 不要在行尾加分号，也不要用分号将两条命令放在同一行。</p><h4 id="_3-1-2-逗号" tabindex="-1">3.1.2. <strong>逗号</strong> <a class="header-anchor" href="#_3-1-2-逗号" aria-label="Permalink to &quot;3.1.2. **逗号**&quot;">​</a></h4><p>【强制】 方法返回值中结束不能加逗号，加逗号后，返回值会自动变成元组，在使用过程中需要格外注意，用逗号的情况只有列表，元组，字典方法参数分割这一种情况。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Returns：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><h3 id="_3-2-空行-空格-缩进" tabindex="-1">3.2. <strong>空行，空格，缩进</strong> <a class="header-anchor" href="#_3-2-空行-空格-缩进" aria-label="Permalink to &quot;3.2. **空行，空格，缩进**&quot;">​</a></h3><h4 id="_3-2-1-空行" tabindex="-1">3.2.1. <strong>空行</strong> <a class="header-anchor" href="#_3-2-1-空行" aria-label="Permalink to &quot;3.2.1. **空行**&quot;">​</a></h4><p>【强制】</p><p>1，导包部分与类，方法之间隔开两个空行。</p><p>2，类和类之间隔开两个空行(内部类除外)。</p><p>3，类之外的方法隔开两行空行(装饰器中钩子函数除外)。</p><p>4，类中的方法和类之间隔开一个空行。</p><p>5，文件结尾部分应空一行。</p><h4 id="_3-2-2-空格" tabindex="-1">3.2.2. <strong>空格</strong> <a class="header-anchor" href="#_3-2-2-空格" aria-label="Permalink to &quot;3.2.2. **空格**&quot;">​</a></h4><p>1，【强制】 字典中key和冒号之间不能有空格。</p><p>2，【强制】 数组，元组，字典逗号之前不能有空格。</p><p>3，【强制】 等号，大于，小于符号两边必须有空格。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># spam( ham[  ]，{ eggs： 2 }，[])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># x ，y = y ，x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># spam (1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dict [&#39;key&#39;] = list [index]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># x&lt;1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># foo    = 1000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dictionary = {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     &quot;foo&quot;    ： 1，</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     &quot;long_name&quot;： 2，</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Yes： def complex(real，imag=0.0)： return magic(r=real，i=imag)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Yes： def complex(real，imag： float = 0.0)： return Magic(r=real，i=imag)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># No： def complex(real，imag = 0.0)： return magic(r = real，i = imag)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># No： def complex(real，imag： float=0.0)： return Magic(r = real，i = imag)</span></span></code></pre></div><p>上述代码中的空格是不规范的。</p><h4 id="_3-2-3-缩进" tabindex="-1">3.2.3. <strong>缩进</strong> <a class="header-anchor" href="#_3-2-3-缩进" aria-label="Permalink to &quot;3.2.3. **缩进**&quot;">​</a></h4><p>【强制】 用4个空格来缩进代码，绝对不要用tab，也不要tab和空格混用(部分IDE设置tab为4个空格例外)。</p><h3 id="_3-3-注释" tabindex="-1">3.3. <strong>注释</strong> <a class="header-anchor" href="#_3-3-注释" aria-label="Permalink to &quot;3.3. **注释**&quot;">​</a></h3><p>【强制】 注释中尽量使用全英文，以免系统或编码不同导致乱码。</p><p>1，文件注释，使用三引号。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* Copyright (C) 2020～2021 Uniontech Software Technology Co.，Ltd.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* This program is free software： you can redistribute it and/or modify</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* it under the terms of the GNU General Public License as published by</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* the Free Software Foundation，either version 3 of the License，or</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* any later version.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* This program is distributed in the hope that it will be useful，</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* GNU General Public License for more details.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">*</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* You should have received a copy of the GNU General Public License</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">* along with this program.  If not，see &lt;http：//www.gnu.org/licenses/&gt;.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">*</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@File   ：   xx.py</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@Desc   ：   xx</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@Author ：   xx</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@Time   ：   2021/8/20 18：14</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@Connect：   xx@uniontech.com</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div><p>2，【强制】 方法和类描述，方法作用，参数说明，返回值说明使用三引号。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args)：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    description</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Args：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    args： args</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Returns： return</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __ghost(args)</span></span></code></pre></div><p>3，【强制】 行注释，使用# 开头，#后有一个空格，此类注释，注释变量，逻辑描述。</p><p>4，【强制】 TODO注释，# TODO开头，暂时使用代码，同时也可以用于未完成步骤描述，部分IDE有查看TODO注释，便于查看未完成部分或临时修改部分。</p><p><img src="`+h+`" alt="img"></p><h3 id="_3-4-类和方法" tabindex="-1">3.4. <strong>类和方法</strong> <a class="header-anchor" href="#_3-4-类和方法" aria-label="Permalink to &quot;3.4. **类和方法**&quot;">​</a></h3><h4 id="_3-4-1-类" tabindex="-1">3.4.1. <strong>类</strong> <a class="header-anchor" href="#_3-4-1-类" aria-label="Permalink to &quot;3.4.1. **类**&quot;">​</a></h4><p>【强制】 python3中，如果类不继承其他类，类名后不要加括号，如存在括号需要显示的继承object，内部类和嵌套也一样。</p><p>【强制】 类名字采用驼峰形式命令，并类名定义能表达该类最基本功能。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NoInputException</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span></code></pre></div><p>【建议】多继承容易造成逻辑混乱变量类型改变，故应尽量避免多继承。</p><h4 id="_3-4-2-方法" tabindex="-1">3.4.2. <strong>方法</strong> <a class="header-anchor" href="#_3-4-2-方法" aria-label="Permalink to &quot;3.4.2. **方法**&quot;">​</a></h4><p>【强制】 类内部的私有方法以_开头，单独定义的私有方法以__开头。</p><p>【强制】 使用全小写字母和_隔开，命名定义能体现方法的功能，例：get_conf。</p><h3 id="_3-5-字符串" tabindex="-1">3.5. <strong>字符串</strong> <a class="header-anchor" href="#_3-5-字符串" aria-label="Permalink to &quot;3.5. **字符串**&quot;">​</a></h3><p>【强制】 在同一个文件中，保持使用字符串引号的一致性，统一使用双引号。</p><p>【建议】避免在循环中用+和+=操作符来累加字符串，由于字符串是不可变的，这样做会创建不必要的临时对象，并且导致二次方而不是线性的运行时间。作为替代方案，你可以将每个子串加入列表，然后在循环结束后用 .join 连接列表。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;table&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last_name，first_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.append(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;tr&gt;&lt;td&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;/td&gt;&lt;/tr&gt;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (last_name，first_name))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items.append(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;/table&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">employee_table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(items)</span></span></code></pre></div><p>【强制】 Python3.6及其以上的版本尽量使用f-string的方式格式化字符串，不仅简单而且效率相比%和format也是最高的。</p><p>【强制】 多行字符串注释，使用三重双引号”””而非三重单引号’’’，多行字符串不应随着代码其他部分缩进的调整而发生位置移动。如果需要避免在字符串中嵌入额外的空间，可以使用串联的单行字符串或者使用 <a href="#textwrap.dedent">textwrap.dedent()</a> 来删除每行多余的空间。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">long_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;This is fine if your use case can accept</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  extraneous leading spaces.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">long_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;And this is fine if you cannot accept</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;extraneous leading spaces.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">long_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;And this too is fine if you cannot accept</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;extraneous leading spaces.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textwrap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">long_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textwrap.dedent(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  This is also fine，because textwrap.dedent()</span></span></code></pre></div><h3 id="_3-6-文件和sockets等其他句柄" tabindex="-1">3.6. <strong>文件和sockets等其他句柄</strong> <a class="header-anchor" href="#_3-6-文件和sockets等其他句柄" aria-label="Permalink to &quot;3.6. **文件和sockets等其他句柄**&quot;">​</a></h3><p>【强制】 使用with打开文件，不能使用with关键字的句柄，可以自定义，实现__enter__和__exit__方法，同时还可以是用contextlib.closing</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contextlib.closing(urllib.urlopen(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http：//www.python.org/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> front_page：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> front_page：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line)</span></span></code></pre></div><h3 id="_3-7-导入" tabindex="-1">3.7. <strong>导入</strong> <a class="header-anchor" href="#_3-7-导入" aria-label="Permalink to &quot;3.7. **导入**&quot;">​</a></h3><p>【强制】 每个 import 语句只导入一个模块，尽量避免一次导入多个模块。</p><p>【强制】 导入总应该放在文件顶部，位于模块注释和文档字符串之后，模块全局变量和常量之前。导入应该按照从最通用到最不通用的顺序分组：</p><ol><li>__future__导入。</li></ol><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __future__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absolute_import</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __future__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> division</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __future__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> print_function</span></span></code></pre></div><ol start="2"><li><p>标准库导入，例如sys。</p></li><li><p>第三方库导入。</p></li><li><p>本独代码子包导入。</p></li></ol><h3 id="_3-8-命名规范" tabindex="-1">3.8. <strong>命名规范</strong> <a class="header-anchor" href="#_3-8-命名规范" aria-label="Permalink to &quot;3.8. **命名规范**&quot;">​</a></h3><p>【强制】</p><p>模块名写法： module_name</p><p>包名写法： package_name</p><p>类名： ClassName</p><p>方法名： method_name</p><p>异常名： ExceptionName</p><p>函数名： function_name</p><p>全局常量名： GLOBAL_CONSTANT_NAME</p><p>全局变量名： global_var_name</p><p>实例名： instance_var_name</p><p>函数参数名： function_parameter_name</p><p>局部变量名： local_var_name</p><p>函数名，变量名和文件名应该是描述性的，尽量避免缩写，特别要避免使用非项目人员不清楚难以理解的缩写，不要通过删除单词中的字母来进行缩写。始终使用 .py 作为文件后缀名，不要用破折号。</p><h4 id="_3-8-1-应该避免的命名" tabindex="-1">3.8.1. <strong>应该避免的命名</strong> <a class="header-anchor" href="#_3-8-1-应该避免的命名" aria-label="Permalink to &quot;3.8.1. **应该避免的命名**&quot;">​</a></h4><p>【推荐】</p><p>1，单字符名称，除了计数器和迭代器，作为 try/except 中异常声明的 e，作为 with 语句中文件句柄的 f。</p><p>2，包/模块名中的连字符(-)。</p><p>3，双下划线开头并结尾的名称(Python保留，例如__init__)。</p><h4 id="_3-8-2-命名的约定" tabindex="-1">3.8.2. <strong>命名的约定</strong> <a class="header-anchor" href="#_3-8-2-命名的约定" aria-label="Permalink to &quot;3.8.2. **命名的约定**&quot;">​</a></h4><p>【强制】用单下划线_开头表示模块变量或函数是protected的(使用from module import *时不会包含)。</p><p>【强制】用双下划线(__)开头的实例变量或方法表示类内私有。</p><h4 id="_3-8-3-文件名" tabindex="-1">3.8.3. <strong>文件名</strong> <a class="header-anchor" href="#_3-8-3-文件名" aria-label="Permalink to &quot;3.8.3. **文件名**&quot;">​</a></h4><p>【强制】 所有python脚本文件都应该以 .py 为后缀名且不包含 -.若是需要一个无后缀名的可执行文件，可以使用软联接或者包含 exec &quot;$0.py&quot; &quot;$@&quot; 的bash脚本。</p><h2 id="_4-python语言规范" tabindex="-1">4. <strong>Python语言规范</strong> <a class="header-anchor" href="#_4-python语言规范" aria-label="Permalink to &quot;4. **Python语言规范**&quot;">​</a></h2><h3 id="_4-1-异常" tabindex="-1">4.1. <strong>异常</strong> <a class="header-anchor" href="#_4-1-异常" aria-label="Permalink to &quot;4.1. **异常**&quot;">​</a></h3><p>【强制】永远不要使用 except： 语句来捕获所有异常，也不要捕获 Exception 或者 StandardError ，除非你打算重新触发该异常，或者你已经在当前线程的最外层(记得还是要打印一条错误消息). 在异常这方面，Python非常宽容， except： 真的会捕获包括Python语法错误在内的任何错误. 使用 except： 很容易隐藏真正的bug。</p><p>【推荐】模块或包应该定义自己的异常基类，这个基类继承Exception，模块的异常基类后缀应该叫做 Error。</p><p>【推荐】优先合理的使用内置异常类，比如 ValueError 指示了一个程序错误，不要用 assert，用 raise 语句（手动抛出异常例外）。</p><p>【推荐】尽量减少try/except块中的代码量. try块的体积越大，期望之外的异常就越容易被触发. 这种情况下，try/except块将隐藏真正的错误。</p><p>【推荐】使用finally子句来执行那些无论try块中有没有异常都应该被执行的代码，这对于清理资源常常很有用，例如关闭文件。</p><h3 id="_4-2-推导式-生成式及其循环控制" tabindex="-1">4.2. <strong>推导式，生成式及其循环控制</strong> <a class="header-anchor" href="#_4-2-推导式-生成式及其循环控制" aria-label="Permalink to &quot;4.2. **推导式，生成式及其循环控制**&quot;">​</a></h3><p>【强制】循环的时候同时获取当前index使用enumerate。</p><p>【推荐】在简单的情况下创建列表使用生成器</p><p>【推荐】在字典循环的时候如果只需要value，可用_作为占位符占据key的位置。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items()：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	pass</span></span></code></pre></div><h3 id="_4-3-默认参数值和代码类型注释" tabindex="-1">4.3. <strong>默认参数值和代码类型注释</strong> <a class="header-anchor" href="#_4-3-默认参数值和代码类型注释" aria-label="Permalink to &quot;4.3. **默认参数值和代码类型注释**&quot;">​</a></h3><p>【强制】不要在函数或方法定义中使用可变对象作为默认值。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b: Optional[Sequence] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b: Sequence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ())</span></span></code></pre></div><h3 id="_4-4-true-false的求值" tabindex="-1">4.4. <strong>True/False的求值</strong> <a class="header-anchor" href="#_4-4-true-false的求值" aria-label="Permalink to &quot;4.4. **True/False的求值**&quot;">​</a></h3><p>【强制】永远不要用==将一个布尔量与false相比较. 使用 if not x： 代替，如果你需要区分false和None，你应该用像 if not x and x is not None： 这样的语句</p><p>【推荐】对于序列(字符串，列表，元组)，要注意空序列是false. 因此 if not seq： 或者 if seq： 比 if len(seq)： 或 if not len(seq)： 要更好</p><h3 id="_4-5-特性" tabindex="-1">4.5. <strong>特性</strong> <a class="header-anchor" href="#_4-5-特性" aria-label="Permalink to &quot;4.5. **特性**&quot;">​</a></h3><p>【推荐】 访问和设置数据成员时，建议使用特性(properties)来代替它们。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">side</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">side</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">side</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &quot;&quot;&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Area</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> the</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_get_area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_set_area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _get_area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &quot;&quot;&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Indirect</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accessor</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculate</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">side</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ** 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _set_area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &quot;&quot;&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Indirect</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">side</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">math</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> perimeter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">side</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> * 4</span></span></code></pre></div><h3 id="_4-6-倒序" tabindex="-1">4.6. <strong>倒序</strong> <a class="header-anchor" href="#_4-6-倒序" aria-label="Permalink to &quot;4.6. **倒序**&quot;">​</a></h3><p>【推荐】可以使用[：：-1]和reversed方式进行反转。 使用reversed。</p><h3 id="_4-7-对象类型判断" tabindex="-1">4.7. <strong>对象类型判断</strong> <a class="header-anchor" href="#_4-7-对象类型判断" aria-label="Permalink to &quot;4.7. **对象类型判断**&quot;">​</a></h3><p>【推荐】 可以使用isinstance和type方式，使用isinstance。</p><h3 id="_4-8-判断空和非空" tabindex="-1">4.8. <strong>判断空和非空</strong> <a class="header-anchor" href="#_4-8-判断空和非空" aria-label="Permalink to &quot;4.8. **判断空和非空**&quot;">​</a></h3><p>在Python中，数字0，空字符串，空列表，空元组，空字典都为False</p><p>【推荐】判断非空直接使用if，判断空直接if not</p><h3 id="_4-9-数据拷贝" tabindex="-1">4.9. <strong>数据拷贝</strong> <a class="header-anchor" href="#_4-9-数据拷贝" aria-label="Permalink to &quot;4.9. **数据拷贝**&quot;">​</a></h3><p>【强制】单纯的数据拷贝，使用深拷贝，避免造成不必要的麻烦。</p><p>【注意】判断两个对象是否指向同一地址，通常手段采用id()方法判断，但是在Python中有小数据对象池，Python会将一定规则的字符串和-5到256，True和False，None创建一份放在驻留池中，无论程序中变量指向这些值都不会创建对象，而是直接引用。</p><h3 id="_4-10-模块划分" tabindex="-1">4.10. <strong>模块划分</strong> <a class="header-anchor" href="#_4-10-模块划分" aria-label="Permalink to &quot;4.10. **模块划分**&quot;">​</a></h3><p>【推荐】 Python或其他语言划分包或者代码归类，一般都采用按功能划分，比如：</p><ul><li><p>项目中需要很多脚本，那么就需要把这些脚本放在一个scripts的文件夹中</p></li><li><p>公共的方法及其常量文件constant放在utils文件夹中</p></li><li><p>模型类放在models中</p></li><li><p>数据库处理相关放在db中</p></li><li><p>......</p><p>按功能划分，且文件夹名能体现下面模块的大体功能。</p></li></ul><h3 id="_4-11-配置" tabindex="-1">4.11. <strong>配置</strong> <a class="header-anchor" href="#_4-11-配置" aria-label="Permalink to &quot;4.11. **配置**&quot;">​</a></h3><p>【推荐】 可变资源，都应该采用配置的方法进行处理，如数据库用户名，密码，地址等。</p><h3 id="_4-12-日志" tabindex="-1">4.12. <strong>日志</strong> <a class="header-anchor" href="#_4-12-日志" aria-label="Permalink to &quot;4.12. **日志**&quot;">​</a></h3><p>【推荐】 日志的目的是便于查看程序运行各类信息，日志等级分四个等级，不同的逻辑配合不同的日志等级记录相关日志，比如接口地方，打印info等级的日志，异常和错误信息打印error日志，且配置日志颜色便于查看，同时必须设置日志存档的时间，不然日志累计导致磁盘空间不够的问题。</p>`,135)]))}const y=i(p,[["render",l]]);export{E as __pageData,y as default};
