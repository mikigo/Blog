import{_ as i,c as a,R as h,o as n}from"./chunks/framework.CpY5Ih_Y.js";const F=JSON.parse('{"title":"Shell变量使用","description":"","frontmatter":{"Author":"海针-搬运"},"headers":[],"relativePath":"编程基础/Shell/Shell变量使用.md","filePath":"编程基础/Shell/Shell变量使用.md","lastUpdated":1737267928000}'),t={name:"编程基础/Shell/Shell变量使用.md"};function l(k,s,p,e,d,r){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="shell变量使用" tabindex="-1">Shell变量使用 <a class="header-anchor" href="#shell变量使用" aria-label="Permalink to &quot;Shell变量使用&quot;">​</a></h1><h2 id="_1-变量的声明" tabindex="-1">1. 变量的声明 <a class="header-anchor" href="#_1-变量的声明" aria-label="Permalink to &quot;1. 变量的声明&quot;">​</a></h2><p>在Shell脚本内，变量是可以不先声明而直接使用的。有过传统语言编程经验的小伙伴习惯先声明再使用，这是个好的编程习惯。</p><h3 id="_1-1-常用内置变量" tabindex="-1">1.1 常用内置变量 <a class="header-anchor" href="#_1-1-常用内置变量" aria-label="Permalink to &quot;1.1 常用内置变量&quot;">​</a></h3><p>函数或者命令接收参数时，按照位置获取参数。</p><table><thead><tr><th>工具/表达式</th><th>案例说明</th></tr></thead><tbody><tr><td><code>$0</code></td><td>代表命令或者脚本本身，如常用<code>basename $0</code> 输出脚本名称本身。</td></tr><tr><td><code>$1~$n</code></td><td>第1个到第n个参数,从第10参数开始，引用时要加<code>{}</code>，如$<code>{10}</code></td></tr><tr><td><code>$#</code></td><td>传入的参数个数</td></tr><tr><td><code>$*</code></td><td>传入的全部参数</td></tr><tr><td><code>$@</code></td><td>传入的全部参数</td></tr><tr><td><code>$$</code></td><td>当前运行的进程ID</td></tr><tr><td><code>$!</code></td><td>最后一个后台进程的ID</td></tr><tr><td><code>$?</code></td><td>最后一个执行命令的返回码</td></tr><tr><td><code>$_</code></td><td>最后执行的命令的最后一个参数的值</td></tr><tr><td><code>$PPID</code></td><td>shell 的父进程的进程号</td></tr><tr><td><code>$BASH</code></td><td>扩展为用来启动当前 bash 实例的文件全名</td></tr><tr><td><code>$BASH_VERSION</code></td><td>一个只读数组变量，成员保存着当前 bash 实例的版本信息。<br>赋予数组元素的值是如下这些： <br><code>BASH_VERSINFO[0]</code> 主版本号 (release).<br><code>BASH_VERSINFO[1]</code> 次版本号 (version).<br> <code>BASH_VERSINFO[2]</code> 补丁版本<br><code>BASH_VERSINFO[3]</code> 编译信息<br><code>BASH_VERSINFO[4]</code> 发布时的状态 (例如, beta1).<br><code>BASH_VERSINFO[5]</code> MACHTYPE 平台类型<br></td></tr><tr><td><code>$UID</code></td><td>UID 扩展为当前用户的 ID，在启动时初始化。</td></tr><tr><td><code>$GROUPS</code></td><td>一个数组变量，包含当前用户所属的组的列表</td></tr><tr><td><code>$HOME</code></td><td>前用户的个人家目录，内建命令 cd 的默认参数</td></tr><tr><td><code>$HOSTNAME</code></td><td>自动设置为当前的主机名。</td></tr><tr><td><code>$IFS</code></td><td>内部字段分隔符 Internal Field Separator 用来在扩展之后进行分词</td></tr><tr><td><code>$PATH</code></td><td>索命令的路径</td></tr><tr><td><code>$PWD</code></td><td>由 cd 命令设置的当前工作目录。</td></tr><tr><td><code>$OLDPWD</code></td><td>上一次命令 cd 设置的工作目录。</td></tr><tr><td><code>$LINENO</code></td><td>引用这个参数时，shell 将它替换为一个指示在脚本或函数中当前行号的十进制数字(从 1 开始)</td></tr><tr><td><code>$FUNCNAME</code></td><td>前执行的 shell 函数名。</td></tr><tr><td><code>$OSTYPE</code></td><td>正在运行 bash 的操作系统类型。</td></tr><tr><td><code>$MACHTYPE</code></td><td>正在运行 bash 的硬件系统类型</td></tr><tr><td><code>$RANDOM</code></td><td>引用这个参数时，都会产生一个 0 到 32767 之间的随机整数</td></tr><tr><td><code>$SECONDS</code></td><td>引用这个参数时，返回 shell 自运行以来的秒数</td></tr><tr><td><code>$TMOUT</code></td><td>如果设置为大于 0 的值，TMOUT 被当作内建命令 read 的默认超时 等待时间。可以用来设置终端无操作的超时时间</td></tr><tr><td><code>$HISTSIZE</code></td><td>令历史中保存的历史数量,默认值是 500。</td></tr><tr><td><code>$PS1</code></td><td>用作主提示符字符串</td></tr><tr><td><code>$PS2</code></td><td>个参数的值同 PS1 一起被扩展，用作次提示符字符串。</td></tr><tr><td><code>$PS4</code></td><td>这个参数的值同 PS1 一起被扩展，在执行跟踪中在 bash 显示每个命令之前显示</td></tr></tbody></table><p>更多内置变量详情，可查看<code>man bash</code></p><h3 id="_1-2-变量的声明" tabindex="-1">1.2 变量的声明 <a class="header-anchor" href="#_1-2-变量的声明" aria-label="Permalink to &quot;1.2 变量的声明&quot;">​</a></h3><h4 id="_1-2-1-变量的声明与赋值" tabindex="-1">1.2.1 变量的声明与赋值 <a class="header-anchor" href="#_1-2-1-变量的声明与赋值" aria-label="Permalink to &quot;1.2.1 变量的声明与赋值&quot;">​</a></h4><p><code>test@test-PC:~/work/study/shell/share/1$ vi var.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            #变量赋值为空串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">abc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #变量赋值为abc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;It sales $125.00&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #使用单引号，避免字符串$符号被解析</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;It&#39;s my book.&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       #使用双引号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             #变量的结果可以赋值给另一变量 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     #变量值可以为数字， 在shell变量存储是以字符串方式存储</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14159</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(( ( \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #表达式的结果可以赋值给变量 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;scale=2; \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}*\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/3&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> )</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 命令的执行结果可以赋值给变量 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} + \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 另一种执行命令的方式，结果赋值给变量 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var11</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;c&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 变量可以为数组</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> $1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }; var12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">})</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 函数的执行结果可以赋值给变量 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [ $i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;var\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{var\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}[@]}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">continue</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;var\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{var\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}}&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p>脚本执行结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/work/study/shell/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> var.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">abc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">It</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sales</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $125</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.00</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">It&#39;s my book.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">var5=It&#39;s</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> book.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14159</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var11</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span></code></pre></div><p>注意以下几点：</p><ul><li>变量名由数字、字母、下划线组成，并且必须以数字，字母开头，不能包含Shell关键字。</li><li>变量名称与值之间用<code>=</code>连接，<code>=</code>两点不能有空格。在<code>$((...))</code>,<code>$[...]</code> 表达式内除外。</li><li>Bash变量可以不用指定类型，默认都是字符串。</li><li>变量赋值使用单引确保引号内的字符串不被转义，不被解析，保持原本输出。 而使用双引号，引号内字符串包含变量，命令，转义符将先会被解析后再赋值给变量。</li></ul><h4 id="_1-2-2-删除变量" tabindex="-1">1.2.2 删除变量 <a class="header-anchor" href="#_1-2-2-删除变量" aria-label="Permalink to &quot;1.2.2 删除变量&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>unset var             # 清除变量</span></span></code></pre></div><h4 id="_1-2-3-readonly只读变量" tabindex="-1">1.2.3 <code>readonly</code>只读变量 <a class="header-anchor" href="#_1-2-3-readonly只读变量" aria-label="Permalink to &quot;1.2.3 \`readonly\`只读变量&quot;">​</a></h4><p>用<code>readonly</code>声明的变量是只读的，不能修改。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rvar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TEST&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rvar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MOD&quot;</span></span></code></pre></div><p>执行修改：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/work/study/shell/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readonly.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readonly.sh:行4:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rvar：只读变量</span></span></code></pre></div><p><strong>注意</strong><code>readonly</code>和<code>local</code>不能同时使用，如果同时使用，则在最前面的生效，后面的则失效，具体原理尚未深究。<br> 如 <code>readonly loacl var=123</code> : <code>readonly</code>生效，<code>local</code>失效。<br> 如 <code>local readonly var=123</code> ：<code>local</code>生效，<code>readonly</code>失效。</p><h4 id="_1-2-4-declare声明变量" tabindex="-1">1.2.4 <code>declare</code>声明变量 <a class="header-anchor" href="#_1-2-4-declare声明变量" aria-label="Permalink to &quot;1.2.4 \`declare\`声明变量&quot;">​</a></h4><ul><li><code>declare -i</code> : 声明整型变量</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> intval=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #声明一个整型</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $intval </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">123</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">intval=abc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #将字符串赋值给整型变量，结果被转换为0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $intval </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span></code></pre></div><ul><li><code>declare -r</code>: 声明只读变量</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rdval=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #声明只读变量，等同readonly rdval=123</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rdval=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #只读变量不能被修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-bash:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rdval：只读变量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $rdval </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">123</span></span></code></pre></div><ul><li><code>declare -a</code>: 声明数组变量</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">declare</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arr=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${arr[@]}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><ul><li><code>declare -f</code>: 声明函数 在函数定义之前可以先声明</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> call_script</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call_script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)] - call declare_test.sh&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>declare -x</code>: 声明环境变量</li></ul><p>声明变量为环境变量，可在当前Shell进程及其子进程中使用。</p><p><code>test@test-PC:~/share/1$ vi declare.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> intval=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rdval=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arr=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> call_script</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DECLARE_XVAL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 声明了一个环境变量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call_script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)] - call declare_test.sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DECLARE_XVAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This_is_a_TEST_program&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #主进程中赋值环境变量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> declare_test.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #调用子脚本，在子进程中使用环境变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call_script</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #调用声明的函数</span></span></code></pre></div><p>子进程脚本如下： <code>test@test-PC:~/share/1$ vi declare_test.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)] - DECLARE_XVAL=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DECLARE_XVAL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span></code></pre></div><p>调用主脚本，执行结果如下,在子脚本中打印出了环境变量的值。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/hare/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> declare.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[declare.sh] - call declare_test.sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[declare_test.sh] - DECLARE_XVAL=This_is_a_TEST_program</span></span></code></pre></div><p>如果单独调用子脚本，这个变量是没有赋值的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> declare_test.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[declare_test.sh] - DECLARE_XVAL=</span></span></code></pre></div><p><strong>注意</strong>： 实际测试，如果<code>declare</code>声明的变量是在函数体内，则变量的作用域也仅是函数体内有效。具体原理尚未深究。</p><h2 id="_2-变量的应用" tabindex="-1">2 变量的应用 <a class="header-anchor" href="#_2-变量的应用" aria-label="Permalink to &quot;2 变量的应用&quot;">​</a></h2><h3 id="_2-1-变量的作用域" tabindex="-1">2.1 变量的作用域 <a class="header-anchor" href="#_2-1-变量的作用域" aria-label="Permalink to &quot;2.1 变量的作用域&quot;">​</a></h3><h4 id="_2-1-1-全局变量" tabindex="-1">2.1.1 全局变量 <a class="header-anchor" href="#_2-1-1-全局变量" aria-label="Permalink to &quot;2.1.1 全局变量&quot;">​</a></h4><p>全局变量的作用域是从变量定义位置开始，到Shell进程结束，全局变量的作用域不包含当前进程的子进程。<br> 全局变量的声明： <code>VariableName=Value</code> 如<code>var=&quot;abc&quot;</code>或者<code>global var=&quot;abc&quot;</code>，以下示例来演示全局变量的作用域。</p><p><code>test@test-PC:~/share/1$ vi global.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #依次打印[进程ID]&lt;脚本名:函数名:行号&gt;  变量名称=变量值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main_var=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$main_var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    main_var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is main_var&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #在func2中定义了全局变量，作用域从定义的位置开始到进程结束</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main_var=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$main_var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    func1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #调用func1，此时main_var还未定义</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    func2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #调用func2，此时main_var已经定义</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main_var=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$main_var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #用source调用脚本，souce.sh脚本中的代码导入到当前进程中。 注意，这里还是当前的shell进程</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;source_var=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$source_var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extern.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #用bash调用脚本，注意，extern.sh脚本是开启新的进程去执行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;extern_var=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$extern_var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span></span></code></pre></div><p>在以下脚本中调用的两个脚本分别定义如下： <code>test@test-PC:~/share/1$ vi source.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source_var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is source_var</span></span></code></pre></div><p><code>test@test-PC:~/share/1$ vi extern.sh</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print_var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main_var=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$main_var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     extern_var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is extern_var&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #定义了全局变量，只在当前进程有效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print_var</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_var</span></span></code></pre></div><p>执行主脚本<code>global.sh</code>，结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>test@test-PC:~/work/study/shell/share/1$ bash global.sh </span></span>
<span class="line"><span>[28581]&lt;global.sh:func1:4&gt;     : main_var=</span></span>
<span class="line"><span>[28581]&lt;global.sh:func2:9&gt;     : main_var=This is main_var</span></span>
<span class="line"><span>[28581]&lt;global.sh:main:15&gt;     : main_var=This is main_var</span></span>
<span class="line"><span>[28581]&lt;global.sh:main:17&gt;     : source_var=This is source_var</span></span>
<span class="line"><span>[28586]&lt;extern.sh:print_var:4&gt; : main_var=</span></span>
<span class="line"><span>[28581]&lt;global.sh:main:20&gt;     : extern_var=</span></span></code></pre></div><p>说明：</p><ul><li>1）<code>&lt;global.sh:func1:4&gt;</code>函数位置，<code>main_var</code>尚未定义，所以值为空。</li><li>2）<code>&lt;global.sh:func2:9&gt;</code>函数位置，<code>main_var</code>已定义，打印值有效。</li><li>3）<code>&lt;global.sh:main:15&gt;</code>在<code>main</code>在<code>func2</code>后执行，<code>main_var</code>已定义，值有效。</li><li>4）<code>&lt;global.sh:main:17&gt;</code>变量<code>source_var</code>在<code>source.sh</code>定义，并且以source的方式导入，还在当前进程中，所以变量<code>source_var</code>有效。 以都是在同一进程内运行，进程ID:28581。</li><li>5）<code>&lt;extern.sh:print_var:4&gt;</code>，当前是在新进程中运行，进程ID:28286。它打印主进程main_var是无效的，因为已经不在变量的作用域内。</li><li>6）<code>&lt;global.sh:main:20&gt;</code> 同理，<code>extern_var</code>是在子进程<code>extern.sh</code>中定义，也已经超出了变量的作用域，打印无效。</li></ul><h4 id="_2-1-2-局部变量" tabindex="-1">2.1.2 局部变量 <a class="header-anchor" href="#_2-1-2-局部变量" aria-label="Permalink to &quot;2.1.2 局部变量&quot;">​</a></h4><p>局部变量的作用域是在函数体内定义的位置开始，到函数执行完毕。<br> 局部变量的定义，使用<code>local</code>来定义局部变量，<code>local</code>只能在函数中使用。<br><code>local VariableName=Value</code>，如<code>local var=123</code>。如下示例演示局部变量的作用域。</p><p><code>test@test-PC:~/share/1$ vi local.sh</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local_var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #定义了局部变量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;local_var=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$local_var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    func1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;local_var=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$local_var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #在函数外打印局部变量的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span></span></code></pre></div><p>调用执行结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/work/study/shell/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1491</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local.sh:func1:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">5&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local_var=3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1491</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local.sh:main:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">10&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local_var=</span></span></code></pre></div><p>可以看到，<code>local_var</code>变量只是在函数<code>func</code> 是有效的，函数外打印无效。</p><h4 id="_2-1-3-环境变量" tabindex="-1">2.1.3 环境变量 <a class="header-anchor" href="#_2-1-3-环境变量" aria-label="Permalink to &quot;2.1.3 环境变量&quot;">​</a></h4><p>环境变量对当前Shell进程及其子进程都是生效的，但不对当前Shell的父进程生效，不同Shell进程也是不生效的。<br> 假如脚本间有如下调用关系：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>A.sh -&gt; B.sh -&gt;C.sh   #A.sh调用B.sh, B.sh调用C.sh</span></span>
<span class="line"><span>Z.sh                  #Z.sh独立调用</span></span></code></pre></div><p>在脚本<code>B.sh</code>定义了环境变量，那么变量在<code>B.sh</code>和<code>C.sh</code>是生效的，但是对于调用它的<code>A.sh</code>是不生效的， 而<code>Z.sh</code>独立进程调用，所以<code>B.sh</code>中定义的环境变量在<code>Z.sh</code>也是无效的。</p><p>环境变量的声明： <code>export VARIABLENAME=Value</code>，如<code>local PROJECT_NAME=menu</code>。<br> 也可以<br><code>declare -x VARIABLENAME=Value</code>,如<code>declare PROJECT_NAME=menu</code>。<br> 一般我们习惯用大写字母表示环境变量，以下示例演示环境变量的作用域:</p><p><code>test@test-PC:~/share/1$ vi export.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAIN_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">project</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #声明了环境变量MAIN_ENV</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    func1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extern.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #开辟新进程调用子脚本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;EXTERN_ENV=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$EXTERN_ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #打印子进程环境变量EXTERN_ENV</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span></span></code></pre></div><p><code>test@test-PC:~/share/1$ vi extern.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print_env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EXTERN_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;extern_env_value&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #声明环境变量EXTERN_ENV</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MAIN_ENV=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MAIN_ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #打印父进程环境变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print_env</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> subextern.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #开辟新进程调用子脚本</span></span></code></pre></div><p><code>test@test-PC:~/share/1$ vi subextern.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sub_print_env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MAIN_ENV=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MAIN_ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #打印爷爷进程的环境变量 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-30s : %s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&lt;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LINENO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;EXTERN_ENV=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$EXTERN_ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #打印父进程的环境变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sub_print_env</span></span></code></pre></div><p>调用主父进程脚本，执行结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17698</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">extern.sh:print_env:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">9&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAIN_ENV=project</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17700</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subextern.sh:sub_print_env:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">4&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAIN_ENV=project</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17700</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subextern.sh:sub_print_env:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">5&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EXTERN_ENV=extern_env_value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17697</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export.sh:main:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">10&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EXTERN_ENV=</span></span></code></pre></div><p>分析：</p><ul><li>1） 输出第一行：子进程<code>extern.sh</code>打印出了父进程中定义的<code>MAIN_ENV</code>值。</li><li>2） 输出第二行：孙进程<code>subextern.sh</code>打印出了爷爷进程的环境变量<code>MAIN_ENV</code>。</li><li>3） 输出第三行:孙进程<code>subextern.sh</code>打印出了父进程的环境变量<code>EXTERN_ENV</code>。</li><li>4）输出第四行：主父进程<code>export.sh</code>尝试打印子进程<code>extern.sh</code>的环境变量<code>EXTERN_ENV</code>不成功，已经超出了环境变量的作用域范围。</li></ul><p>然后再编写一个独立调用的脚本，它与前三个脚本是不相关，不过是在同一Shell终端下执行。 <code>test@test-PC:~/share/1$ vi third.sh </code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>printf &quot;%-30s : %s\\n&quot; &quot;[$$]&lt;$(basename $0):$FUNCNAME:$LINENO&gt;&quot; &quot;ENV_NAME=$ENV_NAME&quot;</span></span>
<span class="line"><span>printf &quot;%-30s : %s\\n&quot; &quot;[$$]&lt;$(basename $0):$FUNCNAME:$LINENO&gt;&quot; &quot;EXTERN_ENV=$EXTERN_ENV&quot;</span></span></code></pre></div><p>调用执行结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>test@test-PC:~/work/study/shell/share/1$ bash third.sh   </span></span>
<span class="line"><span>[16280]&lt;third.sh::3&gt;           : ENV_NAME=</span></span>
<span class="line"><span>[16280]&lt;third.sh::4&gt;           : EXTERN_ENV=</span></span></code></pre></div><p>因为与前面脚本<code>export.sh</code>与相互独立的，无法共享环境变量。</p><p>但是，它们都是在同一Shell终端下运行，也就是它有共同的父进程，所以如果需要共享环境变量，只需要在当前Shell终端下设置一个环境变量就可以了， 如：<br><code>test@test-PC:~/share/1$ export EXPORT_TEST=&quot;export_test&quot;</code><br> 然后在<code>export.sh</code>和<code>third.sh</code>脚本入口添加打印代码：<br><code>echo EXPORT_TEST=$EXPORT_TEST</code><br> 执行两个脚本，结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>test@test-PC:~/share/1$ bash export.sh </span></span>
<span class="line"><span>EXPORT_TEST=export_test</span></span>
<span class="line"><span>test@test-PC:~/share/1$ bash third.sh </span></span>
<span class="line"><span>EXPORT_TEST=export_test</span></span></code></pre></div><p>可以看到，打印出了共享的环境变量。也可以查看当前Shell终端的环境变量，已经包含了<code>EXPORT_TEST</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>test@test-PC:~/share/1$ env | grep EXPORT_TEST</span></span>
<span class="line"><span>EXPORT_TEST=export_test</span></span></code></pre></div><p>但是，这也仅对当前登录的Shell终端生效，但关掉终端重新打开又是一个新的Shell终端，要想永久生效，可以写入环境变量配置文件，如<code>~/.bashrc</code>或<code>~/.bash_profile</code>等 。Shell终端在登录的时候会自动加载共同的环境变量配置文件，保持在整个终端持续期间生效。</p><h3 id="_2-2-变量替换" tabindex="-1">2.2 变量替换 <a class="header-anchor" href="#_2-2-变量替换" aria-label="Permalink to &quot;2.2 变量替换&quot;">​</a></h3><table><thead><tr><th>表达式</th><th>案例说明</th></tr></thead><tbody><tr><td><code>\${var:-word}</code></td><td>如果变量var已经设置且非空，结果为var的值，否则结果为word</td></tr><tr><td><code>\${var:=word}</code></td><td>如果变量var已经设置且非空，结果为var的值，否则设置var为word</td></tr><tr><td><code>\${var:+word}</code></td><td>如果变量var已经设置且非空，则设置var的值为word;否则不替换</td></tr><tr><td><code>\${var:?word}</code></td><td>如果变量var已经设置且非空，则替换为word，否则退出shell。</td></tr></tbody></table><h3 id="_2-3-变量嵌套" tabindex="-1">2.3 变量嵌套 <a class="header-anchor" href="#_2-3-变量嵌套" aria-label="Permalink to &quot;2.3 变量嵌套&quot;">​</a></h3><p>变量嵌套一般是变量名中仍然包含变量，需要做二次解析，最终求出变量的结果。</p><h4 id="_2-3-1-eval" tabindex="-1">2.3.1 <code>eval</code> <a class="header-anchor" href="#_2-3-1-eval" aria-label="Permalink to &quot;2.3.1 \`eval\`&quot;">​</a></h4><p><code>eval</code>命令将会首先扫描命令行进行所有的替换，然后再执行命令。 <code>test@test-PC:~/share/1$ vi eval.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">abc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;It sales $125.00&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;It&#39;s my book.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14159</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;var\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{var\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #eval echo &quot;var\${i}=&#39;$&#39;{var\${i}}&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p>如下，<code>i</code>也循环变量，需要<code>eval</code>将字符串的变量解析，然后<code>echo</code>执行打印。外层变量的<code>$</code>要做转义，否则再未被解析之前会被认为是非法的引用。当然转义也可以用单引号代替。</p><h4 id="_2-3-2-varname-变量名前缀" tabindex="-1">2.3.2 <code>\${!varname*}</code>变量名前缀 <a class="header-anchor" href="#_2-3-2-varname-变量名前缀" aria-label="Permalink to &quot;2.3.2 \`\${!varname*}\`变量名前缀&quot;">​</a></h4><p>扩展为名称以 prefix 开始的变量名，匹配<code>varname</code>为形状的所有变量名。 先从简单示例开始：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">column}</span></span></code></pre></div><p><code>column</code>先替换为变量 <code>name</code>，然后再取变量值，运行结果为：<code>Tom</code> 然后再实现上一例子： <code>test@test-PC:~/share/1$ vi eval.sh</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">abc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;It sales $125.00&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;It&#39;s my book.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14159</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=\${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p>执行结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eval.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">abc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">It</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sales</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $125</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.00</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">It&#39;s my book.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">var4=4</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">var5=3.14159</span></span></code></pre></div><h2 id="_3-awk-sed内使用外部变量" tabindex="-1">3 awk/sed内使用外部变量 <a class="header-anchor" href="#_3-awk-sed内使用外部变量" aria-label="Permalink to &quot;3 awk/sed内使用外部变量&quot;">​</a></h2><p>在实际编程中，经常会遇到把shell定义的变量传入给<code>sed</code>和<code>awk</code>使用，这跟我们普通的命令与函数传参略微有所不同。</p><h4 id="_3-1-sed使用外部变量" tabindex="-1">3.1 sed使用外部变量 <a class="header-anchor" href="#_3-1-sed使用外部变量" aria-label="Permalink to &quot;3.1 sed使用外部变量&quot;">​</a></h4><p>以下三种方法都是可以的</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">str=&quot;DEF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ABC123FGH&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;s/123/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${str}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ABCDEFFGH</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">str=&quot;DEF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ABC123FGH&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/123/&#39;&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;&#39;/g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ABCDEFFGH</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">str=&quot;DEF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ABC123FGH&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/123/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${str}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ABCDEFFGH</span></span></code></pre></div><h4 id="_3-2-awk使用外部变量" tabindex="-1">3.2 awk使用外部变量 <a class="header-anchor" href="#_3-2-awk使用外部变量" aria-label="Permalink to &quot;3.2 awk使用外部变量&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">str=&quot;DEF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ABC123FGH&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{gsub(&quot;123&quot;,&quot;&#39;&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;&#39;&quot;,$1);print $1}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ABCDEFFGH</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-PC:~/share/1$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">str=&quot;DEF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ABC123FGH&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> var=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${str} </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{gsub(&quot;123&quot;,var,$1);print $1}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ABCDEFFGH</span></span></code></pre></div>`,111)]))}const g=i(t,[["render",l]]);export{F as __pageData,g as default};
