import{_ as s,c as n,R as p,o as e}from"./chunks/framework.DzXLMhZy.js";const u=JSON.parse('{"title":"Python环境与依赖管理","description":"","frontmatter":{"Author":"mikigo"},"headers":[],"relativePath":"编程基础/Python/Python环境与依赖管理.md","filePath":"编程基础/Python/Python环境与依赖管理.md","lastUpdated":1736789675000}'),i={name:"编程基础/Python/Python环境与依赖管理.md"};function l(t,a,o,c,d,h){return e(),n("div",null,a[0]||(a[0]=[p(`<h1 id="python环境与依赖管理" tabindex="-1">Python环境与依赖管理 <a class="header-anchor" href="#python环境与依赖管理" aria-label="Permalink to &quot;Python环境与依赖管理&quot;">​</a></h1><p>Python有一大特点，即具有强大的标准库和第三方库。在开发过程中可能会用到第三方库，那么就需要对其进行安装和管理。基于一定的工具链，Python也能写出优雅标准的项目代码，将依赖管理玩的明明白白。</p><h2 id="pip" tabindex="-1">pip <a class="header-anchor" href="#pip" aria-label="Permalink to &quot;pip&quot;">​</a></h2><p>pip 是 Python 标准库的一个包，从 Python3.4 开始 pip 已经内置在 Python 中。Python 有成千上万的宝藏库，它们被放置在一个统一的仓库 <code>pypi</code>。pip 在这个仓库中充当着管理员的角色，可以将需要的库从 Pypi 取出来，安装并管理这些库。</p><p>由于大多数的第三方库都发布在 pypi，所以通过pip就可以安装95%以上的第三方库，体量在包安装这方面是大哥级别。pip还有一大优势就是在安装库的同时会把库所需要的依赖也一并进行安装。综上所述，在单一的项目环境中推荐使用它，简单便捷。</p><p>如果有两个及以上的项目环境就不建议去使用pip，会出现环境冲突且难以管理。如果一定要使用那么就需要搭配上环境管理工具。</p><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>如果 Python 环境没有 pip 工具可以通过以下两种方法进行安装。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python-pip</span></span></code></pre></div><p>还有种方法：</p><p>在 <a href="https://pypi.org/project/pip/#files" target="_blank" rel="noreferrer">https://pypi.org/project/pip/#files</a> 中下载pip安装文件，然后解压到 <code>python scripts</code> 目录中，执行 <code>python setup.py install</code> 命令安装即可；</p><p>许多人抱怨 pip 命令安装 Python 库很慢或者是安装过程中失败，其实是 pip 源的问题，将其更换为我们国内源即可；</p><p>1.临时设定：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package matplotlib</span></span></code></pre></div><p>2.设置为默认：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span></span></code></pre></div><p>设为默认后，以后安装库都是从清华源下载，而且无需再加镜像源网址。</p><h3 id="快速配置环境" tabindex="-1">快速配置环境 <a class="header-anchor" href="#快速配置环境" aria-label="Permalink to &quot;快速配置环境&quot;">​</a></h3><p>通过 pip list 命令可以预览当前环境下的依赖包：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ pip list</span></span>
<span class="line"><span>Package       Version </span></span>
<span class="line"><span>------------- --------</span></span>
<span class="line"><span>asn1crypto    0.24.0  </span></span>
<span class="line"><span>colorama      0.3.7   </span></span>
<span class="line"><span>configparser  3.5.0b2 </span></span>
<span class="line"><span>cryptography  2.6.1   </span></span>
<span class="line"><span>decorator     4.3.0</span></span></code></pre></div><p>通过 pip install package_name 命令安装 Python 包： 以 requests 包举例说明：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>~$ pip install requests</span></span>
<span class="line"><span>Collecting requests</span></span>
<span class="line"><span>......</span></span>
<span class="line"><span>Successfully installed certifi-2021.10.8 chardet-4.0.0 idna-2.10 requests-2.27.1 urllib3-1.26.16</span></span></code></pre></div><p>还可以通过pip install requests==&lt;版本号&gt;来指定包的版本号进行安装：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pip install requests==2.27.1</span></span></code></pre></div><p>如果我们想将安装好的这些包及依赖信息全部记录下来，就可以通过pip freeze命令将信息记 在requirements.txt中。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pip freeze &gt; requirements.txt</span></span></code></pre></div><p>当我们需要在一个新的python环境中引入当前的依赖时使用以下命令即可。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pip  install -r requirements.txt</span></span></code></pre></div><p>还可以通过 pipreqs 进行导包操作：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>~$ pip install pipreqs</span></span>
<span class="line"><span>~$ pipreqs ./  此命令也是生成一个requirements.txt文件在当前项目目录下</span></span></code></pre></div><p>如果环境中存在 requirements.txt 文件，需要使用以下命令导出 requirements.txt 文件：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pipreqs ./ --encoding=utf-8 --force</span></span></code></pre></div><p>注意可能在使用时会发现：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>~$ pipreqs ./</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;/home/uos/.local/bin/pipreqs&quot;, line 6, in &lt;module&gt;</span></span>
<span class="line"><span>    from pipreqs.pipreqs import main</span></span>
<span class="line"><span>  File &quot;/home/uos/.local/lib/python2.7/site-packages/pipreqs/pipreqs.py&quot;, line 51, in &lt;module&gt;</span></span>
<span class="line"><span>    from pipreqs import __version__</span></span>
<span class="line"><span>ImportError: cannot import name __version__</span></span></code></pre></div><p>报错了怎么办？</p><p>不要慌张，其实这是因为此环境下版本不可用，换个版本就好啦！</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>~$ pip install pipreqs==100</span></span>
<span class="line"><span>Collecting pipreqs==100</span></span>
<span class="line"><span>Could not find a version that satisfies the requirement pipreqs==100 (from versions: 0.1.3, 0.1.4, 0.1.5, 0.1.6, 0.1.7, 0.1.8, 0.1.9, 0.2.0, 0.2.1, 0.2.2, 0.2.3, 0.2.4, 0.2.5, 0.2.7, 0.2.8, 0.2.9, 0.3.0, 0.3.1, 0.3.2, 0.3.3, 0.3.4, 0.3.5, 0.3.6, </span></span>
<span class="line"><span>0.3.7, 0.3.8, 0.3.9, 0.4.0, 0.4.1, 0.4.2, 0.4.3, 0.4.4, 0.4.5, 0.4.6, 0.4.7, 0.4.8, 0.4.9, 0.4.10, 0.4.11)                                                                                      </span></span>
<span class="line"><span>No matching distribution found for pipreqs==100</span></span>
<span class="line"><span>这里很多版本，可以选择其中一个未安装的，建议不要装太旧的</span></span>
<span class="line"><span>~$ pip install pipreqs==0.4.1</span></span>
<span class="line"><span>~$ pipreqs --help 查看有没有报错，没有报错就ok</span></span>
<span class="line"><span>接下来正常操作就不会报错啦</span></span></code></pre></div><h3 id="明确环境依赖" tabindex="-1">明确环境依赖 <a class="header-anchor" href="#明确环境依赖" aria-label="Permalink to &quot;明确环境依赖&quot;">​</a></h3><p>pip list 和 pip freeze 打印出来的依赖都有一个问题，那就是无法明确依赖关系。</p><p>当我们想清理某一个包时，不知道哪个是直接依赖哪个是间接依赖。导致环境清理不干净或者清理了不该清除的依赖。</p><p>这时就可以使用 pipdeptree 来管理依赖树：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>~$ pip install pipdeptree</span></span>
<span class="line"><span>......</span></span>
<span class="line"><span>~$ pipdeptree</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>pipreqs==0.4.1</span></span>
<span class="line"><span>  - docopt [required: Any, installed: 0.6.2]</span></span>
<span class="line"><span>  - yarg [required: Any, installed: 0.1.9]</span></span>
<span class="line"><span>    - requests [required: Any, installed: 2.27.1]</span></span>
<span class="line"><span>      - certifi [required: &gt;=2017.4.17, installed: 2021.10.8]</span></span>
<span class="line"><span>      - chardet [required: &gt;=3.0.2,&lt;5, installed: 4.0.0]</span></span>
<span class="line"><span>      - idna [required: &gt;=2.5,&lt;3, installed: 2.10]</span></span>
<span class="line"><span>      - urllib3 [required: &gt;=1.21.1,&lt;1.27, installed: 1.26.16]</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>这样我们就清楚的知道依赖直接的关系，在依赖清理时就可以避免出现问题。</p><h3 id="环境依赖治理" tabindex="-1">环境依赖治理 <a class="header-anchor" href="#环境依赖治理" aria-label="Permalink to &quot;环境依赖治理&quot;">​</a></h3><p>如果说我们想卸载 requests 包，直接使用 pip uninstall requests 命令你会发现怎么卸不干净？</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ pipdeptree</span></span>
<span class="line"><span>setuptools==40.8.0</span></span>
<span class="line"><span>six==1.12.0</span></span>
<span class="line"><span>wheel==0.32.3</span></span>
<span class="line"><span>yarg==0.1.9</span></span>
<span class="line"><span>  - requests [required: Any, installed: 2.27.1]</span></span>
<span class="line"><span>    - certifi [required: &gt;=2017.4.17, installed: 2021.10.8]</span></span>
<span class="line"><span>    - chardet [required: &gt;=3.0.2,&lt;5, installed: 4.0.0]</span></span>
<span class="line"><span>    - idna [required: &gt;=2.5,&lt;3, installed: 2.10]</span></span>
<span class="line"><span>    - urllib3 [required: &gt;=1.21.1,&lt;1.27, installed: 1.26.16]</span></span>
<span class="line"><span>:~$ pip uninstall requests</span></span>
<span class="line"><span>:~$ pipdeptree</span></span>
<span class="line"><span>setuptools==40.8.0</span></span>
<span class="line"><span>six==1.12.0</span></span>
<span class="line"><span>urllib3==1.26.16</span></span>
<span class="line"><span>wheel==0.32.3</span></span>
<span class="line"><span>yarg==0.1.9</span></span>
<span class="line"><span>  - requests [required: Any, installed: 2.21.0]</span></span>
<span class="line"><span>发现只是单纯的卸载了requests，它依赖的包并没有被卸载！</span></span></code></pre></div><p>那么推荐一个工具 pip-autoremove 来做这件事情，下面用这个工具来试试：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>~$ pip install pip-autoremove</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>~$ pip-autoremove requests -y</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>:~$ pipdeptree</span></span>
<span class="line"><span>six==1.12.0</span></span>
<span class="line"><span>wheel==0.32.3</span></span>
<span class="line"><span>yarg==0.1.9</span></span>
<span class="line"><span>  - requests [required: Any, installed: 2.21.0]</span></span></code></pre></div><p>你会发现非常好用哈，它会检索到 requests包 和它的相关依赖，然后全部卸载，可以说是非常干净！</p><h3 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h3><p>pip install 与 python install 区别</p><p>以 requests 为例：</p><ul><li><p>当我们用 pip install requests 安装 requests 模块，则会把 requests 依赖的其他库都安装上，不需要在去费力安装依赖的库了。</p></li><li><p>当我们使用 pip setup.py install 安装 requests 模块，需要去手动安装第三方依赖，否则在 import requests 时会出现报错。</p></li></ul><h2 id="conda" tabindex="-1">conda <a class="header-anchor" href="#conda" aria-label="Permalink to &quot;conda&quot;">​</a></h2><p>conda是一个支持多语言的包、依赖和环境管理工具，它不仅能管理包，还可以隔离和管理不同Python版本的环境，类似于管理node.js环境的nvm工具。</p><p>conda官方一共有两个发行版anaconda和miniconda，anaconda相比miniconda体积更大，预装了许多科学计算的库，很多东西未必会用的到，所以建议使用miniconda。</p><p>对于跨语言的或者是本身就整合了各种依赖的环境(比如tenserflow)，再考虑使用conda。</p><h3 id="安装miniconda" tabindex="-1">安装miniconda <a class="header-anchor" href="#安装miniconda" aria-label="Permalink to &quot;安装miniconda&quot;">​</a></h3><p>1.首先下载miniconda的安装脚本</p><pre><code>[https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh](https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh)
</code></pre><p>2.执行安装脚本</p><p>3.一直回车等到出现如下提示并输入yes回车</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Do you accept the license terms? [yes|no]</span></span>
<span class="line"><span>[no] &gt;&gt;&gt; </span></span>
<span class="line"><span>Please answer &#39;yes&#39; or &#39;no&#39;:&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; yes</span></span></code></pre></div><p>4.指定安装路径</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[/home/uos/miniconda3] &gt;&gt;&gt; 这里的路径可以根据自己情况设定，指定完成回车</span></span>
<span class="line"><span>我这里就不指定了，使用默认路径</span></span></code></pre></div><p>5.初始化conda</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>by running conda init? [yes|no]</span></span>
<span class="line"><span>[no] &gt;&gt;&gt; yes</span></span></code></pre></div><p>通过简单的操作就可以安装成功了，当打开终端提示符前出现(base)说明进入了默认虚拟环境。</p><h3 id="取消激活base环境" tabindex="-1">取消激活base环境 <a class="header-anchor" href="#取消激活base环境" aria-label="Permalink to &quot;取消激活base环境&quot;">​</a></h3><p>当miniconda安装完成之后，每次打开终端都会激活其默认的base环境，我们可以通过以下命令禁止激活默认base环境。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>conda config --set auto_activate_base false</span></span></code></pre></div><h3 id="安装-卸载python包" tabindex="-1">安装/卸载Python包 <a class="header-anchor" href="#安装-卸载python包" aria-label="Permalink to &quot;安装/卸载Python包&quot;">​</a></h3><p>当我们想在conda中安装包，可以选择用conda install或者pip install，两者基本相同，但是pip是通过pypi仓库拉取的数据，而conda是通过anaconda.org上拉取的数据。所以说pip的包更全。</p><p>以requests为例：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ conda install requests  安装</span></span>
<span class="line"><span>:~$ conda uninstall requests  卸载</span></span>
<span class="line"><span>操作方法和pip几乎一样</span></span></code></pre></div><h3 id="依赖管理" tabindex="-1">依赖管理 <a class="header-anchor" href="#依赖管理" aria-label="Permalink to &quot;依赖管理&quot;">​</a></h3><p>conda 也有和pip freeze类似的依赖管理方式：</p><p>为当前环境创建配置文件：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ conda env export &gt; environment.yaml</span></span></code></pre></div><p>根据配置文件复现当前环境：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ conda env create -f environment.yaml</span></span></code></pre></div><h3 id="环境操作" tabindex="-1">环境操作 <a class="header-anchor" href="#环境操作" aria-label="Permalink to &quot;环境操作&quot;">​</a></h3><p>首先创建一个环境，并激活该环境：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ conda create -n uos python=3.7 -y  环境名称可以自定义，我这里使用uos</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>:~$ conda activate uos</span></span></code></pre></div><p>需要注意的是，创建环境之后，一定要 activate 该环境，否则后续的 install 操作还是在 base 环境。 查看已有环境列表：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ conda env list</span></span>
<span class="line"><span># conda environments:</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span>base                     /home/uos/miniconda3</span></span>
<span class="line"><span>uos                   *  /home/uos/miniconda3/envs/uos</span></span></code></pre></div><p>查看当前环境下的依赖：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ conda list</span></span>
<span class="line"><span># packages in environment at /home/uos/miniconda3/envs/uos:</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Name                    Version                   Build  Channel</span></span>
<span class="line"><span>_libgcc_mutex             0.1                        main  </span></span>
<span class="line"><span>_openmp_mutex             5.1                       1_gnu  </span></span>
<span class="line"><span>ca-certificates           2023.01.10           h06a4308_0  </span></span>
<span class="line"><span>certifi                   2022.12.7        py37h06a4308_0  </span></span>
<span class="line"><span>ld_impl_linux-64          2.38                 h1181459_1</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>退出环境：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ conda deactivate</span></span>
<span class="line"><span>:~$ exit  环境内直接退出</span></span></code></pre></div><h3 id="切换环境技巧" tabindex="-1">切换环境技巧 <a class="header-anchor" href="#切换环境技巧" aria-label="Permalink to &quot;切换环境技巧&quot;">​</a></h3><p>当我们切换环境时，会使用conda activate命令，如果我们想只输入uos可不可以激活环境呢？</p><p>当然可以，操作如下：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ vim ~/.bash_profile</span></span>
<span class="line"><span>alias uos=&quot;conda activate uos&quot;</span></span>
<span class="line"><span>:~$ source ~/.bash_profile</span></span>
<span class="line"><span>:~$ uos</span></span>
<span class="line"><span>此方法适用于环境与环境之间切换</span></span></code></pre></div><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><p>环境相关：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>conda remove -n [env_name] --all  移除环境</span></span>
<span class="line"><span>conda create --name new_env_name --clone base_env_name  克隆环境</span></span></code></pre></div><p>日常相关：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>conda search [package_name]  搜索安装包信息</span></span>
<span class="line"><span>conda update [package_name]  更新包</span></span>
<span class="line"><span>conda remove [package_name]  删除包</span></span>
<span class="line"><span>conda clean -t  直接清除被缓存包</span></span>
<span class="line"><span>conda clean -y -a  直接清除索引缓存、未使用缓存包</span></span></code></pre></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><h2 id="pdm" tabindex="-1">pdm <a class="header-anchor" href="#pdm" aria-label="Permalink to &quot;pdm&quot;">​</a></h2><p>pdm是一个新的Python包管理器，于2021年发布1.0版本，目前最新版为2.7。值得一提的是这款工具的开发者是中国人。为什么选择pdm呢？首先它不是传统的包管理器(pipenv,poetry)需要基于虚拟环境，pdm得益于2018年的一个PEP提案（PEP582，Python local packages directory），完全摒弃了虚拟环境。</p><p>PDM 包含如下特性：</p><p>1.PEP 582 本地项目库目录，支持安装与运行命令，完全不需要虚拟环境。</p><p>2.一个简单且相对快速的依赖解析器，特别是对于大的二进制包发布。</p><p>3.兼容 PEP 517 的构建后端，用于构建发布包(源码格式与 wheel 格式)</p><p>4.拥有灵活且强大的插件系统（有插件系统直接就拉开一个档次）</p><p>5.PEP 621 元数据格式</p><p>6.像 pnpm 一样的中心化安装缓存，节省磁盘空间</p><h3 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>pdm的安装方式有很多种，比如pip、pipx、homebrew等。这里推荐一款安装命令行安装工具，pipx 是安装并运行 Python 终端用户应用（end-user applications）的工具。终端用户应用，其实可以理解为用 Python 编写的命令行工具，可以直接从命令行调用的那种。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>python3 -m pip install --user pipx</span></span></code></pre></div><p>pipx 需要 Python 3.6 及以上版本，同时必须已经安装好了 pip。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pdm</span></span></code></pre></div><p>如果提示虚拟环境没有被创建需要安装venv，可以通过命令进行安装。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3-venv</span></span></code></pre></div><p>安装完成之后再通过pipx命令进行安装pdm。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ pipx install pdm</span></span>
<span class="line"><span>  installed package pdm 2.7.0, installed using Python 3.7.3</span></span>
<span class="line"><span>  These apps are now globally available</span></span>
<span class="line"><span>    - pdm</span></span>
<span class="line"><span>done! ✨ 🌟 ✨</span></span></code></pre></div><h3 id="初始化pdm" tabindex="-1">初始化pdm <a class="header-anchor" href="#初始化pdm" aria-label="Permalink to &quot;初始化pdm&quot;">​</a></h3><p>执行 pdm init 就会开始初始化，初始化的时候，会让你选择项目的一些信息</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ pdm init</span></span>
<span class="line"><span>Creating a pyproject.toml for PDM...</span></span>
<span class="line"><span>Please enter the Python interpreter to use</span></span>
<span class="line"><span>0. /usr/bin/python (2.7)</span></span>
<span class="line"><span>1. /usr/bin/python3.7m (3.7)</span></span>
<span class="line"><span>2. /usr/bin/python3.7 (3.7)</span></span>
<span class="line"><span>3. /usr/bin/python2.7 (2.7)</span></span>
<span class="line"><span>4. /home/uos/.local/pipx/venvs/pdm/bin/python (3.7)</span></span>
<span class="line"><span>Please select (0): 2</span></span>
<span class="line"><span>Using Python interpreter: /usr/bin/python3.7 (3.7)</span></span>
<span class="line"><span>Using __pypackages__ because non-venv Python is used.</span></span>
<span class="line"><span>Would you like to create a virtualenv with /usr/bin/python3.7? [y/n] (y): y</span></span>
<span class="line"><span>Virtualenv is created successfully at /home/uos/.venv</span></span>
<span class="line"><span>Is the project a library that is installable?</span></span>
<span class="line"><span>If yes, we will need to ask a few more questions to include the project name and build backend [y/n] (n): y</span></span>
<span class="line"><span>Project name (uos): 123like</span></span>
<span class="line"><span>Project version (0.1.0): </span></span>
<span class="line"><span>Project description (): </span></span>
<span class="line"><span>Which build backend to use?</span></span>
<span class="line"><span>0. pdm-backend</span></span>
<span class="line"><span>1. setuptools</span></span>
<span class="line"><span>2. flit-core</span></span>
<span class="line"><span>3. hatchling</span></span>
<span class="line"><span>4. pdm-pep517</span></span>
<span class="line"><span>Please select (0): 4</span></span>
<span class="line"><span>License(SPDX name) (MIT): </span></span>
<span class="line"><span>Author name (): </span></span>
<span class="line"><span>Author email (): </span></span>
<span class="line"><span>Python requires(&#39;*&#39; to allow any) (&gt;=3.7): </span></span>
<span class="line"><span>Changes are written to pyproject.toml.</span></span>
<span class="line"><span>Found following files from other formats that you may import:</span></span>
<span class="line"><span>0. /home/uos/requirements.txt (requirements)</span></span>
<span class="line"><span>1. don&#39;t do anything, I will import later.</span></span>
<span class="line"><span>Please select: 1</span></span></code></pre></div><p>完成之后，PDM 会将你的选择以 toml 格式写入 pyproject.toml 配置文件中。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ cat pyproject.toml </span></span>
<span class="line"><span>[project]</span></span>
<span class="line"><span>name = &quot;123like&quot;</span></span>
<span class="line"><span>version = &quot;0.1.0&quot;</span></span>
<span class="line"><span>description = &quot;&quot;</span></span>
<span class="line"><span>authors = [</span></span>
<span class="line"><span>    {name = &quot;&quot;, email = &quot;&quot;},</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>dependencies = []</span></span>
<span class="line"><span>requires-python = &quot;&gt;=3.7&quot;</span></span>
<span class="line"><span>readme = &quot;README.md&quot;</span></span>
<span class="line"><span>license = {text = &quot;MIT&quot;}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[build-system]</span></span>
<span class="line"><span>requires = [&quot;pdm-pep517&gt;=1.0&quot;]</span></span>
<span class="line"><span>build-backend = &quot;pdm.pep517.api&quot;</span></span></code></pre></div><h3 id="包操作" tabindex="-1">包操作 <a class="header-anchor" href="#包操作" aria-label="Permalink to &quot;包操作&quot;">​</a></h3><p>安装包和 Poetry 一样，安装使用的是 add 命令</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pdm add requests</span></span></code></pre></div><p>查看包</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pdm list --graph</span></span></code></pre></div><p>pdm list 还有两个选项： –freeze：以 requirements.txt 的格式列出已安装的包</p><p>–json：以 json 的格式列出已安装的包，但必须与 --graph 同时使用</p><p>要查看某个包的某体详情，直接用 pdm show some_package即可</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pdm show requests</span></span></code></pre></div><p>删除包</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pmd remove requests</span></span></code></pre></div><p>更新包</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新所有包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pdm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新某个包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pdm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">somepackag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="项目配置" tabindex="-1">项目配置 <a class="header-anchor" href="#项目配置" aria-label="Permalink to &quot;项目配置&quot;">​</a></h3><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pdm config</span></span>
<span class="line"><span>Site/default configuration (/etc/xdg/pdm/config.toml):</span></span>
<span class="line"><span>build_isolation = True</span></span>
<span class="line"><span>cache_dir = /home/uos/.cache/pdm</span></span>
<span class="line"><span>check_update = True</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>Home configuration (/home/uos/.config/pdm/config.toml):</span></span>
<span class="line"><span>Project configuration (/home/uos/pdm.toml):</span></span></code></pre></div><p>pdm config 里面有非常多的配置，想要一一搞清楚的可以去官网查阅：<a href="https://pdm.fming.dev/latest/reference/configuration/" target="_blank" rel="noreferrer">https://pdm.fming.dev/latest/reference/configuration/</a></p><h3 id="运行命令" tabindex="-1">运行命令 <a class="header-anchor" href="#运行命令" aria-label="Permalink to &quot;运行命令&quot;">​</a></h3><p>想要在 pdm 的环境中执行命令或者项目，可以使用 run 命令，若是执行项目时，有诸多参数，可以在 pyproject.toml 配置命令别名。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ pdm run python main.py </span></span>
<span class="line"><span>hello,uos</span></span></code></pre></div><h3 id="命令别名" tabindex="-1">命令别名 <a class="header-anchor" href="#命令别名" aria-label="Permalink to &quot;命令别名&quot;">​</a></h3><p>在 pyproject.toml 添加 [tool.pdm.scripts]可以设置快捷命令别名，若项目的执行有非常多的参数，这种设定别名的方法将很有用 。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[tool.pdm.scripts]</span></span>
<span class="line"><span>start = &quot;python main.py&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>:~$ pdm run start</span></span>
<span class="line"><span>hello,uos</span></span></code></pre></div><p>[tool.pdm.scripts]有两种形式：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 第一种</span></span>
<span class="line"><span>[tool.pdm.scripts]</span></span>
<span class="line"><span>start = &quot;python main.py&quot;</span></span>
<span class="line"><span># 第一种</span></span>
<span class="line"><span>[tool.pdm.scripts]</span></span>
<span class="line"><span>start = {cmd = &quot;python main.py&quot;}</span></span></code></pre></div><h3 id="切换-python-版本" tabindex="-1">切换 Python 版本 <a class="header-anchor" href="#切换-python-版本" aria-label="Permalink to &quot;切换 Python 版本&quot;">​</a></h3><p>当你在初始化 pdm 项目时，就已经选定了当前的 Python 版本和可用的 Python 版本范围，后面如果想更改，可以使用 use 命令，但版本要受之前设定的版本范围约束。假设允许范围是 python 3.9+，当前使用的是 python 3.10，可以直接切换过去。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pdm use python3.9</span></span></code></pre></div><p>假设允许范围是 python 3.9+，当前使用的是 python 3.10，可以直接切换过去。</p><h3 id="兼容环境" tabindex="-1">兼容环境 <a class="header-anchor" href="#兼容环境" aria-label="Permalink to &quot;兼容环境&quot;">​</a></h3><p>pdm 足够好用，也足够开放，如果你当前使用的是其他的包管理器，比如 pipenv ，poetry，或者还在用最原始的 requirements.txt ，你也可以很方便的迁移到 pdm 中来：</p><p>1.使用 pdm import -f {file} 无需初始化，直接转换</p><p>2.执行 pdm init 或者 pdm install 的时候，会自动识别你当前的依赖情况并转换</p><p>同样的，你也可以当 pdm 管理的项目，导出为其他方案pyproject.toml 和 pdm.lock是 pdm 的两个核心文件。pdm 做为一个后起之秀，也没有忘本，它支持：</p><p>将 pyproject.toml 转成 setup.py</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pdm export -f setuppy -o setup.py</span></span></code></pre></div><p>将 pdm.lock 转成 requirements.txt</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pdm export -o requirements.txt</span></span></code></pre></div><h2 id="venv" tabindex="-1">venv <a class="header-anchor" href="#venv" aria-label="Permalink to &quot;venv&quot;">​</a></h2><p>venv是Python中自带的一个专门用于管理虚拟环境的模块。</p><h3 id="创建虚拟环境" tabindex="-1">创建虚拟环境 <a class="header-anchor" href="#创建虚拟环境" aria-label="Permalink to &quot;创建虚拟环境&quot;">​</a></h3><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ python3 -m venv uos   uos为虚拟环境名称，可以自定义</span></span></code></pre></div><p>可以说是非常的快，两三秒就创建成功了！ 创建完成之后在环境目录下，可以看到一个pyvenv.cfg的文件，它记录着虚拟环境的基本信息，包括你使用的 Python 的家目录，还有当前虚拟环境的 Python 版本，是否开启使用系统的 site-packages 模块，如果开启了，那么当你就可以直接使用系统中已经装过的第三方模块，但是你在虚拟环境下装的模块就不能被其他地方的程序使用。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~/uos$ cat pyvenv.cfg </span></span>
<span class="line"><span>home = /usr/bin</span></span>
<span class="line"><span>include-system-site-packages = false</span></span>
<span class="line"><span>version = 3.7.3</span></span></code></pre></div><p>如果你的系统里有多个Python3环境，那么在创建时指明清楚版本号就可以了。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$ python3.9 -m venv [venv_dir]</span></span></code></pre></div><h3 id="进入虚拟环境" tabindex="-1">进入虚拟环境 <a class="header-anchor" href="#进入虚拟环境" aria-label="Permalink to &quot;进入虚拟环境&quot;">​</a></h3><p>首先我们进入到创建好的虚拟环境目录，通过source进入虚拟环境：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~/uos$ source bin/activate</span></span>
<span class="line"><span>(uos) uos@uos-PC:~/uos$</span></span>
<span class="line"><span>命令行前有创建的虚拟环境名称说明就已进入</span></span></code></pre></div><h3 id="退出虚拟环境" tabindex="-1">退出虚拟环境 <a class="header-anchor" href="#退出虚拟环境" aria-label="Permalink to &quot;退出虚拟环境&quot;">​</a></h3><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:~$deactivate</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>venv是 Python3 中自带的虚拟环境管理工具，不需要额外安装，功能简单，用法也简单。但是它不能像 poetry 和 pipenv 用于项目的管理，因此 venv 建议只做了解，在一些简单的场景中可以使用，如果是复杂的项目中，可以直接上 poetry 和 pipenv。</p><h2 id="virtualenv" tabindex="-1">virtualenv <a class="header-anchor" href="#virtualenv" aria-label="Permalink to &quot;virtualenv&quot;">​</a></h2><p>...</p><h3 id="virtualenvwrapper" tabindex="-1">virtualenvwrapper <a class="header-anchor" href="#virtualenvwrapper" aria-label="Permalink to &quot;virtualenvwrapper&quot;">​</a></h3><p>...</p><h2 id="pyenv" tabindex="-1">pyenv <a class="header-anchor" href="#pyenv" aria-label="Permalink to &quot;pyenv&quot;">​</a></h2><p>...</p><h2 id="pipenv" tabindex="-1">pipenv <a class="header-anchor" href="#pipenv" aria-label="Permalink to &quot;pipenv&quot;">​</a></h2><p>...</p><h2 id="poetry" tabindex="-1">poetry <a class="header-anchor" href="#poetry" aria-label="Permalink to &quot;poetry&quot;">​</a></h2>`,184)]))}const g=s(i,[["render",l]]);export{u as __pageData,g as default};
