import{_ as r,c as o,m as l,a as i,G as a,w as e,R as n,B as h,o as d}from"./chunks/framework.DEC0wfly.js";const A=JSON.parse('{"title":"rootfs进入MATE桌面后打开终端不能执行reboot指令根因分析","description":"","frontmatter":{"Author":"禄烨"},"headers":[],"relativePath":"技术文档/根因分析/rootfs进入MATE桌面后打开终端不能执行reboot指令根因分析.md","filePath":"技术文档/根因分析/rootfs进入MATE桌面后打开终端不能执行reboot指令根因分析.md","lastUpdated":1736789141000}'),k={name:"技术文档/根因分析/rootfs进入MATE桌面后打开终端不能执行reboot指令根因分析.md"};function c(b,s,g,F,E,u){const t=h("center"),p=h("Mermaid");return d(),o("div",null,[s[10]||(s[10]=l("h1",{id:"rootfs进入mate桌面后打开终端不能执行reboot指令根因分析",tabindex:"-1"},[i("rootfs进入MATE桌面后打开终端不能执行reboot指令根因分析 "),l("a",{class:"header-anchor",href:"#rootfs进入mate桌面后打开终端不能执行reboot指令根因分析","aria-label":'Permalink to "rootfs进入MATE桌面后打开终端不能执行reboot指令根因分析"'},"​")],-1)),s[11]||(s[11]=l("h2",{id:"一、相关术语",tabindex:"-1"},[i("一、相关术语 "),l("a",{class:"header-anchor",href:"#一、相关术语","aria-label":'Permalink to "一、相关术语"'},"​")],-1)),a(t,{style:{color:"#C0C0C0"}},{default:e(()=>s[0]||(s[0]=[i("表1 相关术语")])),_:1}),s[12]||(s[12]=n('<table><thead><tr><th>全称</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>Root FileSystem</td><td>rootfs</td><td>根文件系统，针对特定的操作系统的架构，一种实现的形式;具体表现为，特定的目录（就理解为Windows的文件夹），目录之间的关系，即组织架构，以及特定的各种文件</td></tr><tr><td>MATE</td><td>MATE</td><td>MATE 是一个Linux桌面环境，它是基于已经停止维护的GNOME2代码库开发而成。</td></tr><tr><td>X Server</td><td>/</td><td>X Server是Linux系统里面图形接口服务器的简称。Windows系统的界面是这个系统不可分割的一部分，各种窗口操作界面显示都是由系统核心直接管理的，而Linux的图形界面并不是系统的必要组成部分，它可以在无界面的条件下运行。当需要Linux提供界面的时候，系统就会建立一个或者数个X Server，通过X协议跟窗口管理器交互，由独立于系统的应用程序来产生窗口，状态栏，按钮之类的交互界面。</td></tr><tr><td>X Session</td><td>/</td><td>X Session是指X Server启动后直到X Server关闭之间的这段时间。这期间一切跟X相关的动作都属于X Session的内容</td></tr></tbody></table><h2 id="二、问题概述" tabindex="-1">二、问题概述 <a class="header-anchor" href="#二、问题概述" aria-label="Permalink to &quot;二、问题概述&quot;">​</a></h2><p>1、问题引入</p><p>专用设备系统多个架构中，对arm架构系统开发板构建了一个适用RK3399开发板的rootfs GUI版本系统。在rootfs GUI版本系统启动后登录桌面时，普通用户终端中不能执行reboot指令（<a href="https://pms.uniontech.com/zentao/bug-view-64719.html" target="_blank" rel="noreferrer">Bug链接</a>）。</p><p>2、硬件环境</p><ul><li><p>设备型号：RK3399</p></li><li><p>处理器：Dual-core Cortex-A72 up to 1.8GHz &amp; Quad-core Cortex-A53 up to 1.5GHz 六核处理器</p></li><li><p>内存：4GB LPDDR4</p></li><li><p>存储：板载 SPI Flash（16MB ）高速 eMMC 32GB</p></li><li><p>显卡：Mali-T860 MP4 四核 GPU</p></li></ul><p>3、软件环境</p><ul><li>操作系统：uniontechos-device-20-gui-1000_ARM64-RK3399-20210225-1400.img</li><li>桌面版本：1.20.4-2</li><li>terminal版本：lxterminal（ 0.3.2-1）&amp; mate-terminal （1.20.2-2）</li></ul><p>4、复现步骤</p><p>（1）使用开发板烧录工具（upgrade_tool），烧录镜像uniontechos-device-20-gui-1000_ARM64-RK3399-20210225-1400.img；</p><p>（2）烧录完成后，系统上电自动开机；</p><p>（3）系统开机后，输入密码登录系统；</p><p>（4）终端中执行reboot重启系统。</p><p>5、问题现象</p><p>​ rootfs进入MATE桌面后打开终端普通用户终端中不能执行reboot指令。如图1 ：</p><p>![](/data/图1 问题现象.png)</p>',16)),a(t,{style:{color:"#C0C0C0"}},{default:e(()=>s[1]||(s[1]=[i("图1 问题现象")])),_:1}),s[13]||(s[13]=n(`<p>6、期望</p><p>​ 作为桌面版系统，重启系统是常用且不可缺少的指令命令，当不可使用时，会对普通用户造成极其不好的影响，期望可以正常运行重启命令。并且对比ARM裁剪系统GUI版本，普通用户可以执行reboot命令，RK3399 开发版GUI版本需要和ARM裁剪系统GUI版本表现保持一致。</p><h2 id="三、问题分析" tabindex="-1">三、问题分析 <a class="header-anchor" href="#三、问题分析" aria-label="Permalink to &quot;三、问题分析&quot;">​</a></h2><p>​ 启动RK3399系统后，从greeter登录“uos”用户，打开终端执行reboot，提示<code>bash: reboot: 未找到命令</code>。首先猜测是系统缺失reboot程序，但是切换root用户后，重启、关机等命令又可以正常运行。继续尝试shutdown now、ip addr等常用命令，依旧提示未找到命令。</p><p>​ 当在shell命令行界面执行一个命令时，shell必须搜索系统目录来找到对应的程序。PATH环境变量定义了用于进行命令和程序查找的目录。而reboot等命令位于系统/usr/sbin目录下，通过find查找，可以找到reboot文件的存放位置，但是通过<code>which reboot</code>进行查找，却返回为空，也就是在当前用户环境变量中并不存在reboot文件的路径。在当前“uos”用户终端中打印系统环境变量PATH，如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># shell终端信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uos@uos:~$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reboot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/sbin/reboot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">……</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uos@uos:~$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reboot</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uos@uos:~$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $PATH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span></span></code></pre></div><p>确定了当前系统环境变量中缺少<code>/usr/sbin/</code>（超级用户指令都位于/usr/sbin）。</p><p>​ 尝试通过tty登录系统，执行reboot，系统正常响应了重启。在tty下查看PATH环境变量，变量中存在超级用户指令所在路径的变量信息<code>/sbin:/usr/sbin/</code>，表示仅通过桌面登录的方式会触发此问题现象。并且由于从桌面启用shell终端，切换到root用户可以正常执行reboot等命令，普通用户无法执行，所以猜测环境变量加载后，被某种文件加载时进行了重写。</p><p>​ 查阅资料，了解到linux系统环境变量区分三类变量配置。见表2：</p>`,9)),a(t,{style:{color:"#C0C0C0"}},{default:e(()=>s[2]||(s[2]=[i("表2 环境变量说明")])),_:1}),s[14]||(s[14]=n('<table><thead><tr><th style="text-align:center;">类型</th><th>配置文件</th><th style="text-align:left;">作用域</th></tr></thead><tbody><tr><td style="text-align:center;">局部变量</td><td>~/.bashrc</td><td style="text-align:left;">包含专用于当前bash shell的bash信息，当登录时以及每次打开新的shell时，该文件被读取</td></tr><tr><td style="text-align:center;">用户变量</td><td>~/.profile</td><td style="text-align:left;">每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次!默认情况下，他设置一些环境变量，执行用户的.bashrc文件</td></tr><tr><td style="text-align:center;">全局变量</td><td>/etc/profile</td><td style="text-align:left;">为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行。并从/etc/profile.d目录的配置文件中搜集shell的设置</td></tr></tbody></table><p>​ 登录Linux时，首先启动 <code>/etc/profile</code>文件，然后再启动用户家目录下的<code>~/.profile</code>文件和<code>~/.bashrc</code>文件，执行顺序为：</p>',2)),a(p,{id:"mermaid_64a568ac",graph:"graph%20TD%0AA(%20%2Fetc%2Fprofile%20)%20--%3E%20B%5B%20%24HOME%2F.profile%20%5D%20%0AB%5B%20%24HOME%2F.profile%20%5D%20--%3E%20C%5B%20%24HOME%2F.bashrc%20%5D"}),a(t,{style:{color:"#C0C0C0"}},{default:e(()=>s[3]||(s[3]=[i("图2 环境变量加载流程")])),_:1}),s[15]||(s[15]=n(`<p>​ 了解环境变量配置文件加载顺序后，按照加载顺序检查环境变量配置对于PATH的定义是否有缺失，查看<code>/etc/profile</code>对全局环境变量的配置代码如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /etc/profile对于PATH变量的赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PATH</span></span></code></pre></div><p>​ 从对系统全局环境变量的配置查证，不管是普通用户还是root用户，在PATH中都有加入<code>/sbin:/usr/sbin</code>，并将PATH进行了export导出。所以tty下查看环境变量无缺失，reboot指令也可以响应运行。继续查看配置文件<code>~/.profile</code>和<code>~/.bashrc</code>对于PATH变量是否有进行覆盖或者重写：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .profile对于PATH变量的赋值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># if running bash</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$BASH_VERSION</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # include .bashrc if it exists</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.bashrc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.bashrc&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># set PATH so it includes user&#39;s private bin if it exists</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] ; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># set PATH so it includes user&#39;s private bin if it exists</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.local/bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] ; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.local/bin:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .bashrc 没有对于PATH变量的赋值，不做展示</span></span></code></pre></div><p>​ 查看配置文件脚本后，发现<code>~/.bashrc</code>没有对PATH进行任何操作，<code>~/.profile</code>中虽然有对PATH重新赋值，但是也仅仅在已有$PATH的基础上自增部分环境变量（<code>/$HOME/bin</code>目录和<code>$HOME/.local/bin</code>），并没有对全局变量配置文件<code>/etc/profile</code>中定义的PATH变量进行替换、覆盖。便猜测是系统在登录桌面环境后，没有执行调用全局变量配置文件<code>/etc/profile</code>导致环境变量异常。</p><p>​ 随即在/etc/profile、~/.profile、~/.bashrc加入调试信息进行验证：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 在/etc/profile中脚本第一行加入调试信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +&quot;%Y-%m-%d %H:%M:%S&quot;\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> profile!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 在uos用户家目录，.profile脚本第一行加入调试信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +&quot;%Y-%m-%d %H:%M:%S&quot;\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> profile!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 在uos用户家目录，.bashrc脚本第一行加入调试信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +&quot;%Y-%m-%d %H:%M:%S&quot;\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bashrc!</span></span></code></pre></div><p>​ 添加调试信息后，重启系统，并从greeter登录“uos”进入系统，登录系统后启动lxterminal和mate-terminal 终端，终端均没有打印<code>/etc/profile</code>和 用户家目录下的 <code>.profile</code>中脚本第一行加入的调试信息。只打印了用户家目录下的<code>.bashrc</code>中添加的调试信息。但是通过在终端中登录 用户的方式，系统会按照配置文件的加载顺序进行加载，按照顺序打印出3行调试信息。如图3：</p><p>![](/data/图3 调试详情.png)</p>`,9)),a(t,{style:{color:"#C0C0C0"}},{default:e(()=>s[4]||(s[4]=[i("图3 调试详情")])),_:1}),s[16]||(s[16]=l("p",null,[i("​ 阅读bash man手册以及shell相关资料，得知直接启动终端执行命令的方式为非登录式（no-login shell）、交互式（interactive shell）行为。如表3 shell启动方式介绍，该行为下不会去运行任何profile和rc文件，只有登录式（login shell）会在登录时自动执行"),l("code",null,"/etc/profile"),i("和"),l("code",null,"~/.profile"),i("文件。从此处分析，无法使用reboot等命令属于正常情况。")],-1)),a(t,{style:{color:"#C0C0C0"}},{default:e(()=>s[5]||(s[5]=[i("表3 shell启动方式")])),_:1}),s[17]||(s[17]=n(`<table><thead><tr><th>启动方式</th><th>说明</th></tr></thead><tbody><tr><td>登录式（login shell）</td><td>需要用户名、密码登录后才能进入的shell（或者通过&quot;--login&quot;选项生成的shell）。它会首先读取和执行/etc/profile全局配置文件中的命令，然后依次查找~/.bash_profile、~/.bash_login 和 ~/.profile这三个配置文件，读取和执行</td></tr><tr><td>非登录式（non-login shell）</td><td>不需要输入用户名和密码即可打开的Shell，例如：直接命令“bash”就是打开一个新的非登录shell，在Gnome或KDE中打开一个“终端”（terminal）窗口程序也是一个非登录shell。在非登录shell里，只读取 ~/.bashrc （和 /etc/bash.bashrc、/etc/bashrc ）文件</td></tr><tr><td>交互式（interactive shell）</td><td>在终端上执行，shell等待用户的输入，并且立即执行用户提交的命令</td></tr><tr><td>非交互式（non-interactive shell）</td><td>以shell script方式执行，在这种模式下，shell不与用户进行交互，而是读取存放在文件中的命令，并且执行</td></tr></tbody></table><p>​</p><p>​ 但是对比ARM裁剪系统GUI版本，同样的使用场景，却可以正常使用reboot等命令。按照rootfs添加调试信息的方式，在裁剪系统GUI版本<code>/etc/profile</code>、<code>~/.profile</code>、<code>~/.bashrc</code>加入调试信息进行验证。发现在启动后登陆桌面后，打开终端会打印加载这三个配置文件的调试信息。由于rootfs GUI版本采用的MATE桌面，而ARM裁剪系统GUI版本采用的DDE桌面环境，不同的桌面环境在启动时，对于环境变量的加载也可能出现差异。所以判断裁剪系统GUI版本对此问题进行了单独的处理。</p><p>​ 因此确认 rootfs GUI版本桌面终端打开后不能直接使用reboot，根本原因是因为在启动非登录式shell时，系统没有加载<code>/etc/profile</code>配置文件，引起环境变量PATH中缺少<code>/sbin:/usr/sbin</code>导致。</p><h2 id="四、实验验证" tabindex="-1">四、实验验证 <a class="header-anchor" href="#四、实验验证" aria-label="Permalink to &quot;四、实验验证&quot;">​</a></h2><h3 id="_4-1-程序设想" tabindex="-1">4.1 程序设想 <a class="header-anchor" href="#_4-1-程序设想" aria-label="Permalink to &quot;4.1 程序设想&quot;">​</a></h3><p>​ 经过以上分析，得出结论：RK3399开发版-GUI 系统启动从greeter登录后，打开终端无法直接执行重启等操作，是由于系统没有加载<code>/etc/profile</code>全局变量配置文件，导致PATH变量中缺少<code>/sbin:/usr/sbin</code>，从而导致reboot不能使用。只要在打开终端时，需要将PATH环境中追加<code>/sbin:/usr/sbin</code>。</p><h3 id="_4-2-实验验证-1" tabindex="-1">4.2 实验验证（1） <a class="header-anchor" href="#_4-2-实验验证-1" aria-label="Permalink to &quot;4.2 实验验证（1）&quot;">​</a></h3><p>​ 由于进入系统桌面后PATH环境变量都缺少<code>/sbin:/usr/sbin</code>才导致不能使用该目录下的应用程序。在每次打开终端窗口时，将环境变量进行补全，理论上可以解决问题现象。启动系统进入桌面，打开终端窗口后补全PATH环境变量，如图4：</p><p>代码：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 终端窗口中执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/sbin:/usr/sbin</span></span></code></pre></div><p>![](/data/图4 手动补全环境变量.png)</p>`,12)),a(t,{style:{color:"#C0C0C0"}},{default:e(()=>s[6]||(s[6]=[i("图4 手动补全环境变量")])),_:1}),s[18]||(s[18]=n(`<p>追加环境变量后，执行reboot命令，系统响应重启。</p><h3 id="_4-3-实验验证-2" tabindex="-1">4.3 实验验证（2） <a class="header-anchor" href="#_4-3-实验验证-2" aria-label="Permalink to &quot;4.3 实验验证（2）&quot;">​</a></h3><p>​ 虽然不会自动加载全局变量，但是每次打开终端，属于交互式（interactive shell）行为，在该行为模式下，会自动加载 bash 配置文件，意味着可以在加载 bash 配置文件时或者加载之前， 将<code>$PATH</code>环境中追加<code>/sbin:/usr/sbin</code>便能解决。</p><p>​ <code>/etc/bash.bashrc</code> 配置文件是为每一个运行bash shell的用户执行此文件，里面包括如自动补全等功能配置。当bash shell被打开时，该配置文件被调用执行，阅读其代码内容，并无对PATH进行赋值定义，随即在脚本末尾增加以下内容：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对$PATH进行追加/sbin:/usr/sbin，并导出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/sbin:/usr/sbin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PATH</span></span></code></pre></div><p>​ 添加保存后，重启系统，登录桌面后打开终端，终端打印PATH变量正常，如图5所示，执行reboot系统正常重启。</p><p>![](/data/图5 自动加载环境变量-1.png)</p>`,7)),a(t,{style:{color:"#C0C0C0"}},{default:e(()=>s[7]||(s[7]=[i("图5 自动加载环境变量-1")])),_:1}),s[19]||(s[19]=l("p",null,"​ 继续边缘验证，该方式虽然可以解决此问题，但是存在不足，当在同一个终端中再次登录一个用户或者以登录方式打开shell，由于系统会自动先加载/etc/profile，然后再加载/etc/bash.bashrc ，所以导致变量值重复。如图6：",-1)),s[20]||(s[20]=l("p",null,"![](/data/图6 自动加载环境变量-2.png)",-1)),a(t,{style:{color:"#C0C0C0"}},{default:e(()=>s[8]||(s[8]=[i("图6 自动加载环境变量-2")])),_:1}),s[21]||(s[21]=n(`<p>​</p><h2 id="五、解决方案" tabindex="-1">五、解决方案 <a class="header-anchor" href="#五、解决方案" aria-label="Permalink to &quot;五、解决方案&quot;">​</a></h2><p>​ 在上述实验验证和问题分析中已经找到了问题根源，针对问题设计了两个解决方案。</p><h4 id="_5-1-解决方案一" tabindex="-1">5.1 解决方案一 <a class="header-anchor" href="#_5-1-解决方案一" aria-label="Permalink to &quot;5.1 解决方案一&quot;">​</a></h4><h5 id="_5-1-1在bash环境变量中追加path并导出" tabindex="-1">5.1.1在bash环境变量中追加PATH并导出 <a class="header-anchor" href="#_5-1-1在bash环境变量中追加path并导出" aria-label="Permalink to &quot;5.1.1在bash环境变量中追加PATH并导出&quot;">​</a></h5><p>​ 该方案保证每次启动的bash中都不会缺失<code>/sbin:/usr/sbin</code>，从而解决问题。由于直接在bash全局变量配置文件<code>/etc/bash.bashrc</code>中对$PATH进行追加<code>/sbin:/usr/sbin</code>，会导致每次启动一个bash时，变量持续自增，所以对解决代码进行修改，设计如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在/etc/bash.bashrc增加环境变量内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 追加之前先判断是否已存在/sbin:/usr/sbin，不存在时，对$PATH进行追加/sbin:/usr/sbin，并导出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">check_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sbin)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $check_path ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/sbin:/usr/sbin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PATH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><h5 id="_5-1-2实际验证" tabindex="-1">5.1.2实际验证 <a class="header-anchor" href="#_5-1-2实际验证" aria-label="Permalink to &quot;5.1.2实际验证&quot;">​</a></h5><p>​ 将此解决方案提供至系统开发人员，合入构建镜像中。构建系统完成后，烧录系统至RK3399开发板。重新启动系统。从用户界面登录系统。打开终端窗口，查询PATH环境变量，变量内容完整，无缺失，多次在终端中执行<code>bash</code>命令，PATH变量没有持续自增。执行reboot命令，系统成功重启。重新开机后分别在tty、远程ssh连接、终端登录root账户，执行<code>reboot</code>、<code>shutdown now</code>，系统均响应正常。</p><h4 id="_5-2-解决方案二" tabindex="-1">5.2 解决方案二 <a class="header-anchor" href="#_5-2-解决方案二" aria-label="Permalink to &quot;5.2 解决方案二&quot;">​</a></h4><h5 id="_5-2-1在启动x-server时自动导入profile" tabindex="-1">5.2.1在启动X Server时自动导入profile <a class="header-anchor" href="#_5-2-1在启动x-server时自动导入profile" aria-label="Permalink to &quot;5.2.1在启动X Server时自动导入profile&quot;">​</a></h5><p>​ 在裁剪系统GUI版本/etc 目录下寻找调用/etc/profile的配置代码，最终在/etc目录下发现在<code>/etc /X11/Xsession.d/</code>目录下存在一个关于profile的可执行脚本&quot;01deepin-profile &quot;。查阅X11/Xsession.d/相关资料得知，系统启动时会自动启动X Server，X Server启动时，会进入/etc /X11/Xsession.d/目录轮询地执行所有脚本。所以，在裁剪系统GUI版本上，当执行了&quot;01deepin-profile &quot;后，便把/etc/profile下的PATH进行导出。等到用户登录系统后，从桌面启动终端，终端环境会继承X Server服务载入的环境变量。这样设计的好处在于，用户启动系统登录后，系统全局环境变量已经准备完毕，用户直接能使用完整的系统环境变量。</p><p>​ 而RK3399 rootfs-GUI镜像中不存在此配置文件，启动系统后，X Server没有可以载入profile的可执行脚本，导致用户从桌面打开终端后，无法使用reboot命令。所以rootfs增加此可执行脚本，即可解决该问题。</p><p>​ 在<code>/etc /X11/Xsession.d/</code>新增可执行脚本“profile”，代码如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/profile ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/profile</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 如果存在/etc/profile，便执行/etc/profile</span></span></code></pre></div><h5 id="_5-2-2实际验证" tabindex="-1">5.2.2实际验证 <a class="header-anchor" href="#_5-2-2实际验证" aria-label="Permalink to &quot;5.2.2实际验证&quot;">​</a></h5><p>​ 将此解决方案提供至系统开发人员，合入构建镜像中。构建系统完成后，烧录系统至RK3399开发板。重新启动系统。从用户界面登录系统。打开终端窗口，执行reboot命令，系统成功重启。重新开机后分别在tty、远程ssh连接、终端登录root账户，执行<code>reboot</code>、<code>shutdown now</code>，系统均响应正常。</p><h4 id="_5-3-方案对比" tabindex="-1">5.3 方案对比 <a class="header-anchor" href="#_5-3-方案对比" aria-label="Permalink to &quot;5.3 方案对比&quot;">​</a></h4><p>​ 对比两种解决方案，如表4所示，列出了两种方案的优缺点：</p>`,19)),a(t,{style:{color:"#C0C0C0"}},{default:e(()=>s[9]||(s[9]=[i("表4 解决方案对比")])),_:1}),s[22]||(s[22]=n('<table><thead><tr><th>序号</th><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1</td><td>在bash环境变量中追加PATH并导出</td><td>1、问题处理方法简单<br>2、每次启动终端窗口，均会判断一次环境变量是否齐全，不全时自动补充</td><td>1、处理时调用grep，增加对于增加PATH的代码逻辑<br>2、每次打开终端窗口均会判断一次环境变量，可能增加系统资源负载</td></tr><tr><td>2</td><td>在启动X server时自动导入profile</td><td>1、问题处理方法简单<br>2、能与裁剪系统GUI版本原生方法保持一致<br>3、只有启动系统登录时会加载一次环境变量，不会造成过多的系统资源负载</td><td>如果/etc/profile文件丢失，则问题会再次出现</td></tr></tbody></table><p>​ 两种解决方案都能解决当前问题，但是系统触发加载环境变量流程不同。且GUI版本目前为止没有出现异常情况。所以综合比较，采用方案2，在启动X Server时自动导入profile。</p><p>​ 得出问题结论以及解决方案后，后续合入代码工作需要由系统开发人员进行代码合入。完成代码合入后，再由测试人员对问题进行回归测试以及边缘测试。</p><h2 id="六、小结" tabindex="-1">六、小结 <a class="header-anchor" href="#六、小结" aria-label="Permalink to &quot;六、小结&quot;">​</a></h2><h5 id="_6-1问题总结" tabindex="-1">6.1问题总结 <a class="header-anchor" href="#_6-1问题总结" aria-label="Permalink to &quot;6.1问题总结&quot;">​</a></h5><p>​ 在RK3399 开发版 rootfs系统，登录桌面后启动终端无法使用reboot的问题原因是因为环境变量PATH中缺少<code>/sbin:/usr/sbin</code>。当缺少这部分环境变量时，系统不能进入/sbin 和/usr/sbin中寻找对应的应用程序，而reboot等程序存放路径或者链接指向正好是这两个目录。所以导致reboot执行时，提示不可用。解决此问题的办法即在系统启动bash时或者之前将PATH环境变量补充完整，使系统可以正确找到程序的存放位置。</p><h5 id="_6-2更适合的解决方案" tabindex="-1">6.2更适合的解决方案 <a class="header-anchor" href="#_6-2更适合的解决方案" aria-label="Permalink to &quot;6.2更适合的解决方案&quot;">​</a></h5><p>​ 两种解决方案，处理均不复杂。但是方案1，在系统持续使用的过程中，可能造成系统资源的占用增加。对于实际使用或许会造成微小的影响。方案2 ，只有启动登陆桌面的时候会进行一次环境加载，既能解决问题，不会造成系统负载增加，并且能与目前已经测试稳定的GUI系统保持一致。可以最大程度减小系统不稳定的风险。所以最终确定方案2为更适合的解决方式。</p><h5 id="_6-3进阶方案" tabindex="-1">6.3进阶方案 <a class="header-anchor" href="#_6-3进阶方案" aria-label="Permalink to &quot;6.3进阶方案&quot;">​</a></h5><p>​ 专用设备系统gui版本区分了常规版本和rootfs版本，在功能、需求上几乎是一致的。像是此类缺失某个配置文件一类的问题，可以在系统构建之前对比两个版本 /etc 目录下的文件是否保持一致。对于差异的配置文件提前分析构建系统后会造成的影响，最大程度避免构建后的两个版本系统存在基础功能的异常差异。</p><h5 id="_6-4收获" tabindex="-1">6.4收获 <a class="header-anchor" href="#_6-4收获" aria-label="Permalink to &quot;6.4收获&quot;">​</a></h5><p>​ 在分析问题的过程中，除了需要多对系统知识进行了解以外，还需要保持刨根问底的心态，才能从问题发生根本解决问题，而不是仅仅从问题表象解决就放弃根因。此次解决此问题，认识了shell的四种状态（登录式、非登录式、交互式、非交互式）。其次，在分析问题时，可以了解一部分系统的运行逻辑，对后期的Linux系统测试工作能提供一些测试思路。</p><p>​ 在分析问题的过程中，可以快速认识到自身对于系统知识的欠缺部分，需要在后续工作和学习中进行补充。</p><h2 id="七、参考资料" tabindex="-1">七、参考资料 <a class="header-anchor" href="#七、参考资料" aria-label="Permalink to &quot;七、参考资料&quot;">​</a></h2><p><a href="https://www.cnblogs.com/caoyingjielxq/p/9638705.html" target="_blank" rel="noreferrer">Linux的XServer</a></p><p><a href="https://docstore.mik.ua/orelly/unix3/upt/ch03_03.htm#upt3-CHP-3-SECT-3" target="_blank" rel="noreferrer">Shell Setup Files</a></p>',16))])}const f=r(k,[["render",c]]);export{A as __pageData,f as default};
