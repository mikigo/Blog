import{_ as s,c as a,R as e,o as i}from"./chunks/framework.CuFLN7ac.js";const n="/Blog/%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8ELinux%E7%B3%BB%E7%BB%9F%E6%89%A7%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%A4%E5%BA%95%E4%B9%A6_assets/wpsT0Y2yV.jpg",g=JSON.parse('{"title":"一种基于Linux系统执行自动化测试用例实现负载均衡的技术交底书","description":"","frontmatter":{"Author":"mikigo"},"headers":[],"relativePath":"技术文档/专利交底书/一种基于Linux系统执行自动化测试用例实现负载均衡的技术交底书.md","filePath":"技术文档/专利交底书/一种基于Linux系统执行自动化测试用例实现负载均衡的技术交底书.md","lastUpdated":1736847556000}'),l={name:"技术文档/专利交底书/一种基于Linux系统执行自动化测试用例实现负载均衡的技术交底书.md"};function p(r,t,h,o,d,k){return i(),a("div",null,t[0]||(t[0]=[e('<h1 id="一种基于linux系统执行自动化测试用例实现负载均衡的技术交底书" tabindex="-1">一种基于Linux系统执行自动化测试用例实现负载均衡的技术交底书 <a class="header-anchor" href="#一种基于linux系统执行自动化测试用例实现负载均衡的技术交底书" aria-label="Permalink to &quot;一种基于Linux系统执行自动化测试用例实现负载均衡的技术交底书&quot;">​</a></h1><h2 id="_0、缩略语和关键术语定义" tabindex="-1"><strong>0、缩略语和关键术语定义</strong> <a class="header-anchor" href="#_0、缩略语和关键术语定义" aria-label="Permalink to &quot;**0、缩略语和关键术语定义**&quot;">​</a></h2><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>术语</strong></td><td style="text-align:center;"><strong>全称</strong></td><td style="text-align:center;"><strong>解释</strong></td></tr><tr><td style="text-align:center;">SSH</td><td style="text-align:center;">Secure Shell</td><td style="text-align:center;">专为远程登录会话和其他网络服务提供安全性的协议，通过SSH服务可以远程连接到一个Linux操作系统，并进行一些远程操作。下文中的ssh表示命令，SSH表示服务。</td></tr><tr><td style="text-align:center;">Socket</td><td style="text-align:center;">Socket</td><td style="text-align:center;">Socket（套接字），应用程序可以通过Socket向网络发送请求或者应答网络请求。</td></tr><tr><td style="text-align:center;">ps命令</td><td style="text-align:center;">process status</td><td style="text-align:center;">命令用于显示当前进程的状态，类似于 windows 的任务管理器。</td></tr><tr><td style="text-align:center;">scp命令</td><td style="text-align:center;">secure copy</td><td style="text-align:center;">是 Linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。</td></tr><tr><td style="text-align:center;">pytest</td><td style="text-align:center;">pytest</td><td style="text-align:center;">基于Python的常用自动化测试框架，可通过命令行执行测试用例。</td></tr></tbody></table><h2 id="_1、相关技术背景-背景技术-与本发明最相近似的现有实现方案-现有技术" tabindex="-1"><strong>1、相关技术背景（背景技术），与本发明最相近似的现有实现方案（现有技术）</strong> <a class="header-anchor" href="#_1、相关技术背景-背景技术-与本发明最相近似的现有实现方案-现有技术" aria-label="Permalink to &quot;**1、相关技术背景（背景技术），与本发明最相近似的现有实现方案（现有技术）**&quot;">​</a></h2><p>在对UOS操作系统桌面应用进行自动化测试的过程中，由于自动化测试用例数量很多，单台测试机执行所有自动化用例时间很长。</p><p>为了满足持续集成持续交付业务要求，自动化测试用例需在较短时间内完成执行。因此，需要同时在多台测试机上执行测试用例，所有测试机执行完用例之后返回汇总结果。</p><p>在现有技术里面，基于云测试的自动化测试用例分发和执行方案，均设计为将自动化用例分发到多台测试机上执行。大多是手机端的APP自动化测试方案，测试端连接多台手机，服务端控制测试机进行分布式执行用例。</p><h3 id="_1-1、与本发明相关的现有技术" tabindex="-1"><strong>1.1、与本发明相关的现有技术</strong> <a class="header-anchor" href="#_1-1、与本发明相关的现有技术" aria-label="Permalink to &quot;**1.1、与本发明相关的现有技术**&quot;">​</a></h3><h4 id="_1-1-1、现有技术的技术方案" tabindex="-1"><strong>1.1.1、现有技术的技术方案</strong> <a class="header-anchor" href="#_1-1-1、现有技术的技术方案" aria-label="Permalink to &quot;**1.1.1、现有技术的技术方案**&quot;">​</a></h4><p>通过给不同的测试机指定分配对应的测试用例，比如：总共两台测试机，之前需要先在配置文件里面配置好哪台机器执行哪些用例。当然，做的比较好的也有不用配置用例范围的方案，即通过用例管理进行顺序或随机分发，但是这些方案，都是基于socket协议，在服务端和测试段都需要开启socket服务，因此在测试环境部署方面要求偏高。</p><h4 id="_1-1-2、现有技术的缺点" tabindex="-1"><strong>1.1.2、现有技术的缺点</strong> <a class="header-anchor" href="#_1-1-2、现有技术的缺点" aria-label="Permalink to &quot;**1.1.2、现有技术的缺点**&quot;">​</a></h4><p>（1）需要结合用例总体运行时间，单独给每个测试机配置用例执行容量，后续随着自动化测试用例数量增加，需要结合每台测试机的执行容量，合理分配到各个测试机上。</p><p>（2）所有测试机同时开始执行时，由于无法提前判断哪台机器先执行完，先执行完的测试机，只能等待后执行完的测试机完成之后才能汇总结果，等待的这段时间，不仅浪费了时间，也浪费了硬件资源。</p><p>（3）基于socket协议，通常需要在测试机上提前手动部署socket服务，当测试机比较多的情况下，操作起来就比较麻烦。</p><p>（4）没有对用例执行过程中异常情况，如用例进程卡住、测试机系统卡住等情况的处理。</p><h2 id="_2、本发明技术方案的详细阐述" tabindex="-1"><strong>2、本发明技术方案的详细阐述</strong> <a class="header-anchor" href="#_2、本发明技术方案的详细阐述" aria-label="Permalink to &quot;**2、本发明技术方案的详细阐述**&quot;">​</a></h2><h3 id="_2-1、本发明所要解决的技术问题" tabindex="-1"><strong>2.1、本发明所要解决的技术问题</strong> <a class="header-anchor" href="#_2-1、本发明所要解决的技术问题" aria-label="Permalink to &quot;**2.1、本发明所要解决的技术问题**&quot;">​</a></h3><p>（1）解决执行自动化测试用例，需要配置每台测试机执行的用例容量。</p><p>（2）解决先执行完的测试机等待后执行完测试机，造成硬件资源浪费的问题。</p><p>（3）解决需要提前在测试机上手动部署测试环境的问题。</p><p>（4）解决在用例执行过程中，出现一些异常情况，能自动判断并解决相应异常问题。</p><h3 id="_2-2、本发明提供的完整技术方案" tabindex="-1"><strong>2.2、本发明提供的完整技术方案</strong> <a class="header-anchor" href="#_2-2、本发明提供的完整技术方案" aria-label="Permalink to &quot;**2.2、本发明提供的完整技术方案**&quot;">​</a></h3><p>服务端与测试机采用SSH通讯，SSH通常在Linux系统上都会自带，因此不需要手动部署环境，整个测试过程可以全程自动化无人参与完成。</p><p>服务端通过SSH隧道下发命令，测试机被动接受命令执行即可，整个测试过程均由服务端来控制。</p><p>如果存在测试用例执行的进程，说明测试机当前正在执行测试用例，服务端将会ssh连接下一台测试机进行相同的检查操作，如果此时这台测试机上不存在测试用例执行的进程，说明测试机当前处于空闲状态，则服务端会通过ssh远程连接测试机执行这条测试用例。</p><p>如此循环操作，直至所有测试用例执行完成。</p><p><img src="'+n+`" alt=""></p><p>图（一）负载均衡分布式执行测试用例流程图</p><h4 id="_2-2-1、用例分配管理" tabindex="-1"><strong>2.2.1、用例分配管理</strong> <a class="header-anchor" href="#_2-2-1、用例分配管理" aria-label="Permalink to &quot;**2.2.1、用例分配管理**&quot;">​</a></h4><p>服务端通过文件查找，收集项目下所有要执行的用例，将收集到的用例保存为一个序列。获取测试用例名称列表可以参考以下方法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test_case_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, files </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.walk(cases_path):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> files:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.startswith(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.endswith(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            test_case_list.append(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>测试用例文件名称均为以“test”开头且以“.py”结尾的文件，test_case_list 为测试用例目录下的所有测试用例名称列表。</p><p>用例分配可以通过入参决定，可以对测试用例名称列表进行遍历，也可以通过随机从列表中取出。</p><p>遍历执行属于正常的功能测试自动化手段，而随机执行的时候可以指定执行的总时长，这种方法通常可以作为一种应用稳定性测试的自动化手段。可以根据要测试</p><h4 id="_2-2-2、节点分配管理" tabindex="-1"><strong>2.2.2、节点分配管理</strong> <a class="header-anchor" href="#_2-2-2、节点分配管理" aria-label="Permalink to &quot;**2.2.2、节点分配管理**&quot;">​</a></h4><p>服务端遍历所有需要执行的用例，通过子进程使用ssh远程连接测试机，使用ps命令查询测试机上是否存在自动化用例执行的进程，如果存在说明当前测试机负载状态为繁忙，测试机会将此状态返回给服务端，服务端接受到繁忙状态之后，会继续通过ssh连接下一台测试机进行相同的进程检测操作；</p><p>如果未测试返回给服务端的状态为空闲，则服务端会发起执行测试用例的指令。</p><p>服务端远程连接查询自动化用例执行进程的命令为：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user@ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ps -aux | grep pytest | grep -v grep&quot;</span></span></code></pre></div><p>其中user为测试机的用户名，ip为测试机的ip地址，pytest为自动化测试框架，我们通常使用它来执行自动化测试用例，用例执行的进程里面会包含pytest字符。</p><p>如果返回的数据为空，表示当前测试机负载状态为空闲。</p><p>如果返回的数据不为空，表示当前测试机负载状态为繁忙。</p><h4 id="_2-2-3、服务端控制测试机执行用例" tabindex="-1"><strong>2.2.3、服务端控制测试机执行用例</strong> <a class="header-anchor" href="#_2-2-3、服务端控制测试机执行用例" aria-label="Permalink to &quot;**2.2.3、服务端控制测试机执行用例**&quot;">​</a></h4><p>服务端会提前把所有需要执行的测试用例文件，通过ssh远程拷贝到测试机上，服务端控制测试机执行测试用例的命令为：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user@ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cd cases/ &amp;&amp; pytest test_cases.py&quot;</span></span></code></pre></div><p>其中user为测试机的用户名，ip为测试机的ip地址，test_cases.py为测试用例的文件名称。</p><h4 id="_2-2-4、测试机环境异常处理" tabindex="-1"><strong>2.2.4、测试机环境异常处理</strong> <a class="header-anchor" href="#_2-2-4、测试机环境异常处理" aria-label="Permalink to &quot;**2.2.4、测试机环境异常处理**&quot;">​</a></h4><p>每次测试机返回繁忙状态给服务端之后，服务端会通过计时控制模块做对应测试机的计时，如果计时的时长超过了阈值（阈值可以通过配置），我们认为测试环境可能出现一些异常情况，比如测试用例执行进程卡死等，所以服务端会将测试机上的执行进程杀掉。</p><h4 id="_2-2-5、收集测试报告" tabindex="-1"><strong>2.2.5、收集测试报告</strong> <a class="header-anchor" href="#_2-2-5、收集测试报告" aria-label="Permalink to &quot;**2.2.5、收集测试报告**&quot;">​</a></h4><p>测试机每次执行完一条用例之后会生成一个独立的测试报告，所有用例执行完之后，通过命令将测试机上的测试报告返回到服务端，并在服务端完成测试报告的整合，形成最终的测试报告。</p><p>从测试机上返回测试报告到服务端的命令为：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user@ip:~/client_report_path/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server_report_path</span></span></code></pre></div><h3 id="_2-3、本发明技术方案带来的有益效果" tabindex="-1"><strong>2.3、本发明技术方案带来的有益效果</strong> <a class="header-anchor" href="#_2-3、本发明技术方案带来的有益效果" aria-label="Permalink to &quot;**2.3、本发明技术方案带来的有益效果**&quot;">​</a></h3><p>（1）执行前准备工作更加便捷，配置方面只需要指定测试机的user和ip，无需考虑每个测试机具体的用例执行容量；</p><p>（2）自动化测试执行更加高效，硬件资源运用更加合理，只要测试机处于空闲状态就能执行自动化用例。</p><h3 id="_2-4、针对上述技术方案-是否还有替代方案同样能完成发明目的" tabindex="-1"><strong>2.4、针对上述技术方案，是否还有替代方案同样能完成发明目的</strong> <a class="header-anchor" href="#_2-4、针对上述技术方案-是否还有替代方案同样能完成发明目的" aria-label="Permalink to &quot;**2.4、针对上述技术方案，是否还有替代方案同样能完成发明目的**&quot;">​</a></h3><p>无</p><h2 id="_3、本发明的技术关键点和欲保护点是什么" tabindex="-1"><strong>3、本发明的技术关键点和欲保护点是什么</strong> <a class="header-anchor" href="#_3、本发明的技术关键点和欲保护点是什么" aria-label="Permalink to &quot;**3、本发明的技术关键点和欲保护点是什么**&quot;">​</a></h2><p>（1）通过用例管理模块获取需要执行的用例列表，并自动分配要执行的测试用例给节点分配模块，节点分配模块通过子进程使用远程控制服务，控制测试机执行测试用例，实现分布式并行执行测试用例。</p><p>（2）测试机通过进程检测当前是否空闲，然后返回当前状态给服务端，服务端接收到测试机状态之后判断是否下发测试任务，提供了测试机执行用例的负载均衡机制。</p><p>（3）如果测试机长时间处于繁忙状态，可能存在测试机环境异常情况，因此杀掉进程之后重新执行后续任务，提供了一种测试机环境异常处理的机制。</p><p>（4）将测试机上生成的单条测试用例的测试报告全部返回发送到服务端，由服务端完成测试报告的汇总整合，提供了测试结果的标准化输出机制。</p><p>（5）提供了一种在大规模部署执行自动化用例场景下，分布式执行测试用例并实现负载均衡的技术方案。</p><h2 id="_4、附件" tabindex="-1"><strong>4、附件：</strong> <a class="header-anchor" href="#_4、附件" aria-label="Permalink to &quot;**4、附件：**&quot;">​</a></h2><p>参考文献（如专利/论文/标准等）</p><p>l Linux 下 ssh 命令实例指南：</p><p><a href="https://linux.cn/article-3858-1.html" target="_blank" rel="noreferrer"><em>https://linux.cn/article-3858-1.html</em></a></p><p>l Linux scp命令：</p><p><a href="https://www.runoob.com/linux/linux-comm-scp.html" target="_blank" rel="noreferrer"><em>https://www.runoob.com/linux/linux-comm-scp.html</em></a></p><p>l Linux ps 命令：</p><p><a href="https://www.runoob.com/linux/linux-comm-ps.html" target="_blank" rel="noreferrer"><em>https://www.runoob.com/linux/linux-comm-ps.html</em></a></p><p>l pytest: helps you write better programs：</p><p><a href="https://docs.pytest.org/en/6.2.x/" target="_blank" rel="noreferrer"><em>https://docs.pytest.org/en/6.2.x/</em></a></p>`,73)]))}const u=s(l,[["render",p]]);export{g as __pageData,u as default};
