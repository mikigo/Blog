import{_ as i,c as a,R as t,o as p}from"./chunks/framework.CdQpDa_J.js";const h="/playwright/1.png",l="/playwright/2.png",e="/playwright/3.png",n="/playwright/4.png",u=JSON.parse('{"title":"Playwright—8小时入门版","description":"","frontmatter":{"Author":"mikigo"},"headers":[],"relativePath":"自动化技术/UI自动化/Playwright—8小时入门版.md","filePath":"自动化技术/UI自动化/Playwright—8小时入门版.md","lastUpdated":1737308350000}'),k={name:"自动化技术/UI自动化/Playwright—8小时入门版.md"};function o(d,s,r,E,g,c){return p(),a("div",null,s[0]||(s[0]=[t(`<h1 id="playwright—8小时入门版" tabindex="-1">Playwright—8小时入门版 <a class="header-anchor" href="#playwright—8小时入门版" aria-label="Permalink to &quot;Playwright—8小时入门版&quot;">​</a></h1><h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;">​</a></h2><p>Playwright 是一个 Web UI 自动化测试的框架，其各方面功能和使用体验全面碾压 Selenium。</p><blockquote><p>一入 Playwright 深似海，从此 Selenium 是路人。</p></blockquote><p>曾经，在 Web UI 自动化测试领域，Selenium 如日中天，几乎只要提到 UI 自动化就会想到 Selenium，Selenium 就是 Web UI自动化的代名词；</p><p>后来，Playwright 出现了，慢慢的大家对 Selenium 开始冷落了；为啥呢？</p><p>简单讲，因为在 Selenium 时代，其实大家遇到很多问题，但一直得不到解决；Selenium 2.0 版本是一个巨大的飞跃，因为引入了 WebDriver，后面 3.0、到现在 4.0 功能上没有什么亮点，而且以前的问题还在，大家对这个玩意儿就提不起兴趣去研究了。</p><blockquote><p>Selenium 之后不是没有其他 UI 框架，确实也出现过几个小有名气的框架，比如：cypress、puppeteer、testcafe，这些个玩意儿缺点就是不支持 Python，太拉胯，而且像 puppeteer 只支持谷歌浏览器，因为它就是谷歌家的它不需要支持其他浏览器，就这，广大的 Firefox 和尊贵的 Safari 用户能忍你吗，给老子滚。于是，Playwright 集各家之所长，补各家之缩短，“天空一声巨响，老子闪亮登场”。</p><p>坊间传言，Playwright 有几个核心开发者就是从 puppeteer 过来的，不得不说，老外是真会整活。</p></blockquote><p>第一次尝试使用 Playwright，我仅仅只写了一个小脚本，但有两个点印象深刻：</p><p>1、环境安装好简单；</p><p>要知道 Selenium 的环境安装是很烦人的，要单独装 WebDriver 的驱动，而且驱动版本要和浏览器版本一致，不然会报一些莫名其妙的错，多少人在 Selenium 的环境上卡住而无法入门；</p><p>2、执行速度好快；</p><p>用过 Selenium 应该知道，跑起来挺慢的，Playwright 的执行速度真的“起飞”。</p><p>在后面对 Playwright 使用和了解越来越多之后发现，它确实全面碾压 Selenium。微软出品，必属精品。</p><h2 id="二、安装" tabindex="-1">二、安装 <a class="header-anchor" href="#二、安装" aria-label="Permalink to &quot;二、安装&quot;">​</a></h2><p>系统环境：<code>deepin-20.8</code></p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pip3 install playwright</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 安装浏览器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">playwright install</span></span></code></pre></div><p>完事儿了，这样环境就装好了，是不是很简单，不用去关心用什么浏览器，用什么 WebDriver 驱动，你的电脑上甚至不用装浏览器，<code>playwright install</code> 已经把测试用的浏览器都装好。</p><h2 id="三、脚本生成器" tabindex="-1">三、脚本生成器 <a class="header-anchor" href="#三、脚本生成器" aria-label="Permalink to &quot;三、脚本生成器&quot;">​</a></h2><p>Selenium IDE 是用来录制脚本的，好多刚开始入门的同学应该都用过，就是在浏览器里面装个插件，然后监控浏览器的事件，生成脚本；我个人倒是极少用，因为会写代码用那玩意儿干啥。（成功装到）</p><p>Playwright 当然也有录制的功能，在终端执行：</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">playwright codegen</span></span></code></pre></div><p>会启动一个“浏览器”窗口和一个“脚本生成器”窗口</p><p><img src="`+h+'" alt=""></p><p>脚本生成器初始状态会有模板代码，你通过浏览器操作的时候，每一步的操作，都会对应在脚本生成器自动生成一行代码，比如，我输入百度的网址：</p><p><img src="'+l+`" alt=""></p><p>在百度首页，点击输入框，输入一个内容，点击“百度一下”，一顿操作下来，代码自动生成如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playwright.sync_api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Playwright, sync_playwright, expect</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(playwright: Playwright) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playwright.chromium.launch(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">headless</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.new_context()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.new_page()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page.goto(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.baidu.com/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page.locator(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#kw&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page.locator(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#kw&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).fill(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;youqu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page.get_by_role(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;百度一下&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ---------------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context.close()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser.close()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sync_playwright() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playwright:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    run(playwright)</span></span></code></pre></div><p>这样就自动生成了一段完整的代码，简直不要太轻松。</p><p>有同学说，能不能直接生成测试用例的代码，当然是可以的，在脚本生成器右上角 Target 选择 <code>pytest</code>，一顿操作下来，生成代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playwright.sync_api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Page, expect</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(page: Page) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page.goto(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.baidu.com/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page.locator(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#kw&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page.locator(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#kw&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).fill(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;youqu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page.get_by_role(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;百度一下&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span></code></pre></div><p>这个脚本是可以直接用 <code>pytest</code> 来执行的，你需要安装 <code>pytest-playwright</code> 插件：</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pip3 install pytest-playwright</span></span></code></pre></div><p><code>pytest-playwright</code> 插件是由 Playwright 官方维护的。</p><p>相信有上面 <code>pytest</code> 这个例子，对于测试同学来讲，写一些简单的用例是没什么问题了。</p><h2 id="四、元素定位方法" tabindex="-1">四、元素定位方法 <a class="header-anchor" href="#四、元素定位方法" aria-label="Permalink to &quot;四、元素定位方法&quot;">​</a></h2><p>对于所有的 UI 自动化来讲，无非就是元素定位和元素操作，Playwright 最常用的元素的定位方法就是 XPath 和 CSS，其次就是它特有的定位方法；</p><h3 id="_1、xpath" tabindex="-1">1、XPath <a class="header-anchor" href="#_1、xpath" aria-label="Permalink to &quot;1、XPath&quot;">​</a></h3><p>XPath 是一种通用、标准的元素定位方案，它的语法也是标准的，在很多框架里面都有使用到，基本能满足 90% 的元素定位需求；</p><p>经常有同学说 XPath 定位不稳定，页面上一点点变化就找不到元素了，说这话的一般是喜欢使用浏览器自带的复制 XPath 的功能，因为复制出来的 XPath 路径是绝对路径，当然不稳定，我们通过观察，自己写相对路径的XPath 表达式；</p><p>简单介绍下 XPath 语法：</p><p>（1）节点选取</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td></tr><tr><td>/</td><td>从根节点选取</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性</td></tr></tbody></table><p>（2）属性选取</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td>/bookstore/book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>/bookstore/book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>/bookstore/book[position()❤️]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>//title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>//title[@lang=&#39;eng&#39;]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>/bookstore/book[price&gt;35.00]/title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><p>在浏览器中调试 XPath：</p><p>按 F12 打开调试页面—&gt;选择 console，XPath 定位的语法是 ：$x()</p><p>举例：</p><p><img src="`+e+'" alt=""></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;//input[@type=&#39;submit&#39;]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>说明通过这个 XPath 表达式可以定位到【百度一下】按钮；</p><p>在 Playwright 里面是通过 page 对象提供的 locator 方法实现 CSS 或 XPath 定位的：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.locater(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;//input[@type=&#39;submit&#39;]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span></code></pre></div><p>Playwright 会自动检测输入的是 CSS 或 XPath。</p><h3 id="_2、css" tabindex="-1">2、CSS <a class="header-anchor" href="#_2、css" aria-label="Permalink to &quot;2、CSS&quot;">​</a></h3><p>了解前端的应该都知道 CSS，这里不多介绍；</p><p>在浏览器中调试 CSS 定位：</p><p><img src="'+n+`" alt=""></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#su&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>说明通过此 CSS 表达式可以定位到【百度一下】按钮；</p><p>在 Playwright 里面：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.locater(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#su&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span></code></pre></div><h3 id="_3、特有的" tabindex="-1">3、特有的 <a class="header-anchor" href="#_3、特有的" aria-label="Permalink to &quot;3、特有的&quot;">​</a></h3><p>Playwright 内置几个定位器：</p><ul><li><p>get_by_role 通过角色定位</p><p>还是上面的例子【百度一下】：</p><p>html 是这样的：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;su&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;百度一下&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bg s_btn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>定位可以这样写：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.get_by_role(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;百度一下&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>get_by_text 通过文本定位</p><p>还是在百度首页找个文本 html ：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hot-refresh-text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;换一换&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>定位可以这样写：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.get_by_text(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;换一换&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>get_by_label 通过标签定位</p><p>html 是这样的：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Password &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>定位可以这样写：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.get_by_label(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul><p>还有其他的内置定位方法：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_by_placeholder 占位符定位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_by_alt_text 替换文本定位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_by_title 标题定位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_by_test_id 测试ID定位</span></span></code></pre></div><h2 id="五、其他" tabindex="-1">五、其他 <a class="header-anchor" href="#五、其他" aria-label="Permalink to &quot;五、其他&quot;">​</a></h2><h3 id="_1、截图" tabindex="-1">1、截图 <a class="header-anchor" href="#_1、截图" aria-label="Permalink to &quot;1、截图&quot;">​</a></h3><p>捕获屏幕截图并将其保存到文件中：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.screenshot(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;screenshot.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>完整页面截图是一个完整的可滚动页面的截图：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.screenshot(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;screenshot.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">full_page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>单个元素进行屏幕截图：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page.locator(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).screenshot(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;screenshot.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_2、录屏" tabindex="-1">2、录屏 <a class="header-anchor" href="#_2、录屏" aria-label="Permalink to &quot;2、录屏&quot;">​</a></h3><p>测试过程录屏，保存的视频文件将出现在指定的文件夹中，生成了唯一的名称，视频保存在浏览器上下文在测试结束时关闭：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.new_context(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record_video_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;videos/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context.close()</span></span></code></pre></div><p>还可以指定视频大小</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.new_context(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    record_video_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;videos/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    record_video_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_3、po" tabindex="-1">3、PO <a class="header-anchor" href="#_3、po" aria-label="Permalink to &quot;3、PO&quot;">​</a></h3><p>PO（Page Object） 是一种分层设计的思想，最早是 Selenium 提出来的，但它本身和使用什么框架没有关系，我们在自动化测试实践过程中，应该始终使用 PO 的设计；</p><h3 id="_4、自动等待" tabindex="-1">4、自动等待 <a class="header-anchor" href="#_4、自动等待" aria-label="Permalink to &quot;4、自动等待&quot;">​</a></h3><p>Playwright 在元素定位的时候是自动等待的，不用再像使用 Selenium 一样设置各种类型的等待（隐式等待、显示等待、强制等待），这才是框架该有的样子。</p><h3 id="_5、断言" tabindex="-1">5、断言 <a class="header-anchor" href="#_5、断言" aria-label="Permalink to &quot;5、断言&quot;">​</a></h3><p>Playwright 有自己的断言语句：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">locator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page.locator(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;input[type=number]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect(locator).to_have_value(re.compile(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>使用 expect 语句，后面跟断言的类型，断言的类型就有点多了，大概看了下有好几十个，列几个常用的：</p><p>to_have_value</p><p>to_contain_text</p><p>to_be_empty</p><p>反向断言，前面加 not，如：not_to_contain_text</p>`,92)]))}const F=i(k,[["render",o]]);export{u as __pageData,F as default};
