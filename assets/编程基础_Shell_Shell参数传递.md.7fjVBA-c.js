import{_ as i,c as a,R as n,o as t}from"./chunks/framework.CuFLN7ac.js";const c=JSON.parse('{"title":"Shell参数传递","description":"","frontmatter":{"Author":"海针 - 搬运"},"headers":[],"relativePath":"编程基础/Shell/Shell参数传递.md","filePath":"编程基础/Shell/Shell参数传递.md","lastUpdated":1736847556000}'),h={name:"编程基础/Shell/Shell参数传递.md"};function p(l,s,e,k,d,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="shell参数传递" tabindex="-1">Shell参数传递 <a class="header-anchor" href="#shell参数传递" aria-label="Permalink to &quot;Shell参数传递&quot;">​</a></h1><h2 id="_1-shell参数" tabindex="-1">1. Shell参数 <a class="header-anchor" href="#_1-shell参数" aria-label="Permalink to &quot;1. Shell参数&quot;">​</a></h2><p>参数常用在脚本，函数，命令工具调用时传入和传出。</p><h3 id="_1-1-常用位置参数" tabindex="-1">1.1 常用位置参数 <a class="header-anchor" href="#_1-1-常用位置参数" aria-label="Permalink to &quot;1.1 常用位置参数&quot;">​</a></h3><p>函数或者命令接收参数时，按照位置获取参数。</p><table><thead><tr><th>工具/表达式</th><th>案例说明</th></tr></thead><tbody><tr><td><code>$0</code></td><td>代表命令或者脚本本身，如常用<code>basename $0</code> 输出脚本名称本身。</td></tr><tr><td><code>$1~$n</code></td><td>第1个到第n个参数,从第10参数开始，引用时要加<code>{}</code>，如$<code>{10}</code></td></tr><tr><td><code>$#</code></td><td>传入的参数个数</td></tr><tr><td><code>$*</code></td><td>传入的全部参数</td></tr><tr><td><code>$@</code></td><td>传入的全部参数</td></tr></tbody></table><h3 id="_1-2-和-的使用区别" tabindex="-1">1.2 <code>$@</code>和<code>$*</code>的使用区别 <a class="header-anchor" href="#_1-2-和-的使用区别" aria-label="Permalink to &quot;1.2 \`$@\`和\`$*\`的使用区别&quot;">​</a></h3><p>多个参数传递使用空格分隔，二者在没有使用双引号的情况下传递效果是一致的，所有参数依次解析； 当带有双引号时，<code>$*</code>中所有的参数连同空格会被当成一个字符串参数传递，而<code>$@</code>仍然会被空格分隔成多个参数（如果某个参数本身带有空格不会分隔成两个参数）。 如下：</p><p><code>test@test-PC:~/work/study/shell/share$ vi param.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Param list is:[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> $@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;arg[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Param list is:[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;arg[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Param list is:[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;arg[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Param list is:[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;arg[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre></div><p>执行结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>输出结果：</span></span>
<span class="line"><span>test@test-PC:~/work/study/shell/share$ bash param.sh </span></span>
<span class="line"><span>Param list is:[1 2 3 4]</span></span>
<span class="line"><span>arg[1]</span></span>
<span class="line"><span>arg[2]</span></span>
<span class="line"><span>arg[3]</span></span>
<span class="line"><span>arg[4]</span></span>
<span class="line"><span>Param list is:[1 2 3 4]</span></span>
<span class="line"><span>arg[1]</span></span>
<span class="line"><span>arg[2]</span></span>
<span class="line"><span>arg[3]</span></span>
<span class="line"><span>arg[4]</span></span>
<span class="line"><span>Param list is:[1 2 3 4]</span></span>
<span class="line"><span>arg[1]</span></span>
<span class="line"><span>arg[2]</span></span>
<span class="line"><span>arg[3]</span></span>
<span class="line"><span>arg[4]</span></span>
<span class="line"><span>Param list is:[1 2 3 4]</span></span>
<span class="line"><span>arg[1 2 3 4]</span></span></code></pre></div><h3 id="_1-3-参数的位移" tabindex="-1">1.3 参数的位移 <a class="header-anchor" href="#_1-3-参数的位移" aria-label="Permalink to &quot;1.3 参数的位移&quot;">​</a></h3><p>使用<code>shift</code>改变参数位置，参数从<code>$1</code>开始，<code>shift</code>每提取一个参数，后续的参数列表向左移一个参数位，即原来的<code>$2</code>变成了<code>$1</code>,原来的<code>$1</code>丢弃。 <code>shfit</code>每次只需要提取<code>$1</code>，以此类推，直到所有参数提取完毕。常用于不关心参数个数，依次处理参数时用<code>shift</code>。</p><p><code>test@test-PC:~/work/study/shell/share$ shift_test.sh</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin//bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$#</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -gt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Catch arg:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, left:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    shift</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p>执行结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># bash shift_test.sh a b c d</span></span>
<span class="line"><span>Catch arg:a, left:4</span></span>
<span class="line"><span>Catch arg:b, left:3</span></span>
<span class="line"><span>Catch arg:c, left:2</span></span>
<span class="line"><span>Catch arg:d, left:1</span></span></code></pre></div><h3 id="_1-4-参数传入和传出" tabindex="-1">1.4 参数传入和传出 <a class="header-anchor" href="#_1-4-参数传入和传出" aria-label="Permalink to &quot;1.4 参数传入和传出&quot;">​</a></h3><h4 id="_1-4-1-自定义函数参数的传入和传出" tabindex="-1">1.4.1 自定义函数参数的传入和传出 <a class="header-anchor" href="#_1-4-1-自定义函数参数的传入和传出" aria-label="Permalink to &quot;1.4.1 自定义函数参数的传入和传出&quot;">​</a></h4><p><code>test@test-PC:~/work/study/shell/share$ vi deffunc.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;in_value=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    eval</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> $2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=&quot;out&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 在函数内部对第2个参数进行赋值后，调用者在后续流程中可以使用，如果有多个参数，如$3,$4可以依次赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defunc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in_value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out_value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;out_value=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out_value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>如上： <code>in_value</code>为入参数，也是第一个参数。实际上<code>in_value</code>作为变量，在定义变量的位置开始一直到Shell脚本执行结束，变量都是生效的。所以即使不传递，在<code>pararm_test</code>也是可以使用的。这不在本节讨论范围，实际也不推荐这样做。这里仍然作为参数传递； <code>out_value</code>为出参数，也是第二个参数，从同赋值的位置开始，到Shell脚本结束，变量都是生效的。 执行结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>test@test-PC:~/work/study/shell/share$ bash deffunc.sh </span></span>
<span class="line"><span>in_value=in</span></span>
<span class="line"><span>out_value=out</span></span></code></pre></div><p>有时我们也可以利用函数的返回值当做出参数， 但这是有局限性的，函数的返回值只能为正整型，否则会报错，且数值在0～255区间内，超出范围会反转。 <code>test@test-PC:~/work/study/shell/share$ vi retfunc.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> retfunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;in_value=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 128</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retfunc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in_value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;out_value=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out_value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span></code></pre></div><p>执行结果输出</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>test@test-PC:~/work/study/shell/share$ bash retfunc.sh</span></span>
<span class="line"><span>in_value=in</span></span>
<span class="line"><span>out_value=128</span></span></code></pre></div><p>如上，<code>return</code>的返回值为<code>128</code>，在<code>0~255</code>区间内，现在我们把它改为<code>256</code>。 执行结果输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>test@test-PC:~/work/study/shell/share$ bash retfunc.sh </span></span>
<span class="line"><span>in_value=in</span></span>
<span class="line"><span>out_value=0</span></span></code></pre></div><p>改成<code>-1</code>，执行结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>test@test-PC:~/work/study/shell/share$ bash retfunc.sh </span></span>
<span class="line"><span>in_value=in</span></span>
<span class="line"><span>out_value=255</span></span></code></pre></div><p>改成<code>A</code>，执行结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>test@test-PC:~/work/study/shell/share$ bash retfunc.sh </span></span>
<span class="line"><span>in_value=in</span></span>
<span class="line"><span>retfunc.sh: 第 6 行：return: A：需要数字参数</span></span>
<span class="line"><span>out_value=2</span></span></code></pre></div><p>综上，函数返回值超出<code>0~255</code>会反转，非数字则报错。一般情况下我们是利用函数的返回码来做函数执行状态判断的。我们可以定义<code>0</code>为成功，非<code>0</code>则失败，根据不同的数字值可以设定不同的错误状态。</p><h4 id="_1-4-2-数组做为参数进行传递" tabindex="-1">1.4.2 数组做为参数进行传递 <a class="header-anchor" href="#_1-4-2-数组做为参数进行传递" aria-label="Permalink to &quot;1.4.2 数组做为参数进行传递&quot;">​</a></h4><p>数组也可以作为参数进行传递，这涉及到如何数组的取值， 如下, <code>$WEEK</code>仅取值数组中第一个 元素， 而<code>\${WEEK[@]}</code>或者<code>\${WEEK[*]}</code>才是取整个数组的值，所以我们做为参数传递时要传递整个数组。</p><p><code>test@test-PC:~/work/study/shell/share$ vi arr_param.sh</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arr_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {   </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Input is: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WEEK=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MON&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TUE&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;WED&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;THU&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FRI&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SAT&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SUN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arr_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $WEEK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arr_param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WEEK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[@]}&quot;</span></span></code></pre></div><p><strong>注意:<code>\${WEEK[@]}</code>和<code>\${WEEK[*]}</code>有什么区别呢？参考章节 <a href="#12-和的使用区别">&quot;1.2 <code>$@</code>和<code>$*</code>的使用区别&quot;</a>。</strong></p><h4 id="_1-4-3-函数名做为参数传递" tabindex="-1">1.4.3 函数名做为参数传递 <a class="header-anchor" href="#_1-4-3-函数名做为参数传递" aria-label="Permalink to &quot;1.4.3 函数名做为参数传递&quot;">​</a></h4><p>函数名也可以做为参数进行传递，使用时用 <code>eval</code> 进行二次解析。 <code>eval</code> 的作用是先将命令中的变量进行一次解析，然后再执行命令。</p><p><code>test@test-PC:~/work/study/shell/share$ vi func_param.sh </code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ))</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ))</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ))</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       #取到函数名，赋值给变量func</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    shift</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #剔除第一个参数（即函数名），剩下的就是要在调用函数中处理的参数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${func} </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ret</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func_param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;max&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func_param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;min&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func_param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abs&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -8</span></span></code></pre></div><p>如上，我们定义了三个函数<code>max</code>,<code>min</code>,<code>abs</code>分别求传入数字最大，最小和绝对值，我们可以将它们的名称作为参数传递给<code>func_param</code>。</p><h2 id="_2-getopts和getopt" tabindex="-1">2. getopts和getopt <a class="header-anchor" href="#_2-getopts和getopt" aria-label="Permalink to &quot;2. getopts和getopt&quot;">​</a></h2><h3 id="_2-1-getopts-命令" tabindex="-1">2.1 getopts 命令 <a class="header-anchor" href="#_2-1-getopts-命令" aria-label="Permalink to &quot;2.1 getopts 命令&quot;">​</a></h3><p>getopts是Bash内置命令，用于格式化参数解析。在开发脚本或者小工具时（需要通过传入参数执行特定功能）时，可以按照给定格式传递与解析参数</p><p>命令的关键点，以getopts &#39;l:t:p:d&#39; 为例说明</p><ul><li><ol><li><code>getopts</code>后面的参数约定了<code>getopts</code>所在函数或脚本的接收参数内容及格式， 如支持参数为 <code>-l</code>, <code>-t</code>, 参数只能为单个字符, 不支持长参数名，比如<code>--lang</code>.</li></ol></li><li><ol start="2"><li><code>getopts</code> 定义的参数后带<code>:</code>，表示参数为键值参数，需要给参数传入一个值； 如不带<code>:</code>说明是一个开关参数，默认开关是<code>true</code>。</li></ol></li><li><ol start="3"><li>常量<code>OTPARG</code>记录当前参数的值， <code>OPTIND</code>记录下一参数位置。</li></ol></li><li><ol start="4"><li>当出现了不在约定的参数列表中的参数时，进入 <code>?</code> 分支。</li></ol></li><li><ol start="5"><li>当前<code>getopts</code>后面的参数列表以<code>:</code>开始时， <code>getopts</code>进入安静模式，不打印内置的错误描述。</li></ol></li></ul><h3 id="_2-2-getopt" tabindex="-1">2.2 getopt <a class="header-anchor" href="#_2-2-getopt" aria-label="Permalink to &quot;2.2 getopt&quot;">​</a></h3><p>getopt是一个外部工具，可以通过<code>man getopt</code>查看具体用法。</p>`,52)]))}const F=i(h,[["render",p]]);export{c as __pageData,F as default};
