import{_ as l,c as t,R as i,G as n,B as h,o as p}from"./chunks/framework.DzXLMhZy.js";const y=JSON.parse('{"title":"Python调用动态库运行时报静态TLS块不能分配内存根因分析报告","description":"","frontmatter":{"Author":"张芮"},"headers":[],"relativePath":"技术文档/根因分析/Python调用动态库运行时报静态TLS块不能分配内存根因分析报告.md","filePath":"技术文档/根因分析/Python调用动态库运行时报静态TLS块不能分配内存根因分析报告.md","lastUpdated":1736789675000}'),k={name:"技术文档/根因分析/Python调用动态库运行时报静态TLS块不能分配内存根因分析报告.md"};function e(E,s,d,r,o,c){const a=h("Mermaid");return p(),t("div",null,[s[0]||(s[0]=i(`<h1 id="python调用动态库运行时报静态tls块不能分配内存根因分析报告" tabindex="-1"><code>Python</code>调用动态库运行时报静态<code>TLS</code>块不能分配内存根因分析报告 <a class="header-anchor" href="#python调用动态库运行时报静态tls块不能分配内存根因分析报告" aria-label="Permalink to &quot;\`Python\`调用动态库运行时报静态\`TLS\`块不能分配内存根因分析报告&quot;">​</a></h1><h2 id="一、相关术语" tabindex="-1">一、相关术语 <a class="header-anchor" href="#一、相关术语" aria-label="Permalink to &quot;一、相关术语&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">缩写</th><th style="text-align:center;">全称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">Python</td><td style="text-align:center;">Python</td><td style="text-align:left;">一种跨平台的计算机程序设计语言</td></tr><tr><td style="text-align:center;">C++</td><td style="text-align:center;">C++</td><td style="text-align:left;">一种静态数据类型检查的、支持多重编程范式的通用程序设计语言</td></tr><tr><td style="text-align:center;"><code>jemalloc</code></td><td style="text-align:center;"><code>jemalloc</code></td><td style="text-align:left;">一种内存分配器</td></tr><tr><td style="text-align:center;"><code>TLS</code></td><td style="text-align:center;">Thread-Local Storage</td><td style="text-align:left;">一种实现线程私有全局变量的机制</td></tr><tr><td style="text-align:center;">Initial Executable</td><td style="text-align:center;">Initial Executable</td><td style="text-align:left;">一种在程序启动后从加载的共享对象中引用<code>TLS</code>变量的模型</td></tr></tbody></table><h2 id="二、问题概述" tabindex="-1">二、问题概述 <a class="header-anchor" href="#二、问题概述" aria-label="Permalink to &quot;二、问题概述&quot;">​</a></h2><p>【背景】</p><p>基于Python、C++，通过白盒测试手段完成对某些重要功能在代码层面的测试</p><p>【复现步骤】</p><p>1.<code>Python</code>通过<code>ctypes</code>第三方库调用C++ 动态库so文件中的函数</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#加载C++动态库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes.cdll.LoadLibrary(config.so_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/libfjemalloc.so&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lib.fibo(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>2.运行时报<code>libjemalloc.so.2 cannot allocate memory in static TLS block</code></p><p>【期望】</p><p>可正常调用共享库so中的函数并得到正确的结果。</p><p>【环境】</p><p>硬件环境：<code>X86</code>平台、<code>ARM</code>平台（<code>龙芯平台、申威平台未依赖jemalloc</code>）</p><p>python：<code>3.7</code></p><p>jemalloc:<code>5.1.0-3</code></p><h2 id="三、问题分析" tabindex="-1">三、问题分析 <a class="header-anchor" href="#三、问题分析" aria-label="Permalink to &quot;三、问题分析&quot;">​</a></h2><p>在<code>X86</code>平台和ARM平台上，Python调用C++动态库so中函数并运行的流程如下图所示，Python程序使用第三方库<code>ctypes</code>加载<code>libTestlib</code>、并通过<code>jemalloc</code>进行内存分配。</p>`,18)),n(a,{id:"mermaid_64a5706c",graph:"sequenceDiagram%0APython-%3E%3ElibTest.so%3A%20ctypes%E5%8A%A0%E8%BD%BD%E5%8A%A8%E6%80%81%E5%BA%93%0AlibTest.so-%3E%3Ejemalloc%3A%20%E4%BE%9D%E8%B5%96jemalloc%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%0Ajemalloc--%3E%3ElibTest.so%3A%20%E5%AE%8C%E6%88%90%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%0AlibTest.so--%3E%3EPython%3A%20%E8%BF%94%E5%9B%9Eso%E5%AF%B9%E8%B1%A1"}),s[1]||(s[1]=i(`<p>。</p><p><strong>【分析】</strong></p><p>加载动态库<code>jemalloc</code>时报不能在静态<code>TLS</code>块中分配内存，可以猜测导致出现报错的原因有两种：</p><ul><li>第一：Python使用第三方库<code>ctypes</code>调用C++动态库存在问题。</li><li>第二：<code>jemalloc</code>内部在分配内存时有一些特性导致加载C++动态库存在问题。</li></ul><p><strong>对第一种情况进行分析</strong></p><p>使用<code>ctypes.cdll.LoadLibrary</code>的方式加载依赖<code>jemalloc</code>的动态库与加载不依赖<code>jemalloc</code>的动态库，验证Python是否能正常加载so文件：</p><p>1.通过<code>ctypes</code>加载不依赖<code>jemalloc</code>的共享库：<code>ldd libfibo.so</code>列出该库依赖的其他共享库</p><p><img src="https://i.loli.net/2020/11/24/RnHYMDXsC2V7EpO.png" alt="1"></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#加载C++动态库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes.cdll.LoadLibrary(config.so_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/libfibo.so&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lib.fibo(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">运行结果：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">usr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">python3.7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">home</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mola</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PycharmProjects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">whitebox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">autotest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test.py</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><p>2.通过<code>ctypes</code>加载依赖<code>jemalloc</code>的共享库：<code>ldd libfjemalloc.so</code>列出该库依赖的其他共享库</p><p><img src="https://i.loli.net/2020/11/24/uQpWq6cVLR7zxAC.png" alt="截图录屏_选择区域_20201124135519"></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#加载C++动态库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes.cdll.LoadLibrary(config.so_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/libfjemalloc.so&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lib.fibo(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">运行结果：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Traceback (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  File </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/mola/PycharmProjects/whitebox-autotest/utils/test1.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes.cdll.LoadLibrary(config.so_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/libfjemalloc.so&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  File </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/usr/lib/python3.7/ctypes/__init__.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">434</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoadLibrary</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._dlltype(name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  File </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/usr/lib/python3.7/ctypes/__init__.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">356</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _dlopen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._name, mode)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OSError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x86_64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">linux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gnu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">libjemalloc.so.2: cannot allocate memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TLS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block</span></span></code></pre></div><p>根据调用两个共享库的对比结果可知，Python通过<code>ctypes</code>第三方库加载C++共享库的方案是可行的。</p><p><strong>对第二种情况进行分析</strong></p><p><code>jemalloc</code>是一个能够快速分配/回收内存，减少内存碎片，对多核友好，具有可伸缩性的内存分配器。</p><p><code>TLS</code>线程局部缓存，将数据和执行的特定的线程连续起来，在线程内部，各个函数可以像使用全局变量一样调用它，但它对线程外部的的其他线程是不可见的。</p><p><code>TLS</code>有４种访问模型，每个<code>TLS</code>的引用均遵循其中之一，另外，可以从较一般的访问模型转换为更优化的访问模型。</p><table><thead><tr><th>访问类型</th><th>解释</th></tr></thead><tbody><tr><td>General Dynamic (GD) - dynamic <code>TLS</code></td><td>此模型允许从共享对象或动态可执行文件引用所有<code>TLS</code>变量，当<code>TLS</code>块首次从特定线程引用时，该模型还支持延迟分配<code>TLS</code>块</td></tr><tr><td>Local Dynamic (<code>LD</code>) - dynamic <code>TLS</code> of local symbols</td><td>该模型是对GD模型的优化。编译器可以确定变量是在本地绑定的，还是在正在构建的对象中受保护的</td></tr><tr><td>Initial Executable (IE) - static <code>TLS</code> with assigned offsets</td><td>这个模型只能引用作为初始静态<code>TLS</code>模板一部分的<code>TLS</code>变量。这个模板由进程启动时可用的所有<code>TLS</code>块以及一个小的备份预留块组成。（通过固定预留块来满足有限数量<code>TLS</code>的访问）</td></tr><tr><td>Local Executable (LE) - static <code>TLS</code></td><td>这个模型只能引用作为动态可执行文件的<code>TLS</code>块的一部分的<code>TLS</code>变量</td></tr></tbody></table><p>查看<code>jemalloc</code>源码可知，<code>jemalloc</code>默认打开initial-exec模型并定义了<code>JEMALLOC_TLS_MODEL</code></p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dnl Use initial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exec TLS by </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AC_ARG_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([initial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [AS_HELP_STRING([--</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Disable</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> the</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tls</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[if test &quot;x$enable_initial_exec_tls&quot; = &quot;xno&quot; ; then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  enable_initial_exec_tls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  enable_initial_exec_tls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fi</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">enable_initial_exec_tls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AC_SUBST([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enable_initial_exec_tls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">if test &quot;x\${je_cv_tls_model}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xyes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; -a \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${enable_initial_exec_tls}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">x1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; ; then</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  AC_DEFINE([JEMALLOC_TLS_MODEL],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            [__attribute__((tls_model(&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">initial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;)))])</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">else</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  AC_DEFINE([JEMALLOC_TLS_MODEL], [ ])</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fi</span></span></code></pre></div><p>通过<code>JEMALLOC_TLS_MODEL</code>，找到了<code>tsd.h</code>，里面的头文件清晰的解释了定义与不定义<code>JEMALLOC_TLS_MODEL</code>的区别,如果默认开启了initial-exec模型，即定义了<code>JEMALLOC_TLS_MODEL</code>，则使用<code>tsd_tls.h</code>，如果没有，则使用<code>tsd_generic.h</code></p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//tsd.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JEMALLOC_MALLOC_THREAD_CLEANUP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jemalloc/internal/tsd_malloc_thread_cleanup.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JEMALLOC_TLS))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jemalloc/internal/tsd_tls.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_WIN32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jemalloc/internal/tsd_win.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jemalloc/internal/tsd_generic.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span></code></pre></div><p>查阅<code>tsd_tls.h</code>源码：直接将变量赋值给了已经存在的内存地址</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//tsd_tls.h</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Get/set. */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JEMALLOC_ALWAYS_INLINE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tsd_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsd_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> init) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tsd_tls;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JEMALLOC_ALWAYS_INLINE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsd_set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tsd_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tsd_booted);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">likely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tsd_tls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		tsd_tls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_setspecific</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tsd_tsd, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tsd_tls)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		malloc_write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;jemalloc&gt;: Error setting tsd.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opt_abort) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>查阅<code>tsd_generic.h</code>：先申请内存空间，再将变量赋值给申请的内存地址</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//tsd_generic.h</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Get/set. */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JEMALLOC_ALWAYS_INLINE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tsd_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsd_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> init) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	tsd_wrapper_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wrapper;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tsd_booted);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	wrapper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tsd_wrapper_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(init);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsd_get_allocates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">init </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wrapper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wrapper-&gt;val;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JEMALLOC_ALWAYS_INLINE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsd_set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tsd_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	tsd_wrapper_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wrapper;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tsd_booted);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	wrapper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tsd_wrapper_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">likely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wrapper-&gt;val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		wrapper-&gt;val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	wrapper-&gt;initialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>综上分析，<code>jemalloc</code>默认开启initial-exec模型，直接将静态<code>TLS</code>变量指向已有的内存空间，但Python是使用<code>dlopen</code>的方式加载动态库，即没有分配好的内存空间，因此相关报错大概率与<code>jemalloc</code>的initial-exec模型特性有关。</p><h2 id="四、实验验证" tabindex="-1">四、实验验证 <a class="header-anchor" href="#四、实验验证" aria-label="Permalink to &quot;四、实验验证&quot;">​</a></h2><p>根据分析结果，相关报错大概率与<code>jemalloc</code>的initial-exec模型特性有关。那么可以通过在编译<code>jemalloc</code>时启用和禁用该功能来判断该分析结论是否正确。</p>`,29)),n(a,{id:"mermaid_64a5685e",graph:"graph%20TD%0AA(%E5%BC%80%E5%A7%8B)%20--%3EB(%E5%87%86%E5%A4%87%E4%BE%9D%E8%B5%96jemalloc%E7%9A%84%E5%85%B1%E4%BA%AB%E5%BA%93libtest.so)%0A%09B%20--%3E%20C(%E4%BD%BF%E7%94%A8dlopen%E6%96%B9%E5%BC%8F%E8%B0%83%E7%94%A8test.so)%0A%20%20%20%20C%20--%3E%20D(%E5%AF%B9jemalloc%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91%E7%A6%81%E7%94%A8initial-exec)%0A%20%20%20%20D%20--%3E%20E(%E4%BD%BF%E7%94%A8dlopen%E6%96%B9%E5%BC%8F%E8%B0%83%E7%94%A8test.so)%0A%20%20%20%20E%20--%3E%20F(%E5%AF%B9%E6%AF%94%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C)%0A%20%20%20%20F%20--%3E%20%7C%E6%BB%A1%E8%B6%B3%E5%AE%9E%E9%AA%8C%E6%9C%9F%E6%9C%9B%7CG(%E6%88%90%E5%8A%9F)%0A%20%20%20%20F%20--%3E%20%7C%E4%B8%8D%E6%BB%A1%E8%B6%B3%E5%AE%9E%E9%AA%8C%E6%9C%9F%E6%9C%9B%7CH(%E5%A4%B1%E8%B4%A5)%0A%20%20%20%20G%20--%3E%20I(%E7%BB%93%E6%9D%9F)%0A%20%20%20%20H%20--%3E%20I"}),s[2]||(s[2]=i(`<p>【影响分析】</p><p>根据问题分析中的源码分析可知，禁用与不禁用initial-exec的不同在于变量的内存空间分配上，不会对原有代码的功能逻辑产生影响。</p><p>【实验环境】</p><p>系统：<code>uos 20 1030</code></p><p>python：<code>3.7</code></p><p>jemalloc:<code>5.1.0-3</code></p><p>【实验设计】</p><p>实验操作：</p><p>操作1：编译一个依赖<code>jemalloc</code>的动态库<code>libtest.so</code>。</p><p>操作2：对<code>jemalloc</code>进行重新编译禁用initial-exec。</p><p>操作3：进行操作2前，使用<code>dlopen</code>加载<code>libtest.so</code>，记录运行结果。</p><p>操作4：进行操作2后，使用<code>dlopen</code>加载<code>libtest.so</code>，记录运行结果。</p><p>实验步骤：</p><p>操作1-&gt;操作3-&gt;操作2-&gt;操作4</p><p>实验期望： $$ 对jemalloc重新编译后，可通过dlopen方式正常加载test.so $$</p><p>【实验验证】</p><p>步骤一：首先完成操作1，编译一个依赖<code>jemalloc</code>的动态库<code>libtest.so</code>。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">using namespace std;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fibo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fibo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用如下命令进行编译</p><p><code>g++ -fPIC -shared test.cpp -o libtest.so -ljemalloc</code></p><p>步骤二:使用Python直接调用<code>libtest.so</code>，运行结果如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#python源码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#加载C++动态库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes.cdll.LoadLibrary(config.so_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/libtest.so&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lib.fibo(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#运行结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">usr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">python3.7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">home</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mola</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PycharmProjects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">whitebox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">autotest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utils</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test1.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Traceback (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  File </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/mola/PycharmProjects/whitebox-autotest/utils/test1.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes.cdll.LoadLibrary(config.so_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/test.so&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  File </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/usr/lib/python3.7/ctypes/__init__.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">434</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoadLibrary</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._dlltype(name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  File </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/usr/lib/python3.7/ctypes/__init__.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">356</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _dlopen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._name, mode)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OSError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x86_64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">linux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gnu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">libjemalloc.so.2: cannot allocate memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TLS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Process finished </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><p>步骤三：重新编译<code>jemalloc</code>，禁用initial-exec</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.下载jemalloc-5.1.0.tar.bz2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xjvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jemalloc-5.1.0.tar.bz2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -prefix=/usr/local/jemalloc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --disable-initial-exec-tls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/jemalloc/lib/libjemalloc.so.2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /lib/x86_64-linux-gnu/</span></span></code></pre></div><p>步骤四：使用Python直接调用<code>libtest.so</code>，运行结果如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#python源码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#加载C++动态库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctypes.cdll.LoadLibrary(config.so_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/libtest.so&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lib.fibo(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#运行结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">usr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">python3.7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">home</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mola</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PycharmProjects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">whitebox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">autotest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utils</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test1.py</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Process finished </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span></code></pre></div><p>步骤五：运行结果对比</p><p>根据实验结果，未禁用initial-exec时运行程序会报错、禁用initial-exec后程序可正常运行，即禁用前，需要提前预留内存并将其分配给相应的静态<code>TLS</code>使用，禁用后，则不再需要提前分配内存，因此<strong>数据符合期望值</strong>。</p><p><strong>最终得出结论：</strong></p><p>Python调用动态库报错的根本原因是:<code>jemalloc</code>默认打开了<code>Initial Executable (IE)</code> 模型，而Python是通过<code>dlopen</code>的方式加载动态库，导致没有预留的内存可分配给相应的静态<code>TLS</code>使用。</p><h2 id="五、解决方案" tabindex="-1">五、解决方案 <a class="header-anchor" href="#五、解决方案" aria-label="Permalink to &quot;五、解决方案&quot;">​</a></h2><p>根据上述实验可知，在程序启动后，加载包含静态<code>TLS</code>的共享对象时，会给这些静态<code>TLS</code>分配内存，由于Python的第三方库<code>ctypes</code>是使用<code>dlopen</code>的方式加载动态库（<code>以dlopen的方式加载动态库只能在程序运行时进行内存分配，不能提前分配内存</code>）导致报不能在静态<code>TLS</code>中分配内存的错误。</p><p><strong>方案一：更换动态库的依赖对象</strong></p><p>既然调用依赖<code>jemalloc</code>的动态库，会报不能在静态<code>TLS</code>中分配内存的错误，那么可以换一种内存分配器来规避该问题，常见的内存分配器有<code>tcmalloc</code>、<code>jemalloc</code>、<code>ptmalloc</code>，如果我们的动态库在编译时没有指定<code>jemalloc</code>，则默认链接到<code>ptmalloc</code>，即经过上面的问题分析可知，使用<code>ptmalloc</code>内存分配器不会出现相关报错。</p><p><strong>方案二：禁用<code>jemalloc</code>的Initial Executable模型特性</strong></p><p>使用<code>jemalloc</code>会报相关错误的原因是<code>jemalloc5</code>新增了一个新特性，会在加载包含静态<code>TLS</code>的动态库时给静态<code>TLS</code>分配内存，但由于使用<code>dlopen</code>的方式加载动态库，没有静态存储区可用，因此我们可以通过禁用<code>jemalloc</code>的这个特性来解决这个问题，可使用shell脚本来实现该操作的自动化。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> su</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libjemalloc-dev</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jemalloc-5.1.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -prefix=/usr/local/jemalloc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --disable-initial-exec-tls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/jemalloc/lib/libjemalloc.so.2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /lib/x86_64-linux-gnu/</span></span></code></pre></div><p><strong>方案比较</strong></p><p>从可行性、可操作性、稳定性等方面进行考虑可知，由于我们是通过Python加载动态库的方式对开发的C++源码进行测试，而开发构建出来的动态库在<code>X86</code>平台和ARM平台默认依赖<code>jemalloc</code>（<code>龙芯和申威未依赖jemalloc</code>），如果要更换内存分配器，则潜在影响是未知且巨大的，方案一从可操作性、稳定性方面被否决；方案二目前能解决该问题，且可操作性很强，影响也较小。</p><table><thead><tr><th></th><th>方案一</th><th>方案二</th></tr></thead><tbody><tr><td>可行性</td><td>可行</td><td>可行</td></tr><tr><td>易操作性</td><td>较差</td><td>较好</td></tr><tr><td>跨平台性</td><td>不可行</td><td>可行</td></tr><tr><td>稳定性</td><td>不稳定</td><td>稳定</td></tr></tbody></table><p><strong>影响评估:</strong></p><p><code>jemalloc</code>默认开启Initial Executable模型特性的优点：在对静态<code>TLS</code>进行内存分配时可直接赋值，不需要每次都重新申请内存空间，可使性能有一定的提升。</p><p><code>jemalloc</code>禁用Initial Executable模型特性的影响：首先，在性能方面会有一定的影响，其次，在动态申请内存时会存在一定的风险，例如可能会遇到没有内存可用的极端情况等。本次使用场景为基于<code>Python</code>、对Ｃ++动态库的白盒测试，因此在性能及其他方面的影响可忽略。</p><p><strong>最终结论：</strong></p><p>最终选择方案二来解决该问题，即禁用<code>jemalloc</code>的Initial Executable模型特性。</p><h2 id="六、小结" tabindex="-1">六、小结 <a class="header-anchor" href="#六、小结" aria-label="Permalink to &quot;六、小结&quot;">​</a></h2><p>问题描述：Python通过<code>ctypes</code>第三方库调用C++ 动态库so文件中的函数，运行时报<code>libjemalloc.so.2 cannot allocate memory in static TLS block</code>。</p><p>根因查找步骤：现象-&gt;分析-&gt;假设-&gt;实验-&gt;验证-&gt;结论。</p><p>根本原因：<code>jemalloc5</code>有一个新特性，在加载共享对象时会给静态<code>TLS</code>分配预留内存。由于Python使用<code>dlopen</code>的方式加载共享对象，不能提前预分配内存导致报错。</p><p>解决方案：重新编译<code>jemalloc</code>禁用Initial Executable模型特性。</p><p>优化/改进：可向在<code>jemalloc</code>源码中自动判定是否需要开启<code>TLS</code>的Initial Executable特性的方向探索</p><p>收获与启示：在平时工作过程中，需要多多学习系统底层相关理论知识，在原理上实践。</p><h2 id="七、参考资料" tabindex="-1">七、参考资料 <a class="header-anchor" href="#七、参考资料" aria-label="Permalink to &quot;七、参考资料&quot;">​</a></h2><ul><li><p><a href="https://github.com/jemalloc/jemalloc/" target="_blank" rel="noreferrer">jemalloc源码</a></p></li><li><p><a href="https://blog.csdn.net/foreverfresh/article/details/78932776" target="_blank" rel="noreferrer">TLS四种模式介绍</a></p></li></ul>`,54))])}const F=l(k,[["render",e]]);export{y as __pageData,F as default};
